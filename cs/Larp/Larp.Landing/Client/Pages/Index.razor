@page "/"
@using Larp.Landing.Shared
@using System.Text.Json
@using Larp.Landing.Client.Pages.EventsSection
@inherits LarpPage
@inject LandingService LandingService
<PageHeader>@LandingService.ServiceName</PageHeader>

<div class="background"></div>
<div class="buffer"></div>

<style>
     .links a { color: #fff; text-decoration: underline }
</style>

<MudContainer MaxWidth="MaxWidth.Small" Class="index">
    <MudStack Spacing="4">
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
            <img src="/tree-white.webp" style="height: 5em; width: 5em;" alt="Mystwood Tree Logo"/>
            <MudStack Spacing="0">
                <MudText Typo="Typo.h5" Align="Align.Center" Style="color: white; margin: 0">Welcome to @LandingService.ServiceName!</MudText>
                <MudText Typo="Typo.body1" Align="Align.Left" Style="color: #fff">
                    Visit the <a style="color: #ada" href="http://mystwood.org/" target="_blank" rel="bookmark">Mystwood</a> homepage for more information.
                </MudText>
            </MudStack>
        </MudStack>

        @if (_dashboard.AvailableMoonstone.HasValue && _dashboard.TotalMoonstone.HasValue)
        {
            <MudStack Spacing="4">
                <MudStack Row AlignItems="AlignItems.Start" Justify="Justify.SpaceEvenly" Class="my-4">
                    <MudTooltip Text="Total amount Moonstone you have earned">
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                            <MudAvatar Color="Color.Primary">@_dashboard.TotalMoonstone</MudAvatar>
                            <MudText Style="color: #fff" Align="Align.Center" Typo="Typo.caption">Total<br/>Moonstone</MudText>
                        </MudStack>
                    </MudTooltip>
                    <MudTooltip Text="The amount of moonstone you have available available">
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                            <MudAvatar Color="Color.Success">@_dashboard.AvailableMoonstone</MudAvatar>
                            <MudText Style="color: #fff" Align="Align.Center" Typo="Typo.caption">Available<br/>Moonstone</MudText>
                        </MudStack>
                    </MudTooltip>
                </MudStack>
            </MudStack>
        }

        <MudStack Spacing="4">
            @if (_upcomingEvents.Length > 0)
            {
                <MudText Typo="Typo.h6" Style="color: #fff">Upcoming Events</MudText>
                <MudStack Spacing="4">
                    @foreach (var ev in _upcomingEvents)
                    {
                        var preregUrl = () => NavigationManager.NavigateTo($"/events/{ev.Event.EventId}/letter/{LetterNames.PreEvent}");

                        <EventCard Item="ev" HideLetters>
                            <Header>
                                @switch (ev.PreEvent?.State)
                                {
                                    case null:
                                    case LetterState.NotStarted:
                                    case LetterState.Draft:
                                        <MudChip Color="Color.Error" Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" OnClick="preregUrl">RSVP</MudChip>
                                        break;

                                    case LetterState.Submitted:
                                        <MudChip Color="@Color.Warning" Icon="@Icons.Material.Filled.ManageSearch" Size="@Size.Small" OnClick="preregUrl">Prereg Submitted</MudChip>
                                        break;

                                    case LetterState.Approved:
                                        <MudChip Color="@Color.Success" Icon="@Icons.Material.Filled.Check" Size="@Size.Small" OnClick="preregUrl">Prereg Approved</MudChip>
                                        break;
                                }
                            </Header>
                        </EventCard>
                    }
                </MudStack>
            }

            @if (_pelEvents.Length > 0)
            {
                <MudText Typo="Typo.h6" Style="color: #fff">PEL Status</MudText>
                <MudStack Spacing="4">
                    @foreach (var ev in _pelEvents)
                    {
                        var pelUrl = () => NavigationManager.NavigateTo($"/events/{ev.Event.EventId}/letter/{LetterNames.PostEvent}");

                        <EventCard Item="ev" HideLetters>
                            <Header>
                                @switch (ev.PostEvent?.State)
                                {
                                    case null:
                                    case LetterState.NotStarted:
                                    case LetterState.Draft:
                                        <MudChip Color="Color.Error" Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" OnClick="pelUrl">PEL Not Started</MudChip>
                                        break;

                                    case LetterState.Submitted:
                                        <MudChip Color="@Color.Warning" Icon="@Icons.Material.Filled.ManageSearch" Size="@Size.Small" OnClick="pelUrl">PEL Submitted</MudChip>
                                        break;

                                    case LetterState.Approved:
                                        <MudChip Color="@Color.Success" Icon="@Icons.Material.Filled.Check" Size="@Size.Small" OnClick="pelUrl">PEL Approved</MudChip>
                                        break;
                                }
                            </Header>
                        </EventCard>
                    }
                </MudStack>
            }
        </MudStack>

        <MudText Typo="Typo.body2" Align="Align.Center" Style="color: #ccc;">Revision <Revision/></MudText>
        <MudStack Row Spacing="4" Justify="Justify.SpaceBetween">
            <MudTooltip Text="@($"{LandingService.ServiceName} is open source and developed by Josh Brown. Please feel free to participate in its development.")">
                <MudButton Style="white-space: nowrap" Color="Color.Primary" StartIcon="@Icons.Custom.Brands.GitHub" Variant="Variant.Filled" Href="https://github.com/maragnus/LarpDev" Target="_blank">@LandingService.ServiceName</MudButton>
            </MudTooltip>
            <MudButton Style="white-space: nowrap" Color="Color.Secondary" StartIcon="@Icons.Custom.Brands.GitHub" Variant="Variant.Filled" Href="https://github.com/maragnus/LarpDev/issues/new" Target="_blank">Report issue</MudButton>
        </MudStack>
        <MudStack Row Spacing="4" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudButton Style="white-space: nowrap" Color="Color.Warning" StartIcon="@Icons.Material.Filled.PhotoCamera" Variant="Variant.Filled" Href="https://www.facebook.com/bryce.clark.14268" Target="_blank">Photo by Bryce Clark</MudButton>
            <MudButton Style="white-space: nowrap" Color="Color.Tertiary" StartIcon="@Icons.Custom.Brands.MicrosoftVisualStudio" Variant="Variant.Filled" Href="https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor" Target="_blank">Made w/ Blazor</MudButton>
        </MudStack>
    </MudStack>
</MudContainer>

@code
{
    private AccountDashboard _dashboard = new();
    private EventAttendanceItem[] _upcomingEvents = Array.Empty<EventAttendanceItem>();
    private EventAttendanceItem[] _pelEvents = Array.Empty<EventAttendanceItem>();

    private string When(DateOnly date)
    {
        var now = DateOnly.FromDateTime(DateTime.Today);
        var diff = date.DayNumber - now.DayNumber;
        return diff switch {
            0 => "today",
            < 0 => $"{-diff} days ago",
            > 0 =>  $"in {diff} days"
            };
    }

    protected override async Task OnSafeInitializedAsync()
    {
        try
        {
            _dashboard = await LandingService.GetAccountDashboard();

    // Next two events with Prereg open
            _upcomingEvents = _dashboard.Events.Events
                .OrderBy(e => e.Event.Date)
                .Where(e => e.Event.IsPreEventOpen())
                .Take(2)
                .ToArray();

    // All events with Prereg submitted but no PEL approved
            _pelEvents = _dashboard.Events.Events
                .Where(e => e.Event.IsPostEventOpen()) // PEL is open
                .Where(e => e.PreEvent != null) // Prereg created
                .Where(e => e.PostEvent?.State != LetterState.Approved) // PEL not approved
                .ToArray();

            Console.WriteLine(JsonSerializer.Serialize(_upcomingEvents, new JsonSerializerOptions { WriteIndented = true }));
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to load summary");
        }
    }

    private void GoTo(string pelUrl) => NavigationManager.NavigateTo(pelUrl);
}