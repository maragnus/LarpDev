@inject LandingService LandingService
@using Larp.Landing.Shared.MwFifth
@inherits LarpPage

@code {

    [Parameter]
    public string? CharacterId { get; set; }

    [Parameter]
    public bool Print { get; set; }

    [Parameter]
    public bool Clarify { get; set; }

    [Parameter]
    public bool FullLayout { get; set; }

    private Game _game = new();
    private GameState _gameState = default!;
    private CharacterBuilder _character = default!;
    private string? _chapterEmail;
    private ClarifyTerm[] _terms = Array.Empty<ClarifyTerm>();

    protected override async Task OnSafeParametersSetAsync()
    {
        var character = await LandingService.MwFifth.GetCharacter(CharacterId!);

        _character = new CharacterBuilder(character, _gameState, Logger);
        _chapterEmail = _character.GetHomeChapter()?.Email ?? _game.Email;
    }

    protected override async Task OnSafeInitializedAsync()
    {
        _terms = await LandingService.MwFifth.GetTerms();
    }

    protected override void OnInitialized()
    {
        _game = LandingService.MwFifthGame;
        _gameState = LandingService.MwFifthGameState;
    }

    private async Task DeleteDraft()
    {
        var result = await DialogService.ShowMessageBox("Delete Character Draft", "Are you sure you want to delete this draft? It cannot be recovered.", "Yes, Delete It", "No, Keep It");
        if (result != true) return;

        await SafeActionAsync(async () =>
        {
            await LandingService.MwFifth.DeleteCharacter(_character.Revision.RevisionId);
            NavigationManager.NavigateTo("/characters");
        });
    }

    private async Task CreateDraft()
    {
        await SafeActionAsync(async () =>
        {
            var newCharacter = await LandingService.MwFifth.ReviseCharacter(CharacterId!);
            NavigationManager.NavigateTo($"/characters/mw5e/{newCharacter.Revision.RevisionId}/edit");
        });
    }

    private void PrintSheet()
    {
        NavigationManager.NavigateTo($"/characters/mw5e/{CharacterId}/print?clarify={Clarify}");
    }

}

@if (IsLoading)
{
    <MudProgressLinear Indeterminate/>
    return;
}
@if (!IsInitialized)
{
    <MudAlert Severity="Severity.Error">Character could not be loaded</MudAlert>
    return;
}

<div class="no-print">
    @if (!Print)
    {
        <MudStack Row Spacing="4" Class="my-4">
            @switch (_character.Revision.State)
            {
                case CharacterState.Draft:
                    <MudButton Color="@Color.Error" OnClick="@DeleteDraft" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.DeleteForever">Delete Draft</MudButton>
                    break;

                case CharacterState.Live:
                    <MudButton Color="@Color.Secondary" OnClick="@PrintSheet" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Print">Print</MudButton>
                    <MudButton Color="@Color.Primary" OnClick="@CreateDraft" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Edit">Draft Changes</MudButton>
                    break;

                case CharacterState.Review:
                    <MudAlert Severity="Severity.Info">
                        <MudStack Spacing="4">
                            <div>
                                This draft is currently <strong>waiting for the Game Masters to review</strong>.
                            </div>
                            <div>
                                Once your draft is approved, it will be Live and can be printed. If the Game Master has any questions, they'll reach out to you.
                            </div>
                            <div>
                                If you have questions, please contact the chapter via email at <a href="mailto:@_chapterEmail?subject=Question+about+@_character.CharacterName">@_chapterEmail</a>.
                            </div>
                        </MudStack>
                    </MudAlert>
                    break;
            }
            <MudSwitch T="bool" @bind-Checked="Clarify" Color="Color.Tertiary" UnCheckedColor="Color.Secondary" ThumbIconColor="Color.Info" ThumbIcon="@Icons.Material.Filled.Info">Clarify</MudSwitch>
        </MudStack>
    }
</div>
<CharacterSheet Character="_character" Terms="_terms" FullLayout="FullLayout" Print="Print" Clarify="Clarify"/>