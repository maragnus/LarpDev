@using Larp.Landing.Shared.MwFifth
@inject LandingService LandingService
@inject ILogger<MwFifthCharacterEditor> Logger;
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@code {

    [Parameter]
    public string? CharacterId { get; set; }

    [Parameter]
    public bool Print { get; set; }
    
    [Parameter]
    public bool FullLayout { get; set; }

    private LoadingState _loadingState = LoadingState.Loading;
    private Game _game = new();
    private GameState _gameState = null!;
    private CharacterBuilder _character = null!;
    private string? _chapterEmail;

    protected override async Task OnInitializedAsync()
    {
        _game = LandingService.MwFifth.Game;
        _gameState = LandingService.MwFifth.GameState;

        var character = await LandingService.MwFifth.GetCharacter(CharacterId!);

        _character = new CharacterBuilder(character, _gameState, Logger);
        _chapterEmail = _character.GetHomeChapter()?.Email ?? _game.Email;
        _loadingState = LoadingState.Loaded;
    }

    private async Task DeleteDraft()
    {
        var result = await DialogService.ShowMessageBox("Delete Character Draft", "Are you sure you want to delete this draft? It cannot be recovered.", "Yes, Delete It", "No, Keep It");
        if (result == true)
        {
            await LandingService.MwFifth.DeleteCharacter(_character.Revision.Id);
            NavigationManager.NavigateTo("/characters");
        }
    }

    private async Task CreateDraft()
    {
        var newCharacter = await LandingService.MwFifth.StartDraft(CharacterId!);
        NavigationManager.NavigateTo($"/characters/mw5e/{newCharacter.Revision.Id}/edit");
    }

    private void PrintSheet()
    {
        NavigationManager.NavigateTo($"/characters/mw5e/{CharacterId}/print");
    }

}

<StepDivider/>

@if (_loadingState == LoadingState.Loading)
{
    <MudProgressLinear Indeterminate/>
    return;
}
else if (_loadingState != LoadingState.Loaded)
{
    <MudAlert Severity="Severity.Error">Character could not be loaded</MudAlert>
    return;
}

@if (!Print)
{
    switch (_character.Revision.State)
    {
        case CharacterState.Draft:
            <MudButton Color="@Color.Error" OnClick="@DeleteDraft" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.DeleteForever">Delete Draft</MudButton>
            <StepDivider/>
            break;

        case CharacterState.Live:
            <MudButton Color="@Color.Secondary" OnClick="@PrintSheet" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Print">Print</MudButton>
            <MudButton Color="@Color.Primary" OnClick="@CreateDraft" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Edit">Draft Changes</MudButton>
            <StepDivider/>
            break;

        case CharacterState.Review:
            <MudAlert Severity="Severity.Info">
                <MudStack Spacing="4">
                    <div>
                        This draft is currently <strong>waiting for the Game Masters to review</strong>.
                    </div>
                    <div>
                        Once your draft is approved, it will be Live and can be printed. If the Game Master has any questions, they'll reach out to you.
                    </div>
                    <div>
                        If you have questions, please contact the chapter via email at <a href="mailto:@_chapterEmail?subject=Question+about+@_character.CharacterName">@_chapterEmail</a>.
                    </div>
                </MudStack>
            </MudAlert>
            <StepDivider/>
            break;
    }
}
<CharacterSheet Character="_character" FullLayout="FullLayout"/>