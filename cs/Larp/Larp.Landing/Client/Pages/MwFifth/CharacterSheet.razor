@using Larp.Common
@using Larp.Landing.Shared
@using Larp.Landing.Shared.MwFifth
@using System.Text.RegularExpressions
@code {

    [Parameter]
    public CharacterBuilder Character { get; set; } = default!;

    [Parameter]
    public ClarifyTerm[]? Terms { get; set; }

    [Parameter]
    public bool FullLayout { get; set; }

    [Parameter]
    public bool Print { get; set; }

    [Parameter]
    public bool Admin { get; set; }

    [Parameter]
    public bool Clarify { get; set; }

    private (string Name, int Value)[] _gifts = Array.Empty<(string, int)>();
    private string? _homeChapter;
    private string? _specialty;
    private string? _religion;
    private string? _qrCode;
    private Spell[] _spells = Array.Empty<Spell>();
    private string[] _aggregateSkills = Array.Empty<string>();
    private CharacterSkill[] _skills = Array.Empty<CharacterSkill>();
    private Dictionary<string, string> _properties = new();
    private Dictionary<string, int> _skillRanks = new();
    private string[] _attributes = Array.Empty<string>();
    private Dictionary<string, string> _terms = new();

    protected override void OnParametersSet()
    {
        _terms = Terms?
            .Where(term => !string.IsNullOrEmpty(term.Summary))
            .ToDictionary(term => term.Name, term => term.Summary!)
                 ?? new Dictionary<string, string>();

        _qrCode = $"https://larp.maragnus.com/cs/{Character.Revision.RevisionId}";

        _gifts = new[]
        {
            ("Courage", Character.Courage),
            ("Dexterity", Character.Dexterity),
            ("Empathy", Character.Empathy),
            ("Passion", Character.Passion),
            ("Prowess", Character.Prowess),
            ("Wisdom", Character.Wisdom),
        };

        _homeChapter = Character.GetHomeChapter()?.Title ?? "Invalid Home Chapter";
        _specialty = Character.Specialty ?? Character.GetOccupation()?.Name ?? "No Occupation";
        _religion = Character.GetReligion()?.Title ?? "No Religion";
        _properties = Character.Properties.ToDictionary(property => property.Name, property => property.Value);

        string SkillAggregate(IGrouping<string, CharacterSkill> item)
        {
            var rank = item.Sum(x => x.Rank);
            return rank == 0 ? item.Key : $"{item.Key} {rank}";
        }

        _skills =
            Character.OccupationalChosenSkills.Select(x => CharacterSkill.FromTitle(x, SkillPurchase.Occupation))
                .Concat(Character.OccupationalSkills)
                .Concat(Character.PurchasedSkills)
                .Concat(Character.FreeSkills)
                .ToArray();

        _aggregateSkills =
            _skills
                .GroupBy(x => x.Name)
                .Select(SkillAggregate)
                .ToArray();

        _spells = Character.AllSpells.TryFromKeys(Character.Revision.Spells).ToArray();

        _skillRanks = _skills
            .GroupBy(skill => skill.Name)
            .ToDictionary(
                group => group.Key,
                group => Math.Max(1, group.Sum(skill => skill.Rank)));

        var attributes = Character.Abilities.ToList();
        if (!string.IsNullOrEmpty(Character.ChosenElement))
        {
            attributes.Add($"Passion Element: {Character.ChosenElement.ToTitleCase()}");
        }
        _attributes = attributes.Order().ToArray();

        CalculateHitPointBonus();

        AdjustProperty("Mana", "Increased Mana", false, (value, rank) => value + rank);
        AdjustProperty("Battle Endurance per Renew", "Improved Battle Endurance", false, (value, _) => value + 1);
        AdjustProperty("Elemental Bursts per Renew", "Improved Burst Casting", false, (value, _) => value + 1);
        AdjustProperty("Elemental Storms per Renew", "Improved Storm Casting", false, (value, _) => value + 1);
        AdjustProperty("Leadership", "Leadership", true, (value, _) => value + 2);
        AdjustProperty("Leadership", "Improved Leadership", false, (value, _) => value + 2);
        AdjustProperty("Butcher Tags", "Butcher", true, (value, _) => value + 6);
        AdjustProperty("Butcher Tags", "Improved Butcher", false, (value, _) => value + 3);
        AdjustProperty("Scavenging Tags", "Scavenging", true, (value, _) => value + 3);
        AdjustProperty("Scavenging Tags", "Improved Scavenging", false, (value, _) => value + 3);
    }

    private void CalculateHitPointBonus()
    {
        var courageHp = _properties.TryGetValue("Hit Point Bonus", out var hpBonus)
            ? (int.TryParse(hpBonus.TrimStart('+'), out var hpBonusInt) ? hpBonusInt : 0)
            : 0;
        var prowessHp = Character.Abilities.Contains("Extra Hit Point") ? 1 : 0;
        var toughnessHp = _skillRanks.TryGetValue("Toughness", out var toughnessRank) ? toughnessRank : 0;
        var hp = Math.Max(courageHp, prowessHp) + toughnessHp;
        if (hp > 0)
            _properties["Hit Point Bonus"] = $"+{hp}";
    }

    void AdjustProperty(string propertyName, string skillName, bool add, Func<int, int, int> adjust)
    {
        if (!_skillRanks.TryGetValue(skillName, out var ranks))
            return;

        if (_properties.TryGetValue(propertyName, out var value))
        {
            if (int.TryParse(value, out var intValue))
                _properties[propertyName] = adjust(intValue, ranks).ToString();
        }
        else if (add)
        {
            _properties[propertyName] = adjust(0, ranks).ToString();
        }
    }

    RenderFragment? ClarifyTerm(string name)
    {
        if (!Clarify) return null;

        if (_terms.TryGetValue(name, out var summary))
            return @<div class="clarify">@summary</div>;

        name = Regex.Replace(name, @"\W([\dIVX]+)$", "", RegexOptions.Compiled);

        if (_terms.TryGetValue(name, out summary))
            return @<div class="clarify">@summary</div>;

        return null;
    }

}

@if (Print)
{
    <style>
        .print-sheet {
            font-size: 80%;
        }
    </style>
}

<MudGrid Class="print-sheet" Style="color: #000; background-color: #fff; font-family: 'Playpen Sans','Comic Sans','sans-serif'; font-weight: 400">
    <MudItem xs="12" Class="justify-center">
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
            <div>
                <img src="/tree.webp" alt="Mystwood Logo" class="game-logo"/>
            </div>
            <div>
                <div class="character-title">
                    @Character.CharacterName
                </div>
                <div class="character-subtitle">
                    @_homeChapter, @_specialty, @_religion
                </div>
            </div>
        </MudStack>
    </MudItem>
    <MudItem xs="12">
        <MudGrid>
            @foreach (var (name, rank) in _gifts)
            {
                <MudItem xs="@(Print ? 2 : FullLayout ? 4 : 6)" sm="@(Print ? 2 : FullLayout ? 2 : 3)" md="2">
                    <div class="gift-container mk-border-1-long">
                        <div class="gift-rank">
                            @rank
                        </div>
                        <div class="gift-name">
                            @name
                        </div>
                    </div>
                </MudItem>
            }
        </MudGrid>
    </MudItem>

    @foreach (var (name, value, index) in _properties.Select((item, index) => (item.Key, item.Value, index)))
    {
        var border = 1+ index % 4;
        var classes = $"property-container mk-border-{border}-long";
        if (value == "-") continue;
        <MudItem xs="Print ? 4 : 6" sm="4" Style="page-break-inside: avoid">
            <div class="@classes">
                <div class="property-value">@value</div>
                <div class="property-name">@name</div>
            </div>
        </MudItem>
    }
    <MudItem xs="12" Style="height: 0"></MudItem>
    <MudItem xs="@(Print ? 4 : FullLayout ? 6 : 12)" sm="@(Print ? 4 : FullLayout ? 4 : 6)" Style="page-break-inside: avoid">
        <div class="list-container mk-border-1">
            <div class="list-header">Abilities</div>
            <div class="list-body">
                @foreach (var name in _attributes)
                {
                    <div class="list-item">
                        @name
                        @ClarifyTerm(name)
                    </div>
                }
            </div>
        </div>
    </MudItem>
    <MudItem xs="@(Print ? 4 : FullLayout ? 6 : 12)" sm="@(Print ? 4 : FullLayout ? 4 : 6)" Style="page-break-inside: avoid">
        <div class="list-container mk-border-3">
            <div class="list-header">Skills</div>
            <div class="list-body">
            @if (Admin)
            {
                @foreach (var category in _skills.GroupBy(x => x.Type.ToString()))
                {
                    <div class="list-item">
                        <u>@category.Key</u>
                    </div>
                    foreach (var name in category)
                    {
                        <div class="list-item">@name.Title</div>
                    }
                }
            }
            else
            {
                @foreach (var name in _aggregateSkills)
                {
                    <div class="list-item">
                        @name
                        @ClarifyTerm(name)
                    </div>
                }
            }
            </div>
        </div>
    </MudItem>
    @if (Character.Advantages.Length > 0 || Character.Disadvantages.Length > 0)
    {
        <MudItem xs="@(Print ? 4 : FullLayout ? 6 : 12)" sm="@(Print ? 4 : FullLayout ? 4 : 6)" Style="page-break-inside: avoid">
            <div style="display: flex; flex-direction: column; gap: 2em; height: 100%">
                <div class="list-container mk-border-1" style="height: auto; flex-grow: 1">
                    <div class="list-header">Advantages</div>
                    <div class="list-body">
                        @foreach (var (name, rank) in Character.Advantages)
                        {
                            <div class="list-item">
                                @rank @name
                                @ClarifyTerm(name)
                            </div>
                    }
                    </div>
                </div>
                <div class="list-container mk-border-2" style="height: auto; flex-grow: 1">
                    <div class="list-header">Disadvantages</div>
                    <div class="list-body">
                        @foreach (var (name, rank) in Character.Disadvantages)
                        {
                            <div class="list-item">
                                @rank @name
                                @ClarifyTerm(name)
                            </div>
                        }
                    </div>
                </div>
            </div>
        </MudItem>
    }
    @if (!string.IsNullOrWhiteSpace(Character.Revision.UnusualFeatures))
    {
        <MudItem xs="@(Print ? 4 : 12)" sm="@(Print ? 4 : FullLayout ? 6 : 12)" Style="page-break-inside: avoid">
            <div class="list-container mk-border-3-long">
                <div class="list-header">Unusual Features</div>
                <div class="list-body list-text">
                    @(Character.Revision.UnusualFeatures ?? "No Unusual Features")
                </div>
            </div>
        </MudItem>
    }
    @if (!string.IsNullOrWhiteSpace(Character.Revision.Cures))
    {
    <MudItem xs="@(Print ? 4 : 12)" sm="@(Print ? 4 : FullLayout ? 6 : 12)" Style="page-break-inside: avoid">
        <div class="list-container mk-border-2-long">
            <div class="list-header">Cures</div>
            <div class="list-body list-text">
                @(Character.Revision.Cures ?? "No Cures")
            </div>
        </div>
    </MudItem>
    }
    @if (!string.IsNullOrWhiteSpace(Character.Revision.Documents))
    {
        <MudItem xs="@(Print ? 4 : 12)" sm="@(Print ? 4 : 12)" Style="page-break-inside: avoid">
            <div class="list-container mk-border-3-long">
                <div class="list-header">Documents</div>
                <div class="list-body list-text">
                    @(Character.Revision.Documents ?? "No Documents")
                </div>
            </div>
        </MudItem>
    }
    <MudItem xs="12" Style="page-break-inside: avoid">
        <div></div>
    </MudItem>
    @if (!Print)
    {
        <MudItem xs="12" sm="@(FullLayout ? 6 : 12)" Style="page-break-inside: avoid">
            <div class="list-container mk-border-2">
                <div class="list-header">Public History</div>
                <div class="list-body list-text">
                    @(Character.Revision.PublicHistory ?? "No Public History")
                </div>
            </div>
        </MudItem>
        <MudItem xs="12" sm="@(FullLayout ? 6 : 12)" Style="page-break-inside: avoid">
            <div class="list-container mk-border-3">
                <div class="list-header">Private History</div>
                <div class="list-body list-text">
                    @(Character.Revision.PrivateHistory ?? "No Private History")
                </div>
            </div>
        </MudItem>
    }
    @foreach (var (spell, index) in _spells.Select((item, index) => (item, index)))
    {
        var border = 1 + index % 4;
        var classes = $"spell-container mk-border-{border}";

        var type = spell.Type == SpellType.GestureOrVoice
            ? "Gesture/Voice"
            : spell.Type.ToString();

        <MudItem xs="@(Print ? 4 : 12)" sm="@(Print ? 4 : FullLayout ? 3 : 4)">
            <div class="@classes">
                <div class="spell-name">@spell.Name</div>
                <div class="spell-info">
                    <div class="spell-type">@type</div>
                    <div class="spell-mana">@spell.Mana Mana</div>
                </div>
                <div>@spell.Effect</div>
            </div>
        </MudItem>
    }
</MudGrid>