@using Larp.Landing.Shared.MwFifth
@using Larp.Landing.Client.Pages.MwFifth.Components
@using Larp.Common
@using MudBlazor.Services

@code {

    [Parameter]
    public CharacterBuilder Character { get; set; } = default!;

    [Parameter]
    public bool FullLayout { get; set; }

    [Parameter]
    public bool Print { get; set; }

    [Parameter]
    public bool Admin { get; set; }

    private (string Name, int Value)[] _gifts = Array.Empty<(string, int)>();
    private string? _homeChapter;
    private string? _specialty;
    private string? _religion;
    private string? _qrCode;
    private Spell[] _spells = Array.Empty<Spell>();
    private string[] _aggregateSkills = Array.Empty<string>();
    private CharacterSkill[] _skills = Array.Empty<CharacterSkill>();

    protected override void OnParametersSet()
    {
        OnInitialized();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _qrCode = $"https://larp.maragnus.com/cs/{Character.Revision.RevisionId}";

        _gifts = new[]
        {
            ("Courage", Character.Courage),
            ("Dexterity", Character.Dexterity),
            ("Empathy", Character.Empathy),
            ("Passion", Character.Passion),
            ("Prowess", Character.Prowess),
            ("Wisdom", Character.Wisdom),
        };

        _homeChapter = Character.GetHomeChapter()?.Title ?? "Invalid Home Chapter";
        _specialty = Character.Specialty ?? Character.GetOccupation()?.Name ?? "No Occupation";
        _religion = Character.GetReligion()?.Title ?? "No Religion";

        string SkillAggregate(IGrouping<string, CharacterSkill> item)
        {
            var rank = item.Sum(x => x.Rank);
            return rank == 0 ? item.Key : $"{item.Key} {rank}";
        }

        _skills =
            Character.OccupationalChosenSkills.Select(x => CharacterSkill.FromTitle(x, SkillPurchase.Occupation))
                .Concat(Character.OccupationalSkills)
                .Concat(Character.PurchasedSkills)
                .Concat(Character.FreeSkills)
                .ToArray();

        _aggregateSkills =
            _skills
                .GroupBy(x => x.Name)
                .Select(SkillAggregate)
                .ToArray();

        _spells = Character.AllSpells.TryFromKeys(Character.Revision.Spells).ToArray();
    }

}

@if (Print)
{
    <style>
        .print-sheet {
            font-size: 80%;
        }
    </style>
}

<MudGrid Class="print-sheet">
    <MudItem xs="12" Class="justify-center">
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
            <div>
                <img src="/tree.webp" alt="Mystwood Logo" class="game-logo"/>
            </div>
            <div>
                <div class="character-title">
                    @Character.CharacterName
                </div>
                <div class="character-subtitle">
                    @_homeChapter, @_specialty, @_religion
                </div>
            </div>
        </MudStack>
    </MudItem>
    <MudItem xs="12">
        <MudGrid>
            @foreach (var (name, rank) in _gifts)
            {
                <MudItem xs="@(Print ? 2 : FullLayout ? 4 : 6)" sm="@(Print ? 2 : FullLayout ? 2 : 3)" md="2">
                    <div class="gift-container">
                        <div class="gift-rank">
                            @rank
                        </div>
                        <div class="gift-name">
                            @name
                        </div>
                        @if (FullLayout)
                        {
/*
                            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <div class="gift-stars">
                                    <div>
                                        @for (var i = 0; i < Math.Min(5, rank); i++)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small"/>
                                        }
                                    </div>
                                    <div>
                                        @for (var i = 5; i < Math.Min(10, rank); i++)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small"/>
                                        }
                                    </div>
                                </div>
                            </MudHidden>
                        */
                        }
                    </div>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
    @foreach (var (name, value) in Character.Properties)
    {
        if (value == "-") continue;
        <MudItem xs="Print ? 4 : 6" sm="4" Style="page-break-inside: avoid">
            <div class="property-container">
                <div class="property-value">@value</div>
                <div class="property-name">@name</div>
            </div>
        </MudItem>
    }
    <MudItem xs="12" Style="height: 0"></MudItem>
    <MudItem xs="@(Print ? 4 : FullLayout ? 6 : 12)" sm="@(Print ? 4 : FullLayout ? 4 : 6)" Style="page-break-inside: avoid">
        <div class="list-container">
            <div class="list-header">Attributes</div>
            @foreach (var name in Character.Abilities)
            {
                <div class="list-item">@name</div>
            }
        </div>
    </MudItem>
    <MudItem xs="@(Print ? 4 : FullLayout ? 6 : 12)" sm="@(Print ? 4 : FullLayout ? 4 : 6)" Style="page-break-inside: avoid">
        <div class="list-container">
            <div class="list-header">Skills</div>
            @if (Admin)
            {
                @foreach (var category in _skills.GroupBy(x => x.Type.ToString()))
                {
                    <div class="list-item">
                        <u>@category.Key</u>
                    </div>
                    foreach (var name in category)
                    {
                        <div class="list-item">@name.Title</div>
                    }
                }
            }
            else
            {
                @foreach (var name in _aggregateSkills)
                {
                    <div class="list-item">@name</div>
                }
            }
        </div>
    </MudItem>
    @if (Character.Advantages.Length > 0 || Character.Disadvantages.Length > 0)
    {
        <MudItem xs="@(Print ? 4 : FullLayout ? 6 : 12)" sm="@(Print ? 4 : FullLayout ? 4 : 6)" Style="page-break-inside: avoid">
            <div style="display: flex; flex-direction: column; gap: 2em; height: 100%">
                <div class="list-container" style="height: auto; flex-grow: 1">
                    <div class="list-header">Advantages</div>
                    @foreach (var (name, rank) in Character.Advantages)
                    {
                        <div class="list-item">@rank @name</div>
                    }
                </div>
                <div class="list-container" style="height: auto; flex-grow: 1">
                    <div class="list-header">Disadvantages</div>

                    @foreach (var (name, rank) in Character.Disadvantages)
                    {
                        <div class="list-item">@rank @name</div>
                    }
                </div>
            </div>
        </MudItem>
    }
    <MudItem xs="@(Print ? 4 : FullLayout ? 6 : 12)" sm="6" Style="page-break-inside: avoid">
        <div class="list-container">
            <div class="list-header">Unusual Features</div>
            <div class="list-text">
                @(Character.Revision.UnusualFeatures ?? "No Unusual Features")
            </div>
        </div>
    </MudItem>
    <MudItem xs="@(Print ? 4 : FullLayout ? 6 : 12)" sm="6" Style="page-break-inside: avoid">
        <div class="list-container">
            <div class="list-header">Cures</div>
            <div class="list-text">
                @(Character.Revision.Cures ?? "No Cures")
            </div>
        </div>
    </MudItem>
    <MudItem xs="12" sm="@(Print ? 4 : FullLayout ? 6 : 12)" Style="page-break-inside: avoid">
        <div class="list-container">
            <div class="list-header">Documents</div>
            <div class="list-text">
                @(Character.Revision.Documents ?? "No Documents")
            </div>
        </div>
    </MudItem>
    @foreach (var spell in _spells)
    {
        <MudItem xs="@(Print ? 4 : 12)" sm="@(Print ? 4 : FullLayout ? 3 : 4)">
            <div class="spell-container">
                <div class="spell-name">@spell.Name</div>
                <div>@spell.Effect</div>
                <div>@spell.Type</div>
                <div>@spell.Mana Mana</div>
            </div>
        </MudItem>
    }
</MudGrid>