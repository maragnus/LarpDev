@using Larp.Landing.Shared.MwFifth
@using Larp.Common
<MudText Typo="Typo.h6">Select your advantages and disadvantages</MudText>
<MudText Typo="Typo.body2">You may optionally choose to take disadvantages and advantages. You must select an equal or greater disadvantage score to your advantage score.</MudText>

<StepDivider/>

<MudSwitch T="bool" Checked="Character.NoAdvantages" CheckedChanged="CheckChanged">No Advantages or Disadvantages</MudSwitch>

@if (!Character.NoAdvantages)
{
    <MudSwitch @bind-Checked="@ShowDescriptions" Label="Show Descriptions" Color="Color.Info"/>
    <StepDivider/>

    <MudGrid>
        <MudItem xs="6">
            <MudStack AlignItems="AlignItems.Center">
                <MudAvatar Size="Size.Large">@_advantageScore</MudAvatar>
                <MudText Typo="Typo.caption" Align="Align.Center">Advantage<br/>Score</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="6">
            <MudStack AlignItems="AlignItems.Center">
                <MudAvatar Size="Size.Large">@_disadvantageScore</MudAvatar>
                <MudText Typo="Typo.caption" Align="Align.Center">Disadvantage<br/>Score</MudText>
            </MudStack>
        </MudItem>
        @if (_advantageScore != _disadvantageScore)
        {
            <MudItem xs="12">
                @if (_advantageScore > _disadvantageScore)
                {
                    <MudAlert Severity="Severity.Warning">Your Disadvantage Score must be equal or greater than your Advantage Score</MudAlert>
                }
                else if (_advantageScore < _disadvantageScore)
                {
                    <MudAlert Severity="Severity.Info">You have @(_disadvantageScore - _advantageScore) Advantage Points remaining</MudAlert>
                }
            </MudItem>
        }
        <MudItem xs="6">
            <MudText Typo="Typo.body2">Advantages</MudText>
            <MudListExtended T="Vantage" ItemCollection="Character.GameState.Advantages" Clickable MultiSelection Dense SearchBox="true" SearchBoxClearable SearchFunc="SearchFunc" SelectedValues="_advantages" SelectedValuesChanged="OnAdvantagesChange">
                <ItemTemplate>
                    @{
                        context.Disabled = _selectedNames.Contains(context.Value.Name) && !_selectedTitles.Contains(context.Value.Title);
                    }
                    <MudStack>
                        <MudStack Row>
                            <MudIcon Color="Color.Primary" Icon="@(context.IsSelected ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)"/>
                            <MudText Typo="Typo.body1">@context.Value.Title</MudText>
                        </MudStack>
                        @if (ShowDescriptions)
                        {
                            <MudText Typo="Typo.body2" Class="my-1">@context.Value.Description</MudText>
                        }
                    </MudStack>
                </ItemTemplate>
            </MudListExtended>
        </MudItem>
        <MudItem xs="6">
            <MudText Typo="Typo.body2">Disadvantages</MudText>
            <MudListExtended T="Vantage" ItemCollection="Character.GameState.Disadvantages" Clickable MultiSelection Dense SearchBox="true" SearchBoxClearable SearchFunc="SearchFunc" SelectedValues="_disadvantages" SelectedValuesChanged="OnDisadvantagesChange">
                <ItemTemplate>
                    @{
                        context.Disabled = _selectedNames.Contains(context.Value.Name) && !_selectedTitles.Contains(context.Value.Title);
                    }
                    <MudStack>
                        <MudStack Row>
                            <MudIcon Color="Color.Primary" Icon="@(context.IsSelected ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)"/>
                            <MudText Typo="Typo.body1">@context.Value.Title</MudText>
                        </MudStack>
                        @if (ShowDescriptions)
                        {
                            <MudText Typo="Typo.body2" Class="my-1">@context.Value.Description</MudText>
                        }
                    </MudStack>
                </ItemTemplate>
            </MudListExtended>
        </MudItem>
    </MudGrid>
}

@code {

    [Parameter]
    public CharacterBuilder Character { get; set; } = default!;

    private HashSet<string> _selectedTitles = new();
    private HashSet<string> _selectedNames = new();
    private int _advantageScore = 0;
    private int _disadvantageScore = 0;
    private Vantage[] _advantages = Array.Empty<Vantage>();
    private Vantage[] _disadvantages = Array.Empty<Vantage>();
    private Dictionary<string, Vantage> _advantageDict = default!;
    private Dictionary<string, Vantage> _disadvantageDict = default!;
    private bool ShowDescriptions { get; set; }

    protected override void OnInitialized()
    {
        _advantageDict = Character.GameState.Advantages.ToDictionary(x => x.Title);
        _disadvantageDict = Character.GameState.Disadvantages.ToDictionary(x => x.Title);

        _advantages = _advantageDict.TryFromKeys(Character.Advantages.Select(x => x.Title)).ToArray();
        _disadvantages = _disadvantageDict.TryFromKeys(Character.Disadvantages.Select(x => x.Title)).ToArray();
        Update();
    }

    private void Update()
    {
        if (Character.NoAdvantages)
        {
            Character.Advantages = Array.Empty<CharacterVantage>();
            Character.Disadvantages = Array.Empty<CharacterVantage>();
        }

        _advantageScore = Character.Advantages.Sum(x => x.Rank);
        _disadvantageScore = Character.Disadvantages.Sum(x => x.Rank);
        _selectedNames =
            Character.Advantages.Select(x => x.Name)
                .Concat(Character.Disadvantages.Select(x => x.Name))
                .ToHashSet();
        _selectedTitles =
            Character.Advantages.Select(x => x.Title)
                .Concat(Character.Disadvantages.Select(x => x.Title))
                .ToHashSet();
    }

    private void OnAdvantagesChange(IEnumerable<Vantage> selectedItems)
    {
        Character.Advantages = selectedItems
            .Select(v => CharacterVantage.FromTitle(v.Title))
            .OrderByDescending(x => x.Rank)
            .DistinctBy(x => x.Name)
            .OrderBy(x => x.Name)
            .ToArray();

        _advantages = _advantageDict.TryFromKeys(Character.Advantages.Select(x => x.Title)).ToArray();
        Update();
    }

    private void OnDisadvantagesChange(IEnumerable<Vantage> selectedItems)
    {
        Character.Disadvantages = selectedItems
            .Select(v => CharacterVantage.FromTitle(v.Title))
            .OrderByDescending(x => x.Rank)
            .DistinctBy(x => x.Name)
            .OrderBy(x => x.Name)
            .ToArray();

        _disadvantages = _disadvantageDict.TryFromKeys(Character.Disadvantages.Select(x => x.Title)).ToArray();
        Update();
    }

    private void CheckChanged(bool value)
    {
        Character.NoAdvantages = value;
        Update();
        StateHasChanged();
    }

    private bool SearchFunc(Vantage vantage, string query) =>
        vantage.Name.Contains(query, StringComparison.InvariantCultureIgnoreCase);

}