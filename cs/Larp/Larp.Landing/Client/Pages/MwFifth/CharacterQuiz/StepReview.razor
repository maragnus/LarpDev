@inject LandingService LandingService

<MudStack Spacing="4">
    <MudText Typo="Typo.body1">Here are some suggested Gifts, Occupations, Skills, and Advantages to create a character that matches your play style.</MudText>
    <MudText Typo="Typo.body1">Playing at @HomeChapter</MudText>
    <div>Activities: @string.Join(", ", Activities)</div>
    <MudDivider/>
    <div style="display: grid; gap: 1em; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h6" Class="pb-4">Legend</MudText>
            <div>
                <MudIcon Icon="@Icons.Material.TwoTone.FilterVintage" Size="Size.Small"/> Activities<br/>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.FitnessCenter"/> Gift Ability<br/>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Blind"/> Advantage<br/>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Handyman"/> Skill<br/>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Work"/> Occupation <br/>
            </div>
        </MudPaper>

        @foreach (var suggestion in _suggestions)
        {
            @suggestion.Render()
        }
    </div>
</MudStack>

@code {
    private List<Suggestion> _suggestions = new();
    private List<AbilityItem> _abilities = default!;
    private List<SkillItem> _skills = default!;
    private List<SkillDefinition> _skillDefinitions = default!;

    [Parameter]
    public string? HomeChapter { get; set; }

    [Parameter]
    public string[] Activities { get; set; } = Array.Empty<string>();

    record AbilityItem(string Gift, int Rank, string Ability);

    record SkillItem(string Occupation, string Skill);

    class SuggestionGroup : Suggestion
    {
        private readonly Suggestion[] _suggestions;

        public SuggestionGroup(string reason, params Suggestion[] suggestions) : base(reason)
        {
            _suggestions = suggestions;
        }

        public override RenderFragment? Render()
        {
            return
                @<MudPaper Elevation="1" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="pb-4">@Reason</MudText>
                    @foreach (var suggestion in _suggestions)
                    {
                        @suggestion.Render()
                        ;
                    }
                </MudPaper>;
        }
    }

    class SuggestAbility : Suggestion
    {
        private readonly string _gift;
        private readonly AbilityItem[] _abilities;

        public SuggestAbility(string gift, AbilityItem[] abilities, string? reason)
            : base(reason)
        {
            _gift = gift;
            _abilities = abilities;
        }

        public override RenderFragment? Render()
        {
            return @<div style="text-indent: 1em hanging">
                       <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.FitnessCenter"/>
                       <strong>@_gift</strong>:
                       <span>
                           @for (var i = 0; i < _abilities.Length; i++)
                           {
                               if (i > 0)
                               {
                                   <span>, </span>
                               }
                               <span><strong>@_abilities[i].Ability</strong> (rank @_abilities[i].Rank)</span>
                           }
                       </span> @Reason
                   </div>;
        }
    }

    class SuggestSkill : Suggestion
    {
        private readonly string[] _occupations;
        private readonly string _skill;
        private readonly SkillDefinition _definition;

        public SuggestSkill(string[] occupations, string skill, SkillDefinition definition, string? reason) : base(reason)
        {
            _occupations = occupations;
            _skill = skill;
            _definition = definition;
        }

        public override RenderFragment? Render()
        {
            var advantage =
                _definition.Class switch 
                {
                    SkillClass.Minor => "Talent: Minor 1",
                    SkillClass.Standard => "Talent: Standard 1",
                    SkillClass.Major => "Talent: Major 1",
                    _ => null
                    };

            return
                @<div style="text-indent: 1em hanging">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Handyman"/>
                    <strong>@_skill</strong>: @Reason<br/>
                    @if (_definition.Purchasable is not SkillPurchasable.Unavailable)
                    {
                        <div class="pl-2" style="text-indent: 1em hanging">
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.AttachMoney"/>
                            <strong>@_definition.CostPerPurchase Moonstone</strong>
                        </div>
                    }
                    @if (advantage is not null)
                    {
                        <div class="pl-2" style="text-indent: 1em hanging">
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Blind"/>
                            <strong>@advantage</strong>
                        </div>
                    }
                    @foreach (var occupation in _occupations)
                    {
                        <div class="pl-2" style="text-indent: 1em hanging">
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Work"/>
                            <strong>@occupation</strong>
                        </div>
                    }
                </div>;
        }
    }

    class SuggestText : Suggestion
    {
        private readonly RenderFragment _suggestion;

        public SuggestText(RenderFragment suggestion) : base(null)
        {
            _suggestion = suggestion;
        }

        public override RenderFragment? Render()
        {
            return _suggestion;
        }
    }

    abstract class Suggestion
    {
        protected string? Reason { get; }

        protected Suggestion(string? reason)
        {
            Reason = reason;
        }

        public abstract RenderFragment? Render();
    }

    protected override void OnInitialized()
    {
        var gameState = LandingService.MwFifthGameState;

        _skillDefinitions = gameState.Skills.ToList();

        _abilities =
            gameState.Gifts.SelectMany(gift =>
                gift.Ranks.SelectMany(rank =>
                    rank.Abilities.Select(ability =>
                        new AbilityItem(gift.Title, rank.Rank, ability.Name))))
                .ToList();

        _skills =
            gameState.Occupations
                .Where(occupation => occupation.IsChapter(HomeChapter) && occupation.Type == OccupationType.Basic)
                .SelectMany(occupation =>
                    occupation.Skills.Select(skill =>
                        new SkillItem(occupation.Name, skill)))
                .ToList();
    }

    protected override void OnParametersSet()
    {
        _suggestions.Clear();

        var activities = Activities.ToHashSet();

        GroupBuilder("melee", "Use melee weapons", suggestions =>
        {
            suggestions.AddRange(SuggestAbility("Use of Arms"));
            if (activities.Contains("dual-wield"))
            {
                suggestions.AddRange(SuggestAbility("Florentine", "allows the use of two weapons, one no longer than 24"));
                suggestions.AddRange(SuggestAbility("Two Weapons", "allows the use of two weapons, one no longer than 46"));
            }
        });

        GroupBuilder("tank", "Hit Points", suggestions =>
        {
            suggestions.AddRange(SuggestAbility("Toughness"));
            suggestions.AddRange(SuggestAbility("Extra Hit Point"));
            suggestions.AddRange(SuggestSkill("Toughness"));
            if (activities.Contains("livery"))
                suggestions.AddRange(SuggestSkill("Livery"));
            else
                suggestions.Add(new SuggestText(@<span><MudIcon Icon="@Icons.Material.TwoTone.FilterVintage" Size="Size.Small"/> Add <strong>Livery</strong> from Activity List</span>));
        });

        GroupBuilder("bow", "Use bows and crossbows", suggestions =>
        {
            suggestions.AddRange(SuggestAbility("Use Hand Crossbow", "to use hand crossbow"));
            suggestions.AddRange(SuggestAbility("Use Bows", "to use bows and crossbows"));
        });

        Group("thrown", "Use throwing weapons", SuggestAbility("Thrown Weapon"));
        Group("armored", "Wear armor", SuggestSkill("Wear Armor"));

        Group("heal-self", "Heal self", SuggestAbility("Battle Endurance (Heal 2)"));

        GroupBuilder("buffer", "Buff yourself and others", suggestions => { suggestions.AddRange(SuggestAbility("Hedge Magic")); });

        GroupBuilder("caster", "Magic user", suggestions =>
        {
            suggestions.AddRange(SuggestAbility("Sorcery"));
            if (activities.Contains("wizard"))
            {
                suggestions.AddRange(SuggestSkill("Increased Mana"));
                suggestions.AddRange(SuggestSkill("Serene Contemplation"));
                suggestions.AddRange(SuggestSkill("Warcaster"));
                suggestions.AddRange(SuggestSkill("Battle Mage"));
            }
            suggestions.AddRange(SuggestSkill("Occupational Spells"));
        });

        GroupBuilder("healer", "Heal others", suggestions =>
        {
            suggestions.AddRange(SuggestAbility("First Aid"));
            suggestions.AddRange(SuggestSkill("Armor Repair"));
            suggestions.AddRange(SuggestSkill("Cure Affliction"));
            suggestions.AddRange(SuggestSkill("Medicine"));
            if (activities.Contains("leadership"))
                suggestions.AddRange(SuggestSkill("Leadership"));
            else
                suggestions.Add(new SuggestText(@<span><MudIcon Icon="@Icons.Material.TwoTone.FilterVintage" Size="Size.Small"/> Add <strong>Leadership</strong> from Activity List</span>));
        });

        GroupBuilder("renew", "Renew others", suggestions =>
        {
            suggestions.AddRange(SuggestSkill("Fortune Telling"));
            suggestions.AddRange(SuggestSkill("Entertainer"));
            suggestions.AddRange(SuggestSkill("Religious Ceremony"));
            suggestions.AddRange(SuggestSkill("Bardic Voice"));
            if (activities.Contains("duty"))
                suggestions.AddRange(SuggestSkill("Duty"));
            else
                suggestions.Add(new SuggestText(@<span><MudIcon Icon="@Icons.Material.TwoTone.FilterVintage" Size="Size.Small"/> Add <strong>Duty</strong> from Activity List</span>));
        });

        GroupBuilder("assistant", "Assist with crafting", suggestions =>
        {
            suggestions.AddRange(SuggestSkill("Apprenticeship"));
            suggestions.AddRange(SuggestSkill("Production"));
        });

        GroupBuilder("teacher", "Teach others", suggestions =>
        {
            suggestions.AddRange(SuggestSkill("Instruction"));
            suggestions.AddRange(SuggestSkill("Improved Instruction"));
            suggestions.AddRange(SuggestSkill("Armstraining"));
        });

        Group("apothecary", "Access to Apothecary", SuggestSkill("Apothecary"));
        Group("armstraining", "Access to Armstraining", SuggestSkill("Armstraining"));
        Group("bardic-voice", "Access to Bardic Voice", SuggestSkill("Bardic Voice"));
        Group("cooking", "Access to Cooking", SuggestSkill("Cooking"));
        Group("poisoner", "Access to Poisoning", SuggestSkill("Poisoner"));
        Group("metalworking", "Access to Metalworking", SuggestSkill("Metalworking"));
        Group("poisoner", "Access to Poisoner", SuggestSkill("Poisoner"));
        Group("scribe", "Access to Scribing", SuggestSkill("Scribe"));
        Group("sewing", "Access to Sewing", SuggestSkill("Sewing"));
        Group("woodworking", "Access to Woodworking", SuggestSkill("Woodworking"));

        void GroupBuilder(string activity, string header, Action<List<Suggestion>> suggestions)
        {
            if (!activities.Contains(activity)) return;
            var items = new List<Suggestion>();
            suggestions(items);
            _suggestions.Add(new SuggestionGroup(header, items.ToArray()));
        }

        void Group(string activity, string header, IEnumerable<Suggestion> suggestions)
        {
            if (!activities.Contains(activity)) return;
            _suggestions.Add(new SuggestionGroup(header, suggestions.ToArray()));
        }

        IEnumerable<Suggestion> SuggestAbility(string abilityName, string? reason = null)
        {
            foreach (var ability in _abilities.Where(a => a.Ability == abilityName).GroupBy(a => a.Gift))
                yield return new SuggestAbility(ability.Key, ability.ToArray(), reason);
        }

        IEnumerable<Suggestion> SuggestSkill(string skillName, string? reason = null)
        {
            var occupations = _skills
                .Where(a => a.Skill.StartsWith(skillName))
                .Select(x => x.Occupation)
                .ToArray();

            var skillDefinition = _skillDefinitions.FirstOrDefault(skill => skill.Name == skillName);
            if (skillDefinition != null)
                yield return new SuggestSkill(occupations, skillName, skillDefinition, reason);
        }
    }


}