@using Larp.Landing.Shared.MwFifth
@using System.Text.Json
@inject ILogger<StepSkills> Logger

<MudText Typo="Typo.h6">Free skills</MudText>
<MudText Typo="Typo.body2">
    These skills are added free at no moonstone cost. If you selected one or more <strong>Talent</strong> Advantages, you should make your skill selections here.
</MudText>

<StepDivider/>

<MudText Typo="Typo.body2">
    Select skills from this list to add them to the grid where you add ranks.
</MudText>
<MudSelectExtended
    @ref="_selectComponent"
    T="SkillItem?"
    ItemCollection="_availableSkills"
    ToStringFunc="x => x!.Title"
    ValueChanged="AddSkill"
    Label="Select to purchase a skill"
    Variant="Variant.Outlined"
    SearchBox="true"
    SearchFunc="(item, query) => item!.Definition.Name.Contains(query, StringComparison.InvariantCultureIgnoreCase)"
    SearchBoxClearable="true"
    SearchBoxAutoFocus="true"/>

<StepDivider/>

<MudGrid>
    @foreach (var skill in _skills.Where(x => x.IsPurchased))
    {
        <MudItem xs="6">
            <MudPaper Class="pa-4">
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                        <MudAvatar Size="Size.Medium">@skill.Purchase.Purchases</MudAvatar>
                        <div>
                            <MudText Typo="Typo.body1">@skill.Title</MudText>
                            <MudText Typo="Typo.body2">@skill.Subtitle</MudText>
                        </div>
                    </MudStack>

                    <MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                        @if (skill.Definition.Purchasable == SkillPurchasable.Multiple)
                        {
                            <MudFab StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => Add(skill)"/>
                            <MudFab StartIcon="@(skill.IsLastRank ? Icons.Material.Filled.Delete : Icons.Material.Filled.Remove)" Size="Size.Small" OnClick="() => Remove(skill)"/>
                        }
                        else
                        {
                            <MudFab StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => Remove(skill)"/>
                        }
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
    }
</MudGrid>
<StepDivider/>

@code {

    [Parameter]
    public CharacterBuilder Character { get; set; } = default!;

    private MudSelectExtended<SkillItem?>? _selectComponent;

    private SkillItem[] _skills = Array.Empty<SkillItem>();
    private SkillItem[] _availableSkills = Array.Empty<SkillItem>();

    protected override void OnInitialized()
    {
        _skills = Character.GameState.Skills.Select(
            definition => new SkillItem(definition,
                Character.FreeSkills.FirstOrDefault(x => x.Name == definition.Name)
                ?? new CharacterSkill() { Name = definition.Name, Purchases = 0, Rank = 0, Type = SkillPurchase.Free }))
            .ToArray();

        UpdateSkills();
    }

    private void UpdateSkills()
    {
        _selectComponent?.Clear();

        foreach (var skill in _skills) skill.Update();

        _availableSkills = _skills.Where(x => !x.IsPurchased).ToArray();

        StateHasChanged();
    }

    private void ApplyChanges()
    {
        Character.FreeSkills = _skills
            .Where(x => x.IsPurchased)
            .Select(x => x.Purchase)
            .ToArray();

        UpdateSkills();
    }

    private void AddSkill(SkillItem? skill)
    {
        skill?.Add();
        ApplyChanges();
    }

    private void Add(SkillItem? skill)
    {
        skill?.Add();
        ApplyChanges();
    }

    private void Remove(SkillItem? skill)
    {
        skill?.Remove();
        ApplyChanges();
    }

}