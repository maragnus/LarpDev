@using Larp.Landing.Shared.MwFifth
@using System.Text.Json
@using Larp.Landing.Shared
@inject LandingService LandingService
@inject ILogger<MwFifthCharacterEditor> Logger;
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

@code {

    [Parameter]
    public string? CharacterId { get; set; }

    private bool _isNewCharacter;
    private LoadingState _loadingState = LoadingState.Loading;
    private Game _game = new();
    private GameState _gameState = null!;
    private CharacterBuilder _character = null!;
    private Step[] _steps = Array.Empty<Step>();
    private Step? _currentStep = null;
    private AutoSaveState _saveState;
    private int _lastMoonstoneCost = 0;
    private int _newMoonstoneCost = 0;

    protected override async Task OnInitializedAsync()
    {
        _game = LandingService.MwFifth.Game;
        _gameState = LandingService.MwFifth.GameState;

        var character = string.IsNullOrEmpty(CharacterId)
            ? await LandingService.MwFifth.GetDraftCharacter()
            : await LandingService.MwFifth.GetCharacter(CharacterId);

        _character = new CharacterBuilder(character, _gameState, Logger)
        {
            StateChanged = () =>
            {
                UpdateCharacter();
                _saveState = AutoSaveState.ChangeAvailable;
                StateHasChanged();
            }
        };
        UpdateCharacter();

        void UpdateCharacter()
        {
            _character.UpdateMoonstone();
            _newMoonstoneCost = _character.GiftMoonstone + _character.SkillMoonstone;
        }

        _isNewCharacter = character.PreviousId == null;
        if (character.PreviousId != null)
        {
            var previousCharacter = await LandingService.MwFifth.GetCharacter(character.PreviousId);
            _lastMoonstoneCost = previousCharacter.GiftMoonstone + previousCharacter.SkillMoonstone;
        }

        _steps = new Step[]
        {
            new(
                "Name",
                @<StepName Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.PermIdentity"/>,
                () => _character.IsNameValid && _character.IsAgeGroupValid),
            new(
                "Home Chapter",
                @<StepHomeChapter Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Flag"/>,
                () => _character.IsHomeChapterValid),
            new(
                "Homeland",
                @<StepHomeland Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Home"/>,
                () => _character.IsHomelandValid),
            new(
                "Occupation",
                @<StepOccupation Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Work"/>,
                () => _character.IsOccupationValid,
                () => _character.AgeGroup != AgeGroup.PreTeen),
            new(
                "Gifts",
                @<StepGifts Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.FitnessCenter"/>,
                () => _character.IsGiftsValid,
                () => _character.AgeGroup != AgeGroup.PreTeen),
            new(
                "Religion",
                @<StepReligion Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.GroupWork"/>,
                () => _character.IsReligionValid),
            new(
                "Skills",
                @<StepSkills Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Handyman"/>,
                () => _character.IsSkillsValid,
                () => _character.HasSkills),
            new(
                "Spells",
                @<StepSpells Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Book"/>,
                () => _character.IsSpellsValid,
                () => _character.HasWisdomSpells),
            new(
                "Advantages",
                @<StepVantages Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Blind"/>,
                () => _character.IsVantagesValid),
            new(
                "History",
                @<StepHistory Character="_character"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.History"/>,
                () => _character.IsHistoryValid),
            new(
                "Review",
                @<StepReview Character="_character" Submit="Submit"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Verified"/>,
                () => false)
        };

        _currentStep = _steps[0];
        _loadingState = LoadingState.Loaded;
    }

    record Step(string Title, RenderFragment Content, RenderFragment Icon, Func<bool> IsComplete, Func<bool>? IsAvailable = null);

    private void OnStepChange()
    {
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await LandingService.MwFifth.FinishAutoSave(_character.Character);
    }

    private async Task Save()
    {
        _saveState = AutoSaveState.Saving;
        await Task.Yield();

        await LandingService.MwFifth.Save(_character.Character);
        CharacterId = _character.Character.Id;

        _saveState = AutoSaveState.Saved;
        await Task.Yield();

        if (new Uri(NavigationManager.Uri).AbsolutePath.EndsWith("/new"))
        {
            NavigationManager.NavigateTo($"/characters/mw5e/{CharacterId}/edit", new NavigationOptions() { ReplaceHistoryEntry = true });
        }
    }

    private async Task DeleteDraft()
    {
        var result = await DialogService.ShowMessageBox("Delete Character Draft", "Are you sure you want to delete this draft? It cannot be recovered.", "Yes, Delete It", "No, Keep It");
        if (result == true)
        {
            await LandingService.MwFifth.DeleteCharacter(_character.Character.Id);
            NavigationManager.NavigateTo("/characters");
        }
    }

    private async Task Submit()
    {
        var result = await DialogService.ShowMessageBox("Submit Character for Review", "Are you sure you want to submit this draft for review? You cannot edit it again until it is approved.", "Yes, I'm Done", "No, Keep Editing");
        if (result == true)
        {
            _character.Character.State = CharacterState.Review;
            await LandingService.MwFifth.Save(_character.Character);
            NavigationManager.NavigateTo($"/characters/mw5e/{CharacterId}", new NavigationOptions() { ReplaceHistoryEntry = true });
        }
    }

}

@if (_loadingState != LoadingState.Loaded)
{
    <MudProgressLinear Indeterminate/>
    return;
}

<MudGrid Style="margin-top: 1em">
    <MudItem md="12" sm="12">
        <MudStack Row Justify="Justify.SpaceBetween">
            @if (_isNewCharacter)
            {
                <MudText Typo="Typo.h6">New @_game.Title Character</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6">Updating @_game.Title Character</MudText>
            }

            <MudStack Row>
                @if (!_isNewCharacter)
                {
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudAvatar Color="Color.Success">@(_newMoonstoneCost > 0 ? "+" : "")@(_newMoonstoneCost)</MudAvatar>
                        <MudText Typo="Typo.caption">Moonstone</MudText>
                    </MudStack>
                }

                @if (CharacterId != null)
                {
                    <div>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteDraft" StartIcon="@Icons.Material.Outlined.DeleteForever">Delete draft</MudButton>
                    </div>
                }
                <div>
                    @switch (_saveState)
                    {
                        case AutoSaveState.Saving:
                            <MudProgressCircular Indeterminate="@true"/>
                            break;
                        case AutoSaveState.Saved:
                            <MudAlert Severity="@Severity.Info">Saved</MudAlert>
                            break;
                        case AutoSaveState.ChangeAvailable:
                            <MudButton Variant="Variant.Filled" OnClick="Save">Save Changes</MudButton>
                            break;
                        case AutoSaveState.Inactive:
                        default:
                            <MudAlert Severity="@Severity.Info">No Changes</MudAlert>
                            break;
                    }
                </div>
            </MudStack>
        </MudStack>
    </MudItem>
    <MudItem md="3" sm="12">
        <MudTimeline TimelinePosition="TimelinePosition.Left" SelectedIndexChanged="OnStepChange">
            @foreach (var step in _steps)
            {
                if (step.IsAvailable != null && !step.IsAvailable())
                    continue;

                var isCurrentStep = _currentStep == step;
                var isComplete = step.IsComplete();
                <MudTimelineItem Color="isCurrentStep ? Color.Primary : (isComplete ? Color.Success : Color.Default)">
                    <MudButton OnClick="() => _currentStep = step">
                        @step.Icon&nbsp;
                        <MudText Typo="Typo.caption" Style="margin-left: 1em">@step.Title</MudText>
                    </MudButton>
                </MudTimelineItem>
            }
        </MudTimeline>
    </MudItem>
    <MudItem md="9" sm="12">
        <MudPaper Elevation="2" Style="padding: 2em">
            @_currentStep?.Content
        </MudPaper>
    </MudItem>
</MudGrid>