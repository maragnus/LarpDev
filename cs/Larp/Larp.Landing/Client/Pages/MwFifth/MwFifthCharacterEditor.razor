@using Larp.Landing.Shared.MwFifth
@using System.Text.Json
@using Larp.Landing.Client.Pages.Dialogs
@using Larp.Landing.Shared
@inject LandingService LandingService
@inherits LarpPage

@code {

    [Parameter]
    public string? CharacterId { get; set; }

    [Parameter]
    public bool Admin { get; set; }

    private bool _isNewCharacter;
    private Game _game = new();
    private GameState _gameState = default!;
    private Character _character = default!;
    private CharacterBuilder _revision = default!;
    private Step[] _steps = Array.Empty<Step>();
    private Step? _currentStep = null;
    private AutoSaveState _saveState;
    private int _lastMoonstoneCost = 0;
    private int _newMoonstoneCost = 0;
    private int _totalMoonstone = 0;
    private int _myMoonstone;
    private int _availableMoonstone;
    private string _availableMoonstoneInfo = "";

    protected override async Task OnSafeParametersSetAsync()
    {
        if (string.IsNullOrEmpty(CharacterId)) return;

        var characterAndRevision = Admin
            ? await LandingService.Admin.GetMwFifthCharacter(CharacterId!)
            : await LandingService.MwFifth.GetCharacter(CharacterId!);
        _character = characterAndRevision.Character;
        var revision = characterAndRevision.Revision;

        Logger.LogInformation("Character {CharacterId} Revision {RevisionId}", _character.CharacterId, revision.RevisionId);

        if (!Admin && revision.State is not CharacterState.Draft)
        {
            await DialogService.ShowMessageBox("Unable to Edit Character", "Character must be in a draft status to edit it.");
            return;
        }

        if (Admin && revision.State is not CharacterState.Review and not  CharacterState.Draft)
        {
            await DialogService.ShowMessageBox("Unable to Edit Character", "Character must be in a review or draft status to edit it.");
            return;
        }

        _revision = new CharacterBuilder(characterAndRevision, _gameState, Logger)
        {
            StateChanged = () =>
            {
                UpdateCharacter();
                _saveState = AutoSaveState.ChangeAvailable;
                StateHasChanged();
            }
        };
        UpdateCharacter();

        void UpdateCharacter()
        {
            _revision.UpdateMoonstone();
            _availableMoonstone = characterAndRevision.Moonstone.Available;
            _availableMoonstoneInfo = $"You have allocated {characterAndRevision.Moonstone.Used} of your {characterAndRevision.Moonstone.Total} available Moonstone";
            _myMoonstone = _character.Moonstone;
            _totalMoonstone = _revision.GiftMoonstone + _revision.SkillMoonstone;
            _newMoonstoneCost = _totalMoonstone - _lastMoonstoneCost;
        }

        _isNewCharacter = revision.PreviousRevisionId == null;
        _lastMoonstoneCost = characterAndRevision.Character.UsedMoonstone;

        _steps = new Step[]
        {
            new(
                "Name",
                @<StepName Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.PermIdentity"/>,
                () => _revision.IsNameValid && _revision.IsAgeGroupValid),
            new(
                "Home Chapter",
                @<StepHomeChapter Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Flag"/>,
                () => _revision.IsHomeChapterValid),
            new(
                "Homeland",
                @<StepHomeland Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Home"/>,
                () => _revision.IsHomelandValid),
            new(
                "Occupation",
                @<StepOccupation Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Work"/>,
                () => _revision.IsOccupationValid,
                () => _revision.AgeGroup != AgeGroup.PreTeen),
            new(
                "Gifts",
                @<StepGifts Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.FitnessCenter"/>,
                () => _revision.IsGiftsValid,
                () => _revision.AgeGroup != AgeGroup.PreTeen),
            new(
                "Religion",
                @<StepReligion Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.GroupWork"/>,
                () => _revision.IsReligionValid),
            new(
                "Skills",
                @<StepSkills Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Handyman"/>,
                () => _revision.IsSkillsValid,
                () => _revision.HasSkills),
            new(
                "Free Skills",
                @<StepFreeSkills Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.CleanHands"/>,
                () => true,
                () => _revision.HasSkills),
            new(
                "Spells",
                @<StepSpells Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Book"/>,
                () => _revision.IsSpellsValid,
                () => _revision.HasWisdomSpells),
            new(
                "Advantages",
                @<StepVantages Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Blind"/>,
                () => _revision.IsVantagesValid),
            new(
                "History",
                @<StepHistory Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.History"/>,
                () => _revision.IsHistoryValid),
            new(
                "Documents",
                @<StepDocuments Character="_revision"/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Notes"/>,
                () => true,
                () => _revision.HasDocuments),
            new(
                "Review",
                @<StepReview Character="_revision" Submit="Submit" Admin/>,
                @<MudIcon Icon="@Icons.Material.Outlined.Verified"/>,
                () => false)
        };

        _currentStep = _steps[0];
    }

    protected override async Task OnSafeInitializedAsync()
    {
        _game = LandingService.MwFifthGame;
        _gameState = LandingService.MwFifthGameState;

        if (string.IsNullOrEmpty(CharacterId)) // If a new character, generate it and load it up
        {
            var newCharacter = await LandingService.MwFifth.GetNewCharacter();
            NavigationManager.NavigateTo($"/characters/mw5e/{newCharacter.Revision.RevisionId}/edit", new NavigationOptions() { ReplaceHistoryEntry = true });
        }
    }

    record Step(string Title, RenderFragment Content, RenderFragment Icon, Func<bool> IsComplete, Func<bool>? IsAvailable = null);

    private void OnStepChange()
    {
        StateHasChanged();
    }

    private async Task Save()
    {
        _saveState = AutoSaveState.Saving;
        var success = await SafeActionAsync(async () =>
        {
            if (Admin)
                await LandingService.Admin.SaveMwFifthCharacter(_revision.Revision);
            else
                await LandingService.MwFifth.SaveCharacter(_revision.Revision);
            CharacterId = _revision.Revision.RevisionId;
        });

        _saveState = success ? AutoSaveState.Saved : AutoSaveState.ChangeAvailable;
    }

    private async Task DeleteDraft()
    {
        var result = await DialogService.ShowMessageBox("Delete Character Draft", "Are you sure you want to delete this draft? It cannot be recovered.", "Yes, Delete It", "No, Keep It");
        if (result == true)
        {
            await SafeActionAsync(async () =>
            {
                if (Admin)
                {
                    await LandingService.Admin.DeleteMwFifthCharacter(_revision.Revision.RevisionId);
                    NavigationManager.NavigateTo("/admin/mw5e/characters");
                }
                else
                {
                    await LandingService.MwFifth.DeleteCharacter(_revision.Revision.RevisionId);
                    NavigationManager.NavigateTo("/characters");
                }
            });
        }
    }

    private async Task Submit()
    {
        if (!Admin && !_revision.IsValid)
        {
            await Save();
            await DialogService.ShowMessageBox("Submit Character for Review", "You cannot submit your character while it has errors.");
            return;
        }

        if (!Admin && _availableMoonstone < _newMoonstoneCost)
        {
            await Save();
            await DialogService.ShowMessageBox("Submit Character for Review", "You do not have enough moonstone for this change.");
            return;
        }

        var result = await DialogService.ShowMessageBox("Submit Character for Review", "Are you sure you want to submit this draft for review? You cannot edit it again until it is approved.", "Yes, I'm Done", "No, Keep Editing");
        if (result == true)
        {
            var oldState = _revision.Revision.State;

            var success = await SafeActionAsync(async () =>
            {
                _revision.Revision.State = CharacterState.Review;
                if (Admin)
                {
                    await LandingService.Admin.SaveMwFifthCharacter(_revision.Revision);
                    NavigationManager.NavigateTo($"/admin/mw5e/characters/{CharacterId}", new NavigationOptions() { ReplaceHistoryEntry = true });
                }
                else
                {
                    await LandingService.MwFifth.SaveCharacter(_revision.Revision);
                    NavigationManager.NavigateTo($"/characters/mw5e/{CharacterId}", new NavigationOptions() { ReplaceHistoryEntry = true });
                }
            });

            if (!success)
                _revision.Revision.State = oldState;
        }
    }

}

@if (IsLoading)
{
    <MudProgressLinear Indeterminate/>
    return;
}

<MudGrid Style="margin-top: 1em">
    <MudItem md="12" sm="12">
        <MudStack Row Justify="Justify.SpaceBetween">
            @if (_isNewCharacter)
            {
                <MudText Typo="Typo.h6">New @_game.Title Character</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6">Updating @_game.Title Character</MudText>
            }

            <MudStack Row AlignItems="AlignItems.Start" Justify="Justify.Center">
                @if (!_isNewCharacter)
                {
                    <MudTooltip Text="@_availableMoonstoneInfo">
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                            <MudAvatar Color="Color.Success">@_availableMoonstone</MudAvatar>
                            <MudText Align="Align.Center" Typo="Typo.caption">Available Moonstone</MudText>
                        </MudStack>
                    </MudTooltip>
                    <MudTooltip Text="The amount of moonstone allocated for this character">
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                            <MudAvatar Color="Color.Success">@_totalMoonstone</MudAvatar>
                            <MudText Align="Align.Center" Typo="Typo.caption">Total Moonstone</MudText>
                        </MudStack>
                    </MudTooltip>
                    <MudTooltip Text="The amount of moonstone needed for this revision">
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                            <MudAvatar Color="Color.Success">@(_newMoonstoneCost > 0 ? "+" : "")@(_newMoonstoneCost)</MudAvatar>
                            <MudText Align="Align.Center" Typo="Typo.caption">Revision Cost</MudText>
                        </MudStack>
                    </MudTooltip>
                }

                <MudButtonGroup OverrideStyles="false">
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteDraft" StartIcon="@Icons.Material.Outlined.DeleteForever">Delete draft</MudButton>
                    <MudTooltip Text="Save your changes so far and keep editing">
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save" Disabled="_saveState != AutoSaveState.ChangeAvailable">Save Changes</MudButton>
                    </MudTooltip>
                    @if (Admin)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Outlined.Verified" OnClick="Submit">Submit</MudButton>
                    }
                </MudButtonGroup>
            </MudStack>
        </MudStack>
    </MudItem>
    <MudItem xs="12">
        @switch (_saveState)
        {
            case AutoSaveState.Saving:
                <MudProgressCircular Indeterminate="@true"/>
                break;
            case AutoSaveState.Saved:
                <MudAlert Severity="@Severity.Info">Saved</MudAlert>
                break;
            case AutoSaveState.ChangeAvailable:
                break;
            case AutoSaveState.Inactive:
            default:
                <MudAlert Severity="@Severity.Info">No Changes</MudAlert>
                break;
        }
    </MudItem>
    <MudItem md="3" sm="12">
        <MudTimeline TimelinePosition="TimelinePosition.Left" SelectedIndexChanged="OnStepChange">
            @foreach (var step in _steps)
            {
                if (step.IsAvailable != null && !step.IsAvailable())
                    continue;

                var isCurrentStep = _currentStep == step;
                var isComplete = step.IsComplete();
                <MudTimelineItem Color="isCurrentStep ? Color.Primary : (isComplete ? Color.Success : Color.Default)">
                    <MudButton OnClick="() => _currentStep = step">
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="0">
                            @step.Icon&nbsp;
                            <MudText Align="Align.Left" Typo="Typo.caption" Style="margin-left: 0.5em">@step.Title</MudText>
                        </MudStack>
                    </MudButton>
                </MudTimelineItem>
            }
        </MudTimeline>
    </MudItem>
    <MudItem md="9" sm="12">
        <MudPaper Elevation="2" Style="padding: 2em">
            @_currentStep?.Content
        </MudPaper>
    </MudItem>
</MudGrid>