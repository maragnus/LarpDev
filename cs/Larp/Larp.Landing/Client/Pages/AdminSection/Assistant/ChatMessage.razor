@using Larp.Assistant
@using System.Text
<MudStack Row>
    @if (Response)
    {
        <MudAvatar Style=" background-color: #AB68FF" Size="Size.Small">
            <MudImage Src="/openai-w.svg" Alt="OpenAI Logo"/>
        </MudAvatar>
    }
    else
    {
        <MudAvatar Color="Color.Primary" Size="Size.Small">
            <MudIcon Icon="@Icons.Material.Filled.Person" />
        </MudAvatar>
    } 
    <MudStack Spacing="2">
        <MudText Typo="Typo.caption">@Author</MudText>
        <MudText Typo="Typo.body2" Class="markdown" Inline="false">
            @_content
        </MudText>
    </MudStack>
</MudStack>

@code {
    private MarkupString _content;
    private MarkupString _citations;
    private string[] _annotations = Array.Empty<string>();

    [Parameter]
    public bool Response { get; set; }

    [Parameter] public string Author { get; set; } = default!;

    [Parameter] public AiMessage Message { get; set; } = default!;

    protected override void OnParametersSet()
    {
        var sb = new StringBuilder(Message.Content);
        var citations = new StringBuilder();
        foreach (var (annotation, index) in Message.Annotations.Select((annotation, index) => (annotation, index)))
        {
            sb.Replace(annotation.Label, $"[{index}]");

            var quote = new StringBuilder(annotation.Quote);
            quote.Insert(annotation.EndIndex, "== ");
            quote.Insert(annotation.StartIndex, " ==");
            quote.Insert(0, $"# {index}\r\n\r\n");
            citations.Append(quote);
            citations.AppendLine();
            citations.AppendLine();
        }

        _content = new MarkupString(Markdig.Markdown.ToHtml(sb.ToString()));
        _citations = new MarkupString(Markdig.Markdown.ToHtml(citations.ToString()));
        Console.WriteLine(_citations);
    }

}