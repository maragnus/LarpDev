@page "/admin/data"
@inherits LarpPage
@inject IJSRuntime Js
@inject LandingService LandingService

<PageHeader Container>Import/Export Data</PageHeader>

@code {
    private StringResult? _sendResult;
    private IBrowserFile? _file;
    private bool _isSending;
        private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private bool _synchronizingSquare;

    private async Task Import()
    {
        if (_fileNames.Count == 0 || _file == null) return;

        _isSending = true;
        await SafeActionAsync(async () =>
        {
            await using var stream = _file.OpenReadStream();
            _sendResult = await LandingService.Admin.Import(stream);
        },
            (ex) => _sendResult = StringResult.Failed("Exception communicating with server" + ex.Message));
        _isSending = false;
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        _file = files.FirstOrDefault();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
        }
    }

    private async Task SquareSynchronize()
    {
        _synchronizingSquare = true;
        StateHasChanged();
        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.SquareSynchronize();
            await DialogService.ShowMessageBox("Synchronize Square", "All Square customers, team members, orders, and payments have been synchronized.");
        });
        _synchronizingSquare = false;
    }

    private async Task Clear()
    {
        _file = null;
        _fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

    private void Reset()
    {
        _sendResult = null;
        _file = null;
        _fileNames.Clear();
        StateHasChanged();
    }

    private async Task Export()
    {
        await SafeActionAsync(async () =>
        {
            var file = await LandingService.Admin.Export();
            var fileStream = file.CreateReadStream();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await Js.InvokeVoidAsync("downloadFileFromStream", $"larp-landing-export-{DateTime.Now:yyyy-MM-dd}.xlsx", streamRef);
        });
    }

    private async Task ExportOccupations()
    {
        await SafeActionAsync(async () =>
        {
            var file = await LandingService.Admin.ExportOccupations();
            var fileStream = file.CreateReadStream();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await Js.InvokeVoidAsync("downloadFileFromStream", "Mw5eOccupations.json", streamRef);
        });
    }

    private async Task Reseed()
    {
        var answer = await DialogService.ShowMessageBox("Reseed Game Data", "Are you sure you want to do this? Any custom changes to the game data will be lost.", "Yes, Reseed", "No, Don't Do Anything");
        if (answer != true) return;
        await SafeActionAsync(async () => { await LandingService.Admin.ReseedData(); });
    }

    private async Task DeleteUnused()
    {
        var answer = await DialogService.ShowMessageBox("Delete Unmodified Characters", "Are you sure you want to do this? You will need to reimport the characters.", "Yes, Delete Them", "No, Don't Do Anything");
        if (answer != true) return;
        await SafeActionAsync(async () => { await LandingService.Admin.DeleteCharactersUnused(); });
    }

}

<AdminLayout Title="Import/Export Data">
    <MudPaper Class="mb-4 pa-4">
        <MudStack Spacing="4" AlignItems="AlignItems.Start">
            <MudText Typo="Typo.h6">Square</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AttachMoney"
                       OnClick="SquareSynchronize" Disabled="_synchronizingSquare">
                Synchronize
            </MudButton>
            @if (_synchronizingSquare)
            {
                <MudText>Synchronization in progress...</MudText>
                <MudProgressLinear Indeterminate Size="Size.Large"/>
            }
        </MudStack>
    </MudPaper>

    <MudPaper Class="mb-4 pa-4">
        <MudStack Spacing="4" AlignItems="AlignItems.Start">
            <MudText Typo="Typo.h6">Import Data</MudText>
            @if (_sendResult?.IsSuccess == true)
            {
                <MudAlert Severity="Severity.Info">
                    Import successful: @_sendResult.Value
                </MudAlert>
                <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="Reset">Import Again</MudButton>
            }
            else if (_sendResult?.IsSuccess == false)
            {
                <MudAlert Severity="Severity.Error">
                    Import failed: @_sendResult.ErrorMessage
                </MudAlert>
                <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="Reset">Start Over</MudButton>
            }
            else if (_isSending)
            {
                <MudText>Importing...</MudText>
                <MudProgressLinear Indeterminate/>
            }
            else
            {
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                               @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                    <ButtonTemplate>
                        <MudPaper Height="150px" Outlined="true" Class="@_dragClass">
                            <MudText Typo="Typo.body1">Drag and drop your .xlsx file here or click to select a file</MudText>
                            @foreach (var file in _fileNames)
                            {
                                <MudChip Color="Color.Dark" Text="@file"/>
                            }
                        </MudPaper>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudToolBar DisableGutters="true" Class="gap-4">
                    <MudButton StartIcon="@Icons.Material.Filled.Upload" OnClick="Import" Disabled="@(!_fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Clear" OnClick="Clear" Disabled="@(!_fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
                </MudToolBar>
            }
        </MudStack>
    </MudPaper>

    <MudPaper Class="mb-4 pa-4">
        <MudStack Spacing="4" AlignItems="AlignItems.Start">
            <MudText Typo="Typo.h6">Export Data</MudText>
            <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" OnClick="Export">Export Players and Characters</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" OnClick="ExportOccupations">Export Occupations</MudButton>
        </MudStack>
    </MudPaper>

    <MudPaper Class="mb-4 pa-4">
        <MudStack Spacing="4" AlignItems="AlignItems.Start">
            <MudText Typo="Typo.h6">Reseed Game Data</MudText>
            <MudButton StartIcon="@Icons.Material.Filled.GeneratingTokens" Variant="Variant.Filled" OnClick="Reseed">Reseed Data</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.DeleteForever" Variant="Variant.Filled" OnClick="DeleteUnused">Delete Unmodified Characters</MudButton>
        </MudStack>
    </MudPaper>

</AdminLayout>