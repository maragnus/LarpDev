@page "/admin/letters/templates/{TemplateId}"
@inherits LarpPage

@inject LandingService LandingService

<PageHeader Container>Edit Letter Template</PageHeader>

<AdminLayout Title="Edit Letter Template" Loading="IsLoading">
    <MudStack Spacing="4" Class="relative">
        <MudOverlay DarkBackground Absolute Visible="_saving">
            <MudText Typo="Typo.h6">Loading...</MudText>
            <MudProgressCircular Indeterminate Size="Size.Large"/>
        </MudOverlay>

        <div>
            <MudButtonGroup OverrideStyles="false">
                <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="Save" Variant="Variant.Filled" Color="Color.Success">Save</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Preview" OnClick="Preview" Variant="Variant.Filled" Color="Color.Warning">Preview</MudButton>
            </MudButtonGroup>
        </div>

        @if (_template.Retired)
        {
            <MudAlert Severity="Severity.Warning">This letter template is retired. New letters cannot be composed and it will not appear in the list for the Event Editor.</MudAlert>
        }

        <MudPaper Class="pa-4">
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField T="string" @bind-Value="@_template.Name" Label="Name" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-Value="@_template.Title" Label="Title" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudSwitch T="bool" @bind-Checked="@_template.Retired" Label="Retired" Color="Color.Error" UnCheckedColor="Color.Success"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Lines="6" T="string?" @bind-Value="@_template.Description" Label="Description" Variant="Variant.Outlined"/>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudDataGrid
            Dense Bordered
            T="LetterField" Items="_template.Fields" SortMode="SortMode.None"
            EditMode="DataGridEditMode.Cell" ReadOnly="false" CommittedItemChanges="UpdateFieldNames">
            <Columns>
                <HierarchyColumn T="LetterField"/>
                <PropertyColumn Property="x => x.Name"/>
                <PropertyColumn Property="x => x.Title"/>
                <PropertyColumn Property="x => x.Type">
                    <EditTemplate>
                        <MudSelect T="LetterFieldType" @bind-Value="@context.Item.Type">
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Removed">Retired Question</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Text">Text Box</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.TextBlock">Text Block</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.YesNo">Yes/No</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Rating">Rating</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Selection">Selection</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.MultipleSelection">Multiple Selection</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Component">Component</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Components">Multiple Components</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Character">Character</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Characters">Multiple Characters</MudSelectItem>
                            <MudSelectItem T="LetterFieldType" Value="LetterFieldType.Header">Header</MudSelectItem>
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn T="LetterField" Sortable="false" IsEditable="false">
                    <CellTemplate>
                        <MudIconButton Size="Size.Small" Color="Color.Secondary" Icon="@Icons.Material.Filled.MoveUp" OnClick="() => MoveUp(context.Item)"/>
                        <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.MoveDown" OnClick="() => MoveDown(context.Item)"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <ChildRowContent>
                @if (context.Item.Type is LetterFieldType.Selection or LetterFieldType.MultipleSelection)
                {
                    <MudChipField T="string" @bind-Values="@context.Item.Options" Label="Options (comma-delimited)" Variant="Variant.Outlined" ChipSize="Size.Medium" ChipVariant="Variant.Filled" Delimiter="@Delimiter"/>
                }
                <MudStack>
                    <MudTextField T="string?" Variant="Variant.Outlined" @bind-Value="@context.Item.Description" Label="Description"/>
                    <MudText Typo="Typo.caption">Only show this field when:</MudText>
                    <MudStack Row>
                        <MudSelectExtended ItemCollection="_fieldNames" @bind-Value="@context.Item.Conditional.FieldName" Label="Field Name" Variant="Variant.Outlined"/>
                        <MudSelect T="LetterFieldConditionOperator" @bind-Value="@context.Item.Conditional.Operator" Variant="Variant.Outlined">
                            <MudSelectItem T="LetterFieldConditionOperator" Value="LetterFieldConditionOperator.Always">Always Show</MudSelectItem>
                            <MudSelectItem T="LetterFieldConditionOperator" Value="LetterFieldConditionOperator.IsEmpty">IsEmpty</MudSelectItem>
                            <MudSelectItem T="LetterFieldConditionOperator" Value="LetterFieldConditionOperator.IsNotEmpty">IsNotEmpty</MudSelectItem>
                            <MudSelectItem T="LetterFieldConditionOperator" Value="LetterFieldConditionOperator.Equals">Equals</MudSelectItem>
                            <MudSelectItem T="LetterFieldConditionOperator" Value="LetterFieldConditionOperator.NotEquals">Not Equals</MudSelectItem>
                            <MudSelectItem T="LetterFieldConditionOperator" Value="LetterFieldConditionOperator.Contains">Contains</MudSelectItem>
                            <MudSelectItem T="LetterFieldConditionOperator" Value="LetterFieldConditionOperator.DoesNotContain">Does Not Contain</MudSelectItem>
                        </MudSelect>
                        <MudTextField T="string?" @bind-Value="@context.Item.Conditional.Value" Label="Value" Variant="Variant.Outlined"/>
                    </MudStack>
                </MudStack>
            </ChildRowContent>
        </MudDataGrid>

        <div>
            <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddField" Color="Color.Primary">Add Field</MudButton>
        </div>
    </MudStack>

</AdminLayout>

@code {

    [Parameter]
    public string TemplateId { get; set; } = default!;

    private LetterTemplate _template = default!;
    private bool _saving;
    private string[] _fieldNames = Array.Empty<string>();

        private const char Delimiter = ',';

    protected override async Task OnSafeParametersSetAsync()
    {
        _template = await LandingService.Admin.GetLetterTemplate(TemplateId);
        foreach (var field in _template.Fields)
            field.Conditional ??= new LetterFieldCondition();
        UpdateFieldNames();
    }

    private void UpdateFieldNames()
    {
        _fieldNames = _template.Fields.Select(x => x.Name)
            .Where(x => !string.IsNullOrWhiteSpace(x))
            .ToArray();
    }

    private async Task Save()
    {
        _saving = true;
        await SafeActionAsync(async () => { await LandingService.Admin.SaveLetterTemplate(TemplateId, _template); });
        _saving = false;
    }

    private void AddField()
    {
        _template.Fields = _template.Fields
            .Concat(new[] { new LetterField { Name = "new-field", Type = LetterFieldType.Text, Conditional = new LetterFieldCondition() } })
            .ToArray();
    }

    private async Task Preview()
    {
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = true, CloseButton = true, Position = DialogPosition.TopCenter
        };
        var now = DateOnly.FromDateTime(DateTime.Today);
        var parameters = new DialogParameters()
        {
            { nameof(LetterDialog.Template), _template },
            { nameof(LetterDialog.Letter), new Letter() },
            {
                nameof(LetterDialog.Event),
                new Event
                {
                    Title = "Sample Event",
                    Date = now,
                    Components = new[]
                    {
                        new EventComponent()
                        {
                            Name = "Chronicle 1 (yesterday)", Date = now.AddDays(-1), ComponentId = ""
                        },
                        new EventComponent()
                        {
                            Name = "Chronicle 2 (today)", Date = now, ComponentId = ""
                        },
                        new EventComponent()
                        {
                            Name = "Chronicle 3 (tomorrow)", Date = now.AddDays(1), ComponentId = ""
                        },
                    }
                }
            },
            { nameof(LetterDialog.ReadOnly), false },
            { nameof(LetterDialog.AccountNames), new Dictionary<string, AccountName>() }
        }
            ;
        await DialogService.ShowAsync<LetterDialog>("Letter Preview", parameters, options);
    }

    private void MoveUp(LetterField field)
    {
        var position = Array.IndexOf(_template.Fields, field);
        if (position == 0) return;

        var old = _template.Fields[position - 1];
        _template.Fields[position - 1] = field;
        _template.Fields[position] = old;
    }

    private void MoveDown(LetterField field)
    {
        var position = Array.IndexOf(_template.Fields, field);
        if (position == _template.Fields.Length - 1) return;

        var old = _template.Fields[position + 1];
        _template.Fields[position + 1] = field;
        _template.Fields[position] = old;
    }

}