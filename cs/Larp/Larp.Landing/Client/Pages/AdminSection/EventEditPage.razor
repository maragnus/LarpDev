@page "/admin/events/{EventId}"
@inject LandingService LandingService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<AdminLayout Loading="_isLoading" Title="Edit Event">
    <MudButtonGroup OverrideStyles="false" Class="mb-4">
        <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="Save">Save</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="Delete">Delete</MudButton>
        <MudButton Color="Color.Info" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.People" OnClick="Attendance">Attendance</MudButton>
    </MudButtonGroup>
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6">
            <MudTextField T="string?" Label="Title" Required @bind-Value="@_event.Title"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField T="string?" Label="Location" @bind-Value="@_event.Location"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudSelectExtended T="string?" Label="Event Type" Required @bind-Value="@_event.EventType" ItemCollection="_eventTypes"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudDatePicker T="DateTime" Label="When" Required Date="@_date" DateChanged="date => _date = date ?? DateTime.Today"/>
        </MudItem>
        <MudItem xs="6" md="3">
            <MudSwitch T="bool" Label="Has RSVP" @bind-Checked="@_event.CanRsvp"/>
        </MudItem>
        <MudItem xs="6" md="3">
            <MudSwitch T="bool" Label="Hidden" @bind-Checked="@_event.IsHidden"/>
        </MudItem>
    </MudGrid>
    <MudDataGrid T="EventComponent" Items="_components" EditMode="DataGridEditMode.Cell" ReadOnly="false">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Component Name" IsEditable/>
            <PropertyColumn Property="x => x.When" Title="When" Format="dddd, MMM d, yyyy" IsEditable="false"/>
        </Columns>
    </MudDataGrid>
</AdminLayout>

@code {

    [Parameter]
    public string EventId { get; set; } = default!;

    private class EventComponent
    {
        public string Id { get; set; } = default!;
        public string Name { get; set; } = default!;
        public DateTime When { get; set; }

        public Larp.Data.EventComponent ToComponent() => new()
        {
            ComponentId = Id,
            Date = When,
            Name = Name,
        };
    }

    bool _isLoading = true;
    private Event _event = default!;
    private Event _savedEvent = default!;
    private List<EventComponent> _components = new();
    private readonly string[] _eventTypes = new[] { "Game", "Workday", "Subscription", "Contest" };
    private Dictionary<string, string?> _games = new();
    private DateTime _date;

    protected override async Task OnInitializedAsync()
    {
        _games = LandingService.Games
            .ToDictionary(x => x.Value.Id, x => x.Value.Title);
        _event = await LandingService.Admin.GetEvent(EventId);
        UpdateSavedEvent();
        _components = _event.Components
            .Select(x => new EventComponent { Id = x.ComponentId, Name = x.Name ?? "No Name", When = x.Date.LocalDateTime })
            .ToList();
        _date = _event.Date.Date;
        _isLoading = false;
    }

    private async Task Save()
    {
        _isLoading = true;
        try
        {
            await LandingService.Admin.SaveEvent(
                EventId,
                _event.GameId,
                _event.Title,
                _event.EventType,
                _event.Location,
                _date,
                _event.CanRsvp,
                _event.IsHidden,
                _components
                    .Select(x => x.ToComponent())
                    .ToArray());
            UpdateSavedEvent();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task Delete()
    {
        var result = await DialogService.ShowMessageBox("Delete event", "Are you sure you want to delete this event?", "Yes, Delete It", "No, Keep It");
        if (result == true)
        {
            await LandingService.Admin.DeleteEvent(EventId);
            NavigationManager.NavigateTo("/admin/events");
        }
    }

    private async Task Attendance()
    {
        if (HasChanged())
        {
            var result = await DialogService.ShowMessageBox("Save before leaving", "Would you like to save changes before leaving?", "Yes, Save Changes", "No, Discard Changes", "Cancel, Stay Here");
            switch (result)
            {
                case true: // Yes
                    await Save();
                    break;
                case null: // Cancel
                    return;
            }
        }
        NavigationManager.NavigateTo($"/admin/events/{EventId}/attendance");
    }

    private bool HasChanged() =>
        _savedEvent.CanRsvp != _event.CanRsvp
        && _savedEvent.GameId != _event.GameId
        && _savedEvent.EventType != _event.EventType
        && _savedEvent.Title != _event.Title
        && _savedEvent.Location != _event.Location
        && _savedEvent.Date != _event.Date
        && _savedEvent.IsHidden != _event.IsHidden;


    private void UpdateSavedEvent()
    {
        _savedEvent = new Event()
        {
            CanRsvp = _event.CanRsvp,
            GameId = _event.GameId,
            EventType = _event.EventType,
            Title = _event.Title,
            Location = _event.Location,
            Date = _event.Date,
            IsHidden = _event.IsHidden
        };
    }

}