@page "/admin/events/{EventId}"
@inherits LarpPage

@inject LandingService LandingService
@inject IJSRuntime Js

<AdminLayout Loading="IsLoading" Title="Edit Event">
    <MudStack Spacing="4">

        <MudButtonGroup OverrideStyles="false">
            <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="Save">Save</MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="Delete">Delete</MudButton>
            <MudButton Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download" OnClick="DownloadLetters">Download</MudButton>
            <MudButton Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Print" OnClick="Preregistration">Preregistration</MudButton>
        </MudButtonGroup>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField T="string?" Label="Title" Required @bind-Value="@_event.Title" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string?" Label="Location" @bind-Value="@_event.Location" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelectExtended T="string?" Label="Event Type" Required @bind-Value="@_event.EventType" ItemCollection="_eventTypes" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudDatePicker T="DateTime" Label="When" Required Date="@_date" DateChanged="date => _date = date ?? DateTime.Today" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6" md="4">
                <MudTooltip Text="Letter will not show in the Events List, but will be displayed in Attendance List">
                    <MudSwitch T="bool" Label="Hidden" Color="@Color.Secondary" UncheckedColor="@Color.Success" @bind-Checked="@_event.IsHidden"/>
                </MudTooltip>
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string?" Label="Preregistration Notes" @bind-Value="@_event.Notes" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField T="int" Label="First Chronicle Cost" @bind-Value="@_event.EventCost" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField T="int" Label="Additional Chronicle Cost" @bind-Value="@_event.ChronicleCost" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"/>
            </MudItem>
        </MudGrid>

        <MudText Typo="Typo.h6">Letters</MudText>
        <MudDataGrid T="EventLetter" Items="_letters" EditMode="DataGridEditMode.Cell" ReadOnly="false" Dense>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Letter Name" IsEditable>
                    <EditTemplate>
                        <MudSelect T="string" @bind-Value="@context.Item.Name">
                            <MudSelectItem T="string" Value="@("PreEvent")">Pre-event</MudSelectItem>
                            <MudSelectItem T="string" Value="@("PostEvent")">Post-event</MudSelectItem>
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.LetterTemplateId" Title="Letter Template" IsEditable>
                    <EditTemplate>
                        <MudSelect T="string" @bind-Value="@context.Item.LetterTemplateId">
                            @foreach (var item in _letterTemplates)
                            {
                                <MudSelectItem T="string" Value="@item.Key">@item.Value.Title</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.IsOpen" Title="Is Letter Open" IsEditable>
                    <EditTemplate>
                        <MudSwitch Color="Color.Success" UnCheckedColor="Color.Secondary" @bind-Checked="@context.Item.IsOpen">Is Open</MudSwitch>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn T="EventLetter" IsEditable="false">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveLetter(context.Item)"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <div>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddLetter">Add Letter</MudButton>
        </div>

        <MudText Typo="Typo.h6">Components</MudText>
        <MudDataGrid T="EventComponent" Items="_components" EditMode="DataGridEditMode.Cell" ReadOnly="false" Dense>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Preregistration ID" IsEditable/>
                <PropertyColumn Property="x => x.Name" Title="Component Name" IsEditable/>
                <PropertyColumn Property="x => x.When" Title="When" Format="dddd, MMM d, yyyy" IsEditable>
                    <EditTemplate>
                        <MudDatePicker T="DateTime" Required Date="@context.Item.When" DateChanged="date => context.Item.When = date ?? DateTime.Today" Variant="Variant.Outlined"/>
                    </EditTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.IsFree" Title="Free" IsEditable>
                    <EditTemplate>
                        <MudSwitch T="bool" Required Color="Color.Success" UnCheckedColor="Color.Warning" @bind-Checked="@context.Item.IsFree"/>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn T="EventComponent" IsEditable="false">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveComponent(context.Item)"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <div>
            <MudButtonGroup OverrideStyles="false">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponent">Add Component</MudButton>
                <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponentF123">Add F123</MudButton>
                <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponent1">Add Halves</MudButton>
            </MudButtonGroup>
        </div>

        <MudText Typo="Typo.h6">Attendance</MudText>
        <EventAttendanceComponent EventsAndLetters="_result"/>
    </MudStack>
</AdminLayout>

@code {

    [Parameter]
    public string EventId { get; set; } = default!;

    private class EventComponent
    {
        public string Id { get; set; } = default!;
        public string Name { get; set; } = default!;
        public DateTime When { get; set; }
        public bool IsFree { get; set; }

        public Larp.Data.EventComponent ToComponent() => new()
        {
            ComponentId = Id,
            Date = DateOnly.FromDateTime(When),
            Name = Name,
            Free = IsFree
        };
    }

    private Event _event = default!;
    private List<EventComponent> _components = new();
    private List<EventLetter> _letters = new();
    private readonly string[] _eventTypes = { "Game", "Workday", "Subscription", "Contest", "Other" };
    private DateTime _date;
    private Dictionary<string, LetterTemplate> _letterTemplates = default!;
    private EventsAndLetters _result = default!;

    protected override async Task OnSafeParametersSetAsync()
    {
        _result = await LandingService.Admin.GetEventLetters(EventId);
        _event = _result.Events.Values.First();
        _date = _event.Date.ToDateTime(TimeOnly.MinValue);
        _letters = new List<EventLetter>(_event.LetterTemplates);
        _components = _event.Components
            .Select(x => new EventComponent
            {
                Id = x.ComponentId,
                Name = x.Name ?? "No Name",
                When = x.Date.ToDateTime(TimeOnly.MinValue),
                IsFree = x.Free
            })
            .ToList();
    }

    protected override async Task OnSafeInitializedAsync()
    {
        _letterTemplates = (await LandingService.Admin.GetLetterTemplateNames())
            .ToDictionary(x => x.LetterTemplateId);
    }

    private async Task Save()
    {
        await LoadingActionAsync(async () =>
        {
            _event.Date = DateOnly.FromDateTime(_date);
            _event.LetterTemplates = _letters.DistinctBy(x => x.Name)
                .ToArray();
            _event.Components = _components
                .Select(x => x.ToComponent())
                .ToArray();
            await LandingService.Admin.SaveEvent(EventId, _event);
        });
    }

    private async Task Delete()
    {
        var result = await DialogService.ShowMessageBox("Delete event", "Are you sure you want to delete this event?", "Yes, Delete It", "No, Keep It");
        if (result == true)
        {
            await SafeActionAsync(async () =>
            {
                await LandingService.Admin.DeleteEvent(EventId);
                NavigationManager.NavigateTo("/admin/events");
            });
        }
    }

    private async Task DownloadLetters()
    {
        await SafeActionAsync(async () =>
        {
            var file = await LandingService.Admin.ExportLetters(EventId);
            var fileStream = file.CreateReadStream();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await Js.InvokeVoidAsync("downloadFileFromStream", $"larp-landing-export-{DateTime.Now:yyyy-MM-dd}.xlsx", streamRef);
        });
    }

    private void AddComponent()
    {
        _components.Add(new EventComponent() { Id = "C", Name = "New Component", When = _date });
    }

    private void AddComponentF123()
    {
        _components.Add(new EventComponent() { Id = "F", Name = "Friday", When = _date, IsFree = true });
        _components.Add(new EventComponent() { Id = "1", Name = "Chronicle 1", When = _date.AddDays(1) });
        _components.Add(new EventComponent() { Id = "2", Name = "Chronicle 2", When = _date.AddDays(1) });
        _components.Add(new EventComponent() { Id = "3", Name = "Chronicle 3", When = _date.AddDays(2) });
    }

    private void AddComponent1()
    {
        _components.Add(new EventComponent() { Id = "1", Name = "First Half", When = _date });
        _components.Add(new EventComponent() { Id = "2", Name = "Second Half", When = _date });
    }

    private void RemoveComponent(EventComponent contextItem) =>
        _components.Remove(contextItem);

    private void AddLetter()
    {
        var name = _letters.Any(x => x.Name == "PreEvent") ? "PostEvent" : "PreEvent";
        _letters.Add(new EventLetter()
        {
            Name = name,
            LetterTemplateId = _letterTemplates.First().Key,
            IsOpen = false
        });
    }

    private void RemoveLetter(EventLetter contextItem) =>
        _letters.Remove(contextItem);

    private void Preregistration()
    {
        NavigationManager.NavigateTo($"/admin/events/{EventId}/preregistration");
    }

}