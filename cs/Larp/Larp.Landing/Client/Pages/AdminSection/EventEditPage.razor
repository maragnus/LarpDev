@page "/admin/events/{EventId}"
@inject LandingService LandingService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime JS

<AdminLayout Loading="_isLoading" Title="Edit Event">
    <MudStack Spacing="4">

        <MudButtonGroup OverrideStyles="false">
            <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="Save">Save</MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="Delete">Delete</MudButton>
            <MudButton Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download" OnClick="DownloadLetters">Download</MudButton>
        </MudButtonGroup>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField T="string?" Label="Title" Required @bind-Value="@_event.Title" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string?" Label="Location" @bind-Value="@_event.Location" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelectExtended T="string?" Label="Event Type" Required @bind-Value="@_event.EventType" ItemCollection="_eventTypes" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudDatePicker T="DateTime" Label="When" Required Date="@_date" DateChanged="date => _date = date ?? DateTime.Today" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6" md="4">
                <MudTooltip Text="Letter will not show in the Events List, but will be displayed in Attendance List">
                    <MudSwitch T="bool" Label="Hidden" Color="@Color.Secondary" UncheckedColor="@Color.Success" @bind-Checked="@_event.IsHidden"/>
                </MudTooltip>
            </MudItem>
        </MudGrid>

        <MudText Typo="Typo.h6">Letters</MudText>
        <MudDataGrid T="EventLetter" Items="_letters" EditMode="DataGridEditMode.Cell" ReadOnly="false" Dense>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Letter Name" IsEditable>
                    <EditTemplate>
                        <MudSelect T="string" @bind-Value="@context.Item.Name">
                            <MudSelectItem T="string" Value="@("PreEvent")">Pre-event</MudSelectItem>
                            <MudSelectItem T="string" Value="@("PostEvent")">Post-event</MudSelectItem>
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.LetterTemplateId" Title="Letter Template" IsEditable>
                    <EditTemplate>
                        <MudSelect T="string" @bind-Value="@context.Item.LetterTemplateId">
                            @foreach (var item in _letterTemplates)
                            {
                                <MudSelectItem T="string" Value="@item.Key">@item.Value.Title</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.IsOpen" Title="Is Letter Open" IsEditable>
                    <EditTemplate>
                        <MudSwitch Color="Color.Success" UnCheckedColor="Color.Secondary" @bind-Checked="@context.Item.IsOpen">Is Open</MudSwitch>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn T="EventLetter" IsEditable="false">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveLetter(context.Item)"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <div>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddLetter">Add Letter</MudButton>
        </div>

        <MudText Typo="Typo.h6">Components</MudText>
        <MudDataGrid T="EventComponent" Items="_components" EditMode="DataGridEditMode.Cell" ReadOnly="false" Dense>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Component Name" IsEditable/>
                <PropertyColumn Property="x => x.When" Title="When" Format="dddd, MMM d, yyyy" IsEditable>
                    <EditTemplate>
                        <MudDatePicker T="DateTime" Required Date="@context.Item.When" DateChanged="date => context.Item.When = date ?? DateTime.Today" Variant="Variant.Outlined"/>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn T="EventComponent" IsEditable="false">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveComponent(context.Item)"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <div>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponent">Add Component</MudButton>
        </div>

        <MudText Typo="Typo.h6">Attendance</MudText>
        <EventAttendanceComponent EventsAndLetters="_result"/>
    </MudStack>
</AdminLayout>

@code {

    [Parameter]
    public string EventId { get; set; } = default!;

    private class EventComponent
    {
        public string Id { get; set; } = default!;
        public string Name { get; set; } = default!;
        public DateTime When { get; set; }

        public Larp.Data.EventComponent ToComponent() => new()
        {
            ComponentId = Id,
            Date = DateOnly.FromDateTime(When),
            Name = Name,
        };
    }

    bool _isLoading = true;
    private Event _event = default!;
    private List<EventComponent> _components = new();
    private List<EventLetter> _letters = new();
    private readonly string[] _eventTypes = { "Game", "Workday", "Subscription", "Contest", "Other" };
    private Dictionary<string, string?> _games = new();
    private DateTime _date;
    private Dictionary<string, LetterTemplate> _letterTemplates = default!;
    private EventsAndLetters _result = default!;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        StateHasChanged();

        _result = await LandingService.Admin.GetEventLetters(EventId);
        _event = _result.Events.Values.First();
        _letters = new List<EventLetter>(_event.LetterTemplates);
        _components = _event.Components
            .Select(x => new EventComponent { Id = x.ComponentId, Name = x.Name ?? "No Name", When = x.Date.ToDateTime(TimeOnly.MinValue) })
            .ToList();
        _date = _event.Date.ToDateTime(TimeOnly.MinValue);
        _isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _letterTemplates = (await LandingService.Admin.GetLetterTemplateNames())
            .ToDictionary(x => x.LetterTemplateId);
        _games = LandingService.Games
            .ToDictionary(x => x.Value.Id, x => x.Value.Title);
    }

    private async Task Save()
    {
        await this.AsyncAction(x => x._isLoading, async () =>
        {
            _event.Date = DateOnly.FromDateTime(_date);
            _event.LetterTemplates = _letters.DistinctBy(x => x.Name)
                .ToArray();
            _event.Components = _components
                .Select(x => x.ToComponent())
                .ToArray();
            await LandingService.Admin.SaveEvent(EventId, _event);
        });
    }

    private async Task Delete()
    {
        var result = await DialogService.ShowMessageBox("Delete event", "Are you sure you want to delete this event?", "Yes, Delete It", "No, Keep It");
        if (result == true)
        {
            await LandingService.Admin.DeleteEvent(EventId);
            NavigationManager.NavigateTo("/admin/events");
        }
    }

    private async Task DownloadLetters()
    {
        var file = await LandingService.Admin.ExportLetters(EventId);
        var fileStream = file.CreateReadStream();
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", $"larp-landing-export-{DateTime.Now:yyyy-MM-dd}.xlsx", streamRef);
    }

    private void AddComponent()
    {
        _components.Add(new EventComponent() { Name = "New Component", When = _date });
    }

    private void RemoveComponent(EventComponent contextItem) =>
        _components.Remove(contextItem);

    private void AddLetter()
    {
        var name = _letters.Any(x => x.Name == "PreEvent") ? "PostEvent" : "PreEvent";
        _letters.Add(new EventLetter()
        {
            Name = name,
            LetterTemplateId = _letterTemplates.First().Key,
            IsOpen = false
        });
    }

    private void RemoveLetter(EventLetter contextItem) =>
        _letters.Remove(contextItem);

}