@page "/admin/events/{EventId}"
@using MudBlazor.Utilities
@using System.ComponentModel.DataAnnotations
@inherits LarpPage

@inject LandingService LandingService
@inject IJSRuntime Js

<NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="BeforeNavigation"/>

<AdminLayout Loading="IsLoading" Title="Edit Event">
    <MudStack Spacing="4">

        <MudButtonGroup OverrideStyles="false">
            <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="Save" Disabled="_hasEventChanges">Save</MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="Delete">Delete</MudButton>
            <MudButton Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download" OnClick="DownloadLetters">Download</MudButton>
            <MudButton Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Print" OnClick="Preregistration">Preregistration</MudButton>
        </MudButtonGroup>
        <EditForm T="EventModel" EditContext="_editContext" OnValidSubmit="SubmitEvent">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string?" Label="Title" @bind-Value="@_model.Title" Required Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string?" Label="Location" @bind-Value="@_model.Location" Required Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudSelectExtended T="string?" Label="Event Type" @bind-Value="@_model.EventType" Required ItemCollection="_eventTypes" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudDatePicker T="DateTime" Label="When" @bind-Date="@_model.Date" Required Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="6" md="4">
                    <MudSelect T="bool" Label="Visible" @bind-Value="@_model.Hidden" Variant="Variant.Outlined">
                        <MudSelectItem T="bool" Value="@true">Hidden</MudSelectItem>
                        <MudSelectItem T="bool" Value="@false">Visible</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="12" lg="6">
                    <MudTextField T="string?" Label="Preregistration Notes" Lines="3" @bind-Value="@_model.PreregistrationNotes" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" md="12" lg="6">
                    <MudTextField T="string?" Label="Administrative Notes" Lines="3" @bind-Value="@_model.AdminNotes" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField T="int" Label="First Chronicle Cost" @bind-Value="@_model.EventCost" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField T="int" Label="Additional Chronicle Cost" @bind-Value="@_model.ChronicleCost" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"/>
                </MudItem>

                <MudItem xs="6" md="4">
                    <MudStack Row Spacing="4">
                        <MudSelect T="string" Label="Pre-Event Letter" @bind-Value="@_model.PreEventLetter" Clearable>
                            @foreach (var item in _letterTemplates)
                            {
                                <MudSelectItem T="string" Value="@item.Key">@item.Value.Title</MudSelectItem>
                            }
                        </MudSelect>
                        <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Start">
                            <MudText Typo="Typo.caption">Open</MudText>
                            <MudSwitch Color="Color.Success" UnCheckedColor="Color.Secondary" @bind-Checked="@_model.PreEventLetterOpen"/>
                        </MudStack>
                    </MudStack>
                </MudItem>
                <MudItem xs="6" md="4">
                    <MudStack Row Spacing="4">
                        <MudSelect T="string" Label="Post-Event Letter" @bind-Value="@_model.PostEventLetter" Clearable>
                            @foreach (var item in _letterTemplates)
                            {
                                <MudSelectItem T="string" Value="@item.Key">@item.Value.Title</MudSelectItem>
                            }
                        </MudSelect>
                        <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Start">
                            <MudText Typo="Typo.caption">Open</MudText>
                            <MudSwitch Color="Color.Success" UnCheckedColor="Color.Secondary" @bind-Checked="@_model.PostEventLetterOpen"/>
                        </MudStack>
                    </MudStack>
                </MudItem>
                <MudItem xs="6" md="4">
                    <MudStack Row Spacing="4">
                        <MudSelect T="string" Label="Between-Event Letter" @bind-Value="@_model.BetweenEventLetter" Clearable>
                            @foreach (var item in _letterTemplates)
                            {
                                <MudSelectItem T="string" Value="@item.Key">@item.Value.Title</MudSelectItem>
                            }
                        </MudSelect>
                        <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Start">
                            <MudText Typo="Typo.caption">Open</MudText>
                            <MudSwitch Color="Color.Success" UnCheckedColor="Color.Secondary" @bind-Checked="@_model.BetweenEventLetterOpen"/>
                        </MudStack>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudText Typo="Typo.h6">Components</MudText>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudDataGrid T="EventComponent" Items="_components" EditMode="DataGridEditMode.Cell" ReadOnly="false" Dense FormFieldChanged="ComponentFieldChanged">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Preregistration ID" IsEditable/>
                    <PropertyColumn Property="x => x.Name" Title="Component Name" IsEditable/>
                    <PropertyColumn Property="x => x.When" Title="When" Format="dddd, MMM d, yyyy" IsEditable>
                        <EditTemplate>
                            <MudDatePicker T="DateTime" Required Date="@context.Item.When" DateChanged="date => context.Item.When = date ?? DateTime.Today" Variant="Variant.Outlined"/>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.IsFree" Title="Free" IsEditable>
                        <EditTemplate>
                            <MudSwitch T="bool" Required Color="Color.Success" UnCheckedColor="Color.Warning" @bind-Checked="@context.Item.IsFree"/>
                        </EditTemplate>
                    </PropertyColumn>
                    <TemplateColumn T="EventComponent" IsEditable="false">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveComponent(context.Item)"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudContainer>
        <div>
            <MudButtonGroup OverrideStyles="false">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponent">Add Component</MudButton>
                <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponentF123">Add F123</MudButton>
                <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponent1">Add Halves</MudButton>
            </MudButtonGroup>
        </div>

        <MudText Typo="Typo.h6">Attendance</MudText>
        <EventAttendanceComponent @ref="_attendanceComponent" EventsAndLetters="_result" @bind-HasChanges="_hasChanges"/>
    </MudStack>
</AdminLayout>

@code {

    [Parameter]
    public string EventId { get; set; } = default!;

    private readonly EventModel _model = new();
    private EditContext _editContext = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _editContext = new EditContext(_model);
        _editContext.OnFieldChanged += FieldChanged;
    }

    public class EventModel
    {
        [Required]
        public string? Title { get; set; }

        [Required]
        public string? Location { get; set; }

        [Required]
        public string? EventType { get; set; }

        [Required]
        public DateTime? Date { get; set; }

        public bool Hidden { get; set; }

        public string? PreregistrationNotes { get; set; }
        public string? AdminNotes { get; set; }

        public int EventCost { get; set; }
        public int ChronicleCost { get; set; }

        public string? PreEventLetter { get; set; }
        public string? PostEventLetter { get; set; }
        public string? BetweenEventLetter { get; set; }

        public bool PreEventLetterOpen { get; set; }
        public bool PostEventLetterOpen { get; set; }
        public bool BetweenEventLetterOpen { get; set; }

        public void Load(Event e)
        {
            Title = e.Title;
            Location = e.Location;
            EventType = e.EventType;
            Date = e.Date.ToDateTime(TimeOnly.MinValue);
            Hidden = e.IsHidden;
            PreregistrationNotes = e.PreregistrationNotes;
            AdminNotes = e.AdminNotes;
            EventCost = e.EventCost;
            ChronicleCost = e.ChronicleCost;
            var preEvent = e.LetterTemplates.FirstOrDefault(letter => letter.Name == "PreEvent");
            PreEventLetter = preEvent?.LetterTemplateId;
            PreEventLetterOpen = preEvent?.IsOpen ?? false;
            var postEvent = e.LetterTemplates.FirstOrDefault(letter => letter.Name == "PostEvent");
            PostEventLetter = postEvent?.LetterTemplateId;
            PostEventLetterOpen = postEvent?.IsOpen ?? false;
            var betweenEvent = e.LetterTemplates.FirstOrDefault(letter => letter.Name == "BetweenEvent");
            BetweenEventLetter = betweenEvent?.LetterTemplateId;
            BetweenEventLetterOpen = betweenEvent?.IsOpen ?? false;
        }
    }

    private class EventComponent
    {
        public string Id { get; set; } = default!;
        public string Name { get; set; } = default!;
        public DateTime When { get; set; }
        public bool IsFree { get; set; }

        public Larp.Data.EventComponent ToComponent() => new()
        {
            ComponentId = Id,
            Date = DateOnly.FromDateTime(When),
            Name = Name,
            Free = IsFree
        };
    }

    private Event _event = default!;
    private List<EventComponent> _components = new();
    private List<EventLetter> _letters = new();
    private readonly string[] _eventTypes = { "Game", "Workday", "Subscription", "Contest", "Other" };
    private DateTime _date;
    private Dictionary<string, LetterTemplate> _letterTemplates = default!;
    private EventsAndLetters _result = default!;
    private EventAttendanceComponent? _attendanceComponent;
    private bool _hasChanges;
    private bool _hasEventChanges;

    protected override async Task OnSafeParametersSetAsync()
    {
        _result = await LandingService.Admin.GetEventLetters(EventId);
        _event = _result.Events.Values.First();
        _date = _event.Date.ToDateTime(TimeOnly.MinValue);
        _letters = new List<EventLetter>(_event.LetterTemplates);
        _components = _event.Components
            .Select(x => new EventComponent
            {
                Id = x.ComponentId,
                Name = x.Name ?? "No Name",
                When = x.Date.ToDateTime(TimeOnly.MinValue),
                IsFree = x.Free
            })
            .ToList();

        _model.Load(_event);
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        _hasEventChanges = true;
        StateHasChanged();
    }

    protected override async Task OnSafeInitializedAsync()
    {
        _letterTemplates = (await LandingService.Admin.GetLetterTemplateNames())
            .ToDictionary(x => x.LetterTemplateId);
    }

    private async Task BeforeNavigation(LocationChangingContext arg)
    {
        if (!_hasChanges && !_editContext.IsModified()) return;

        var response = await DialogService.ShowMessageBox("Unsaved Changes", "You have unsaved changes. Are you sure you want to leave without saving?", "Yes, Save", "No, Discard Changes", "Cancel, Continue Working");
        switch (response)
        {
            case null:
                arg.PreventNavigation();
                break;
            case true:
                await Save();
                await _attendanceComponent.SaveAll();
                break;
            case false:
                break;
        }
    }

    private async Task Save()
    {
        await SubmitEvent(_editContext!);
    }

    private async Task SubmitEvent(EditContext obj)
    {
        await LoadingActionAsync(async () =>
        {
            _event.Date = DateOnly.FromDateTime(_date);
            _event.LetterTemplates = _letters.DistinctBy(x => x.Name)
                .ToArray();
            _event.Components = _components
                .Select(x => x.ToComponent())
                .ToArray();
            await LandingService.Admin.SaveEvent(EventId, _event);
            _editContext.MarkAsUnmodified();
            _hasEventChanges = false;
            StateHasChanged();
        });
    }

    private async Task Delete()
    {
        var result = await DialogService.ShowMessageBox("Delete event", "Are you sure you want to delete this event?", "Yes, Delete It", "No, Keep It");
        if (result == true)
        {
            await SafeActionAsync(async () =>
            {
                await LandingService.Admin.DeleteEvent(EventId);
                NavigationManager.NavigateTo("/admin/events");
            });
        }
    }

    private async Task DownloadLetters()
    {
        await SafeActionAsync(async () =>
        {
            var file = await LandingService.Admin.ExportLetters(EventId);
            var fileStream = file.CreateReadStream();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await Js.InvokeVoidAsync("downloadFileFromStream", $"larp-landing-export-{DateTime.Now:yyyy-MM-dd}.xlsx", streamRef);
        });
    }

    private void AddComponent()
    {
        _components.Add(new EventComponent() { Id = "C", Name = "New Component", When = _date });
    }

    private void AddComponentF123()
    {
        _components.Add(new EventComponent() { Id = "F", Name = "Friday", When = _date, IsFree = true });
        _components.Add(new EventComponent() { Id = "1", Name = "Chronicle 1", When = _date.AddDays(1) });
        _components.Add(new EventComponent() { Id = "2", Name = "Chronicle 2", When = _date.AddDays(1) });
        _components.Add(new EventComponent() { Id = "3", Name = "Chronicle 3", When = _date.AddDays(2) });
    }

    private void AddComponent1()
    {
        _components.Add(new EventComponent() { Id = "1", Name = "First Half", When = _date });
        _components.Add(new EventComponent() { Id = "2", Name = "Second Half", When = _date });
    }

    private void RemoveComponent(EventComponent contextItem) =>
        _components.Remove(contextItem);

    private void AddLetter()
    {
        var name = _letters.All(x => x.Name != "PreEvent")
            ? "PreEvent"
            : _letters.All(x => x.Name != "PostEvent")
                ? "PostEvent"
                : "BetweenEvent";
        _letters.Add(new EventLetter()
        {
            Name = name,
            LetterTemplateId = _letterTemplates.First().Key,
            IsOpen = false
        });
    }

    private void RemoveLetter(EventLetter contextItem) =>
        _letters.Remove(contextItem);

    private void Preregistration()
    {
        NavigationManager.NavigateTo($"/admin/events/{EventId}/preregistration");
    }

    private Task ComponentFieldChanged(FormFieldChangedEventArgs arg)
    {
        throw new NotImplementedException();
    }

}