@page "/admin/mw5e/characters"

@using Larp.Landing.Shared
@inject LandingService LandingService
@inject NavigationManager NavigationManager

<PageHeader>Mystwood 5e Characters</PageHeader>

<AdminLayout Title="Manage Characters" Loading="_isLoading">
    <div class="pa-2 mb-4">
        <EditForm Model="_search" OnSubmit="Search">
            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Start">
                <MudTextField T="string?" OnlyValidateIfDirty Clearable Variant="Variant.Filled" Placeholder="Search" Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Outlined.Search" For="() => _search.Query" @bind-Value="_search.Query" OnAdornmentClick="Search"/>
            </MudStack>
        </EditForm>
    </div>

    <MudDataGrid T="CharacterAccountSummary" Items="_items" RowClick="RowClick" Dense Groupable Hover Loading="_isLoading">
        <Columns>
            <PropertyColumn Property="x => x.CharacterName" Title="Character Name"/>
            <PropertyColumn Property="x => x.AccountName" Title="Player Name"/>
            <PropertyColumn Property="x => x.HomeChapter" Title="Home Chapter"/>
            <PropertyColumn Property="x => x.Occupation" Title="Occupation"/>
            <PropertyColumn Property="x => x.Level" Title="Level"/>
        </Columns>
    </MudDataGrid>
</AdminLayout>

@code {
    private bool _isLoading = true;
    private CharacterAccountSummary[] _allItems = Array.Empty<CharacterAccountSummary>();
    private CharacterAccountSummary[] _items = Array.Empty<CharacterAccountSummary>();

    protected override async Task OnInitializedAsync()
    {
        _allItems = await LandingService.Admin.GetMwFifthCharacters(CharacterState.Live);
        _items = _allItems;
        _isLoading = false;
    }

    private static bool SearchFunc(CharacterAccountSummary item, string query) =>
        (item.CharacterName?.Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false)
        || (item.AccountName?.Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false)
        || (item.AccountEmails?.Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false);

    private readonly SearchModel _search = new();

    class SearchModel
    {
        public string? Query { get; set; }
    }

    private void Search()
    {
        var query = _search.Query;
        if (string.IsNullOrWhiteSpace(query))
            _items = _allItems;
        else
            _items = _allItems.Where(x => SearchFunc(x, query)).ToArray();
        StateHasChanged();
    }

    private void RowClick(DataGridRowClickEventArgs<CharacterAccountSummary> item)
    {
        NavigationManager.NavigateTo("/admin/mw5e/characters/" + item.Item.CharacterId);
    }

}