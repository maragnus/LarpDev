@page "/admin/mw5e/characters/{CharacterId}"
@inherits LarpPage

@using Larp.Landing.Client.Pages.MwFifth
@using Larp.Landing.Shared.MwFifth
@inject LandingService LandingService
@inject NavigationManager NavigationManager

<PageHeader>Mystwood 5e Characters</PageHeader>

<AdminLayout Title="Review Character">
    <MudButtonGroup Variant="Variant.Filled" Class="mb-4" OverrideStyles="false">
        <MudButton StartIcon="@Icons.Material.Filled.AccountCircle" Variant="Variant.Filled" OnClick="GoToAccount">Player</MudButton>
        @if (_state is CharacterState.Draft)
        {
            <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Warning" OnClick="EditCharacter">Edit</MudButton>
        }
        @if (_state is CharacterState.Live)
        {
            <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Warning" OnClick="ReviseCharacter">Revise</MudButton>
        }
        @if (_state == CharacterState.Review)
        {
            <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Warning" OnClick="EditCharacter">Edit</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Verified" OnClick="Approve" Variant="Variant.Filled" Color="Color.Success">Approve</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Undo" OnClick="Reject" Variant="Variant.Filled" Color="Color.Error">Reject</MudButton>
        }
        <MudButton StartIcon="@Icons.Material.Filled.Undo" OnClick="Move" Variant="Variant.Filled" Color="Color.Secondary">Move</MudButton>
    </MudButtonGroup>

    @if (IsLoading || _characterBuilder == null)
    {
        <MudAlert Severity="@Severity.Normal">Loading... <MudProgressLinear Indeterminate/></MudAlert>
    }
    else
    {
        <MudAlert Severity="@Statuses[_characterBuilder!.Revision.State].Severity">
            @Statuses[_characterBuilder.Revision.State].Description
        </MudAlert>
    }
    
    <MudText Typo="Typo.h6" Class="my-4">Notes</MudText>
    <MudPaper Class="pa-4">
        <MudTextField T="string?" Variant="Variant.Outlined" Lines="2" Label="Preregistration Notes" @bind-Value="@_character.PreregistrationNotes" 
                      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Save" AdornmentColor="Color.Success" OnAdornmentClick="SaveNotes" />
    </MudPaper>

    @if (_revisions.Length > 0)
    {
        <MudText Typo="Typo.h6" Class="my-4">Revisions</MudText>

        <div class="relative">
            <MudDataGrid T="CharacterRevision" Items="_revisions" Hover Dense ReadOnly SortMode="SortMode.None">
                <PagerContent>
                    <MudDataGridPager T="CharacterRevision"/>
                </PagerContent>
                <ChildRowContent>
                    <Mw5eChangeSummary Revision="@context.Item"></Mw5eChangeSummary>
                </ChildRowContent>
                <Columns>
                    <HierarchyColumn T="CharacterRevision" ButtonDisabledFunc="@(x => x.ChangeSummary?.Count == 0)"/>
                    <TemplateColumn T="CharacterRevision" Title="Name">
                        <CellTemplate>
                            @if (context.Item.RevisionId == CharacterId)
                            {
                                <MudText Color="Color.Primary">
                                    <strong>@context.Item.CharacterName</strong>
                                </MudText>
                            }
                            else
                            {
                                @context.Item.CharacterName
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.CreatedOn" Format="MMM d, yyyy" Title="Created"/>
                    <TemplateColumn T="CharacterRevision" Title="Submitted">
                        <CellTemplate>@DisplayDateTime(context.Item.SubmittedOn)</CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="CharacterRevision" Title="Approved">
                        <CellTemplate>@DisplayDateTime(context.Item.ApprovedOn)</CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Level" Title="Level"/>
                    <PropertyColumn Property="x => x.TotalMoonstone" Title="Moonstone"/>
                    <TemplateColumn T="CharacterRevision">
                        <CellTemplate>
                            <MudStack Row>
                                @switch (context.Item.State)
                                {
                                    case CharacterState.Archived:
                                        <MudChip Size="Size.Small" Color="Color.Error">Archived</MudChip>
                                        break;
                                    case CharacterState.Live:
                                        <MudChip Size="Size.Small" Color="Color.Success">Live</MudChip>
                                        break;
                                    case CharacterState.Review:
                                        <MudChip Size="Size.Small" Color="@Color.Warning">Review</MudChip>
                                        break;
                                    case CharacterState.Draft:
                                        <MudChip Size="Size.Small" Color="@Color.Info">Draft</MudChip>
                                        break;
                                }
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="CharacterRevision">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="() => OpenCharacter(context.Item.RevisionId)"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </div>
    }

    <MudText Typo="Typo.h6" Class="mt-4">Character Sheet</MudText>
    <div class="mt-4 relative">
        <MudOverlay Visible="IsLoading" DarkBackground Absolute>
            <MudProgressLinear Indeterminate/>
        </MudOverlay>
        @if (_characterBuilder != null)
        {
            <MudStack Row AlignItems="AlignItems.Start" Class="my-4">
                <MudTooltip Text="Total Moonstone the player has earned">
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudAvatar Color="Color.Primary">@_moonstone.Total</MudAvatar>
                        <MudText Align="Align.Center" Typo="Typo.caption">Player's Total<br/>Moonstone</MudText>
                    </MudStack>
                </MudTooltip>
                <MudTooltip Text="The amount of moonstone available to this player">
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudAvatar Color="Color.Success">@_moonstone.Available</MudAvatar>
                        <MudText Align="Align.Center" Typo="Typo.caption">Available<br/>Moonstone</MudText>
                    </MudStack>
                </MudTooltip>
                <MudTooltip Text="The amount of moonstone allocated for this character">
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudAvatar Color="Color.Info">@_moonstoneUsed</MudAvatar>
                        <MudText Align="Align.Center" Typo="Typo.caption">Total<br/>Moonstone</MudText>
                    </MudStack>
                </MudTooltip>
                <MudTooltip Text="The amount of moonstone needed for this revision">
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudAvatar Color="Color.Warning">@(_newMoonstoneCost > 0 ? "+" : "")@(_newMoonstoneCost)</MudAvatar>
                        <MudText Align="Align.Center" Typo="Typo.caption">Revision<br/>Cost</MudText>
                    </MudStack>
                </MudTooltip>

                @if (_moonstone.Available < _newMoonstoneCost)
                {
                    <MudAlert Severity="Severity.Error">
                        This player is short <strong>@(_newMoonstoneCost - _moonstone.Available) Moonstone</strong>
                    </MudAlert>
                }
            </MudStack>
            <CharacterSheet Character="_characterBuilder" Admin/>
        }
    </div>
</AdminLayout>

@code {

    private string DisplayDateTime(DateTimeOffset? value) =>
        value.HasValue ? value.Value.LocalDateTime.ToString("MMM d, yyyy") : "Not Set";

    private static readonly Dictionary<CharacterState, (string Description, Severity Severity)> Statuses = new()
    {
        { CharacterState.Archived, ("Character sheet has been archived", Severity.Error) },
        { CharacterState.Review, ("Character sheet is waiting for review", Severity.Warning) },
        { CharacterState.Live, ("Character sheet is live", Severity.Success) },
        { CharacterState.Draft, ("Character sheet is drafting a character revision", Severity.Info) },
    };

    [Parameter]
    public string CharacterId { get; set; } = default!;

    CharacterState _state;
    Character _character = new Character();
    CharacterBuilder? _characterBuilder;

    private CharacterRevision[] _revisions = Array.Empty<CharacterRevision>();
    private MoonstoneInfo _moonstone = new();
    private int _moonstoneUsed;
    private int _newMoonstoneCost;

    protected override async Task OnSafeParametersSetAsync()
    {
        var character = await LandingService.Admin.GetMwFifthCharacter(CharacterId);
        _character = character.Character;
        _characterBuilder = new CharacterBuilder(character, LandingService.MwFifthGameState, Logger);
        _moonstone = character.Moonstone;
        _moonstoneUsed = character.Revision.GiftMoonstone + character.Revision.SkillMoonstone;
        _newMoonstoneCost = _moonstoneUsed - character.Character.UsedMoonstone;
        _state = character.Revision.State;
    }

    protected override async Task OnSafeInitializedAsync()
    {
        var character = await LandingService.Admin.GetMwFifthCharacter(CharacterId);
        _characterBuilder = new CharacterBuilder(character, LandingService.MwFifthGameState, Logger);
        var revisions = await LandingService.Admin.GetMwFifthCharacterRevisions(CharacterId);
        _revisions = revisions.CharacterRevisions;
        Array.Reverse(_revisions);
        _state = character.Revision.State;
    }

    private void GoToAccount()
    {
        NavigationManager.NavigateTo($"/admin/accounts/{_characterBuilder?.Revision.AccountId}");
    }

    private void EditCharacter()
    {
        NavigationManager.NavigateTo($"/admin/mw5e/characters/{CharacterId}/edit");
    }

    private void OpenCharacter(string characterId)
    {
        NavigationManager.NavigateTo($"/admin/mw5e/characters/{characterId}");
    }

    private async Task Approve()
    {
        var result = await DialogService.ShowMessageBox(
            "Approve this character",
            "Are you ready to approve this character? This will make the changes live and contact the player that their changes have been approved.",
            "Yes, Approve",
            "No, Keep Editing");

        if (result != true) return;

        await LoadingActionAsync(async () =>
        {
            var characterId = _characterBuilder!.Revision.RevisionId;
            await LandingService.Admin.ApproveMwFifthCharacter(characterId);
            NavigationManager.NavigateTo($"/admin/mw5e/characters/{characterId}");
            await OnInitializedAsync();
            StateHasChanged();
        });
    }

    private async Task Reject()
    {
        var result = await DialogService.ShowMessageBox(
            "Return this character",
            "Are you ready to return this character to the player? This will return the character draft back to the player so they can edit it.",
            "Yes, Return It",
            "No, Keep Reviewing");

        if (result != true) return;

        await LoadingActionAsync(async () =>
        {
            var characterId = _characterBuilder!.Revision.RevisionId;
            await LandingService.Admin.RejectMwFifthCharacter(characterId);
            NavigationManager.NavigateTo($"/admin/mw5e/characters/{characterId}");
            await OnInitializedAsync();
        });
    }

    private async Task ReviseCharacter()
    {
        var character = await LandingService.Admin.ReviseMwFifthCharacter(CharacterId);
        NavigationManager.NavigateTo($"/admin/mw5e/characters/{character.Revision.RevisionId}/edit");
    }

    private async Task Move()
    {
        var dialog = await DialogService.ShowAsync<SelectAccountDialog>("Move Character to another Account", new DialogParameters { { nameof(SelectAccountDialog.ContentText), "Select the account that will be receiving this character." } });
        var result = await dialog.Result;
        if (result.Canceled) return;

        var newAccountId = (string)result.Data;
        if (newAccountId == _characterBuilder!.Character.AccountId) return;

        await LandingService.Admin.MoveMwFifthCharacter(_characterBuilder.Character.CharacterId, newAccountId);

        await OnParametersSetAsync();
        StateHasChanged();
    }

    private async Task SaveNotes()
    {
        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.SetMwFifthCharacterNotes(_character.CharacterId, _character.PreregistrationNotes);
        });
    }

}