@page "/admin/mw5e/characters/{CharacterId}"
@using Larp.Landing.Shared
@using Larp.Landing.Client.Pages.MwFifth
@using Larp.Landing.Shared.MwFifth
@inject LandingService LandingService
@inject ILogger<Mw5eCharacterPage> Logger
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageHeader>Mystwood 5e Characters</PageHeader>

<AdminLayout Title="Review Character">
    @if (_character == null)
    {
        <MudProgressCircular Indeterminate Size="Size.Large"/>
    }
    else
    {
        <MudButtonGroup Variant="Variant.Filled" Class="mb-4" OverrideStyles="false">
            <MudButton StartIcon="@Icons.Material.Filled.AccountCircle" Variant="Variant.Filled" OnClick="GoToAccount">Player</MudButton>
            @if (_state is CharacterState.Draft)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Warning" OnClick="EditCharacter">Edit</MudButton>
            }
            @if (_state is CharacterState.Live)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Warning" OnClick="ReviseCharacter">Revise</MudButton>
            }
            @if (_state == CharacterState.Review)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Warning" OnClick="EditCharacter">Edit</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Verified" OnClick="Approve" Variant="Variant.Filled" Color="Color.Success">Approve</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Undo" OnClick="Reject" Variant="Variant.Filled" Color="Color.Error">Reject</MudButton>
            }
        </MudButtonGroup>
        <MudAlert Severity="Statuses[_character.Character.State].Severity">
            @Statuses[_character.Character.State].Description
        </MudAlert>

        @if (_revisions.Length > 0)
        {
            <MudText Typo="Typo.h6" Class="mt-4">Revisions</MudText>

            <div class="relative">
                <MudDataGrid T="Character" Items="_revisions" Hover Dense ReadOnly SortMode="SortMode.None">
                    <PagerContent>
                        <MudDataGridPager T="Character"/>
                    </PagerContent>
                    <ChildRowContent>
                        <Mw5eChangeSummary Character="@context.Item"></Mw5eChangeSummary>
                    </ChildRowContent>
                    <Columns>
                        <HierarchyColumn T="Character" ButtonDisabledFunc="@(x => x.ChangeSummary?.Count == 0)"/>
                        <TemplateColumn T="Character" Title="Name">
                            <CellTemplate>
                                @if (context.Item.Id == CharacterId)
                                {
                                    <MudText Color="Color.Primary">
                                        <strong>@context.Item.CharacterName</strong>
                                    </MudText>
                                }
                                else
                                {
                                    @context.Item.CharacterName
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.CreatedOn" Format="MMM d, yyyy" Title="Created"/>
                        <TemplateColumn T="Character" Title="Submitted">
                            <CellTemplate>@DisplayDateTime(context.Item.SubmittedOn)</CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="Character" Title="Approved">
                            <CellTemplate>@DisplayDateTime(context.Item.ApprovedOn)</CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Level" Title="Level"/>
                        <TemplateColumn T="Character">
                            <CellTemplate>
                                <MudStack Row>
                                    @switch (context.Item.State)
                                    {
                                        case CharacterState.Archived:
                                            <MudChip Size="Size.Small" Color="Color.Error">Archived</MudChip>
                                            break;
                                        case CharacterState.Live:
                                            <MudChip Size="Size.Small" Color="Color.Success">Live</MudChip>
                                            break;
                                        case CharacterState.Review:
                                            <MudChip Size="Size.Small" Color="@Color.Warning">Review</MudChip>
                                            break;
                                        case CharacterState.Draft:
                                            <MudChip Size="Size.Small" Color="@Color.Info">Draft</MudChip>
                                            break;
                                    }
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="Character">
                            <CellTemplate>
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="() => OpenCharacter(context.Item.Id)"/>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </div>
        }

        <MudText Typo="Typo.h6" Class="mt-4">Character Sheet</MudText>
        <div class="mt-4">
            <CharacterSheet Character="_character"/>
        </div>
    }
</AdminLayout>

@code {

    private string DisplayDateTime(DateTime? value) =>
        value.HasValue ? value.Value.ToString("MMM d, yyyy") : "Not Set";

    private static readonly Dictionary<CharacterState, (string Description, Severity Severity)> Statuses = new()
    {
        { CharacterState.Archived, ("Character sheet has been archived", Severity.Error) },
        { CharacterState.Review, ("Character sheet is waiting for review", Severity.Warning) },
        { CharacterState.Live, ("Character sheet is live", Severity.Success) },
        { CharacterState.Draft, ("Character sheet is drafting a character revision", Severity.Info) },
    };

    [Parameter]
    public string CharacterId { get; set; } = null!;

    CharacterState _state;
    CharacterBuilder? _character;

    private CharacterAccountSummary[] _items = Array.Empty<CharacterAccountSummary>();
    private Character[] _revisions = Array.Empty<Character>();

    protected override async Task OnParametersSetAsync()
    {
        var character = await LandingService.Admin.GetMwFifthCharacter(CharacterId);
        _character = new CharacterBuilder(character, LandingService.MwFifth.GameState, Logger);
        _state = character.State;
    }

    protected override async Task OnInitializedAsync()
    {
        var character = await LandingService.Admin.GetMwFifthCharacter(CharacterId);
        _character = new CharacterBuilder(character, LandingService.MwFifth.GameState, Logger);
        _revisions = await LandingService.Admin.GetMwFifthCharacterRevisions(CharacterId);
        _state = character.State;
    }

    private void GoToAccount()
    {
        NavigationManager.NavigateTo($"/admin/accounts/{_character?.Character.AccountId}");
    }

    private void EditCharacter()
    {
        NavigationManager.NavigateTo($"/admin/mw5e/characters/{CharacterId}/edit");
    }

    private async Task OpenCharacter(string characterId)
    {
        NavigationManager.NavigateTo($"/admin/mw5e/characters/{characterId}");
    }

    private async Task Approve()
    {
        var result = await DialogService.ShowMessageBox(
            "Approve this character",
            "Are you ready to approve this character? This will make the changes live and contact the player that their changes have been approved.",
            "Yes, Approve",
            "No, Keep Editing");

        if (result != true) return;

        var characterId = _character!.Character.Id;
        await LandingService.Admin.ApproveMwFifthCharacter(characterId);
        NavigationManager.NavigateTo($"/admin/mw5e/characters/{characterId}");
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task Reject()
    {
        var result = await DialogService.ShowMessageBox(
            "Return this character",
            "Are you ready to return this character to the player? This will return the character draft back to the player so they can edit it.",
            "Yes, Return It",
            "No, Keep Reviewing");

        if (result != true) return;

        var characterId = _character!.Character.Id;
        await LandingService.Admin.RejectMwFifthCharacter(characterId);
        NavigationManager.NavigateTo($"/admin/mw5e/characters/{characterId}");
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task ReviseCharacter()
    {
        var character = await LandingService.Admin.ReviseMwFifthCharacter(CharacterId);
        NavigationManager.NavigateTo($"/admin/mw5e/characters/{character.Id}/edit");
    }

}