@using MongoDB.Driver.Linq
@inject LandingService LandingService
@inject IDialogService DialogService

<MudStack Row AlignItems="AlignItems.Center">
    <MudSelectExtended
        T="AccountName" ItemCollection="AccountNames" Clearable @ref="_addPlayerComponent"
        ValueChanged="AddAccountChanged" Disabled="_isSaving"
        Placeholder="Add Attendee" Variant="Variant.Outlined" ToStringFunc="@(accountName => accountName.Name ?? "No Name Set")"
        SearchBox="true" SearchBoxAutoFocus SearchFunc="SearchFunc">
        <ItemTemplate>
            <MudStack Spacing="0">
                <MudText Typo="Typo.body1">@context.Value.Name</MudText>
                <MudText Typo="Typo.body2"> @string.Join(", ", context.Value.Emails.Select(x => x.Email))</MudText>
            </MudStack>
        </ItemTemplate>
    </MudSelectExtended>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" Disabled="@(!_saveAllNeeded || _isSaving)" OnClick="SaveAll">Save All Changes</MudButton>
</MudStack>

<MudDataGrid T="Attendance" Items="_attendances" ReadOnly="false" Hover EditMode="DataGridEditMode.Cell" Bordered Dense CommittedItemChanges="AttendanceUpdated" Loading="_isSaving">
    <Columns>
        <PropertyColumn Property="x => x.Name" IsEditable="false"/>
        <PropertyColumn Property="x => x.Attended" IsEditable="true">
            <EditTemplate>
                <MudSwitch Checked="@context.Item.Attended" Color="Color.Success" UnCheckedColor="Color.Error" CheckedChanged="(bool value) => { context.Item.Attended = value; context.Item.Changed = true; }"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Moonstone" IsEditable="true"/>
        <TemplateColumn CellClass="d-flex justify-end" Sortable="false" IsEditable="false">
            <CellTemplate>
                @switch (context.Item.LetterState)
                {
                    case LetterState.Submitted:
                        <MudTooltip Text="Letter has been submitted">
                            <MudIconButton Size="Size.Medium" Color="Color.Tertiary" Icon="@Icons.Material.Filled.Email" Disabled="@(context.Item.Letter == null)" OnClick="async () => await ShowLetter(context.Item)"/>
                        </MudTooltip>
                        break;
                    case LetterState.Approved:
                        <MudTooltip Text="Letter has been approved">
                            <MudIconButton Size="Size.Medium" Color="Color.Success" Icon="@Icons.Material.Filled.Email" Disabled="@(context.Item.Letter == null)" OnClick="async () => await ShowLetter(context.Item)"/>
                        </MudTooltip>
                        break;
                    case LetterState.Draft:
                        <MudTooltip Text="Letter is in draft">
                            <MudIconButton Size="Size.Medium" Color="Color.Secondary" Icon="@Icons.Material.Filled.Email" Disabled="@(context.Item.Letter == null)" OnClick="async () => await ShowLetter(context.Item)"/>
                        </MudTooltip>
                        break;
                }
                <MudIconButton Size="Size.Medium" Color="Color.Primary" Icon="@Icons.Material.Filled.Save" Disabled="@(!context.Item.Changed)" OnClick="async () => await AttendanceUpdate(context.Item)"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {

    [Parameter]
    public AccountName[] AccountNames { get; set; } = Array.Empty<AccountName>();

    [Parameter]
    public Event Event { get; set; } = default!;

    [Parameter]
    public LetterTemplate? LetterTemplate { get; set; } = default!;

    [Parameter]
    public Letter[] Letters { get; set; } = default!;

    private class Attendance
    {
        public string AccountId { get; set; } = default!;
        public string Name { get; set; } = default!;
        public bool Attended { get; set; }
        public int? Moonstone { get; set; }
        public string[] CharacterIds { get; set; } = Array.Empty<string>();
        public bool Changed { get; set; }
        public Letter? Letter { get; set; }
        public LetterState LetterState { get; set; }
    }

    bool _isLoading = true;
    private List<EventComponent> _components = new();
    private readonly List<Attendance> _attendances = new();
    private MudSelectExtended<AccountName>? _addPlayerComponent;
    private bool _saveAllNeeded;
    private bool _isSaving = true;

    private string? _lastEventId;

    protected override async Task OnParametersSetAsync()
    {
        if (_lastEventId == Event.EventId) return;

        _isLoading = true;
        var letterLookup = Letters.ToDictionary(x => x.AccountId);
        var attendances = await LandingService.Admin.GetEventAttendances(Event.EventId);
        _attendances.AddRange(attendances.Select(attendance =>
        {
            var letter = letterLookup.Remove(attendance.AccountId, out var l) ? l : null;
            return new Attendance()
            {
                Name = AccountNames.FirstOrDefault(account => account.AccountId == attendance.AccountId)?.Name ?? "No Name Set",
                Attended = true,
                Moonstone = attendance.MwFifth?.Moonstone ?? 0,
                AccountId = attendance.AccountId,
                CharacterIds = attendance.MwFifth?.CharacterIds ?? Array.Empty<string>(),
                Letter = letter,
                LetterState = letter?.State ?? LetterState.Draft,
            };
        }));
        _attendances.AddRange(letterLookup.Values.Select(letter => new Attendance()
        {
            Name = AccountNames.FirstOrDefault(account => account.AccountId == letter.AccountId)?.Name ?? "No Name Set",
            Attended = false,
            AccountId = letter.AccountId,
            Letter = letter,
            LetterState = letter.State
        }));

        _lastEventId = Event.EventId;
        _isLoading = false;
        _isSaving = false;
    }

    private bool SearchFunc(AccountName accountName, string query) =>
        accountName.Name?.Contains(query, StringComparison.InvariantCultureIgnoreCase) == true
        || accountName.Emails.Any(email => email.Email.Contains(query, StringComparison.InvariantCultureIgnoreCase));

    private async Task SaveAll()
    {
        _isSaving = true;
        StateHasChanged();
        try
        {
            await Parallel.ForEachAsync(
                _attendances.Where(x => x.Changed),
                new ParallelOptions { MaxDegreeOfParallelism = 4 },
                async (attendance, token) => { await AttendanceUpdate(attendance); });
            UpdateSaveAllNeeded();
        }
        finally
        {
            _isSaving = false;
        }
    }

    private void UpdateSaveAllNeeded()
    {
        _saveAllNeeded = _attendances.Any(x => x.Changed);
    }

    private async Task SaveAttendance(Attendance item)
    {
        await LandingService.Admin.SetEventAttendance(Event.EventId, item.AccountId, item.Attended, item.Moonstone, Array.Empty<string>());
        item.Changed = false;
    }


    private async Task AttendanceUpdate(Attendance item)
    {
        await SaveAttendance(item);
        UpdateSaveAllNeeded();
    }

    private async Task AddAccountChanged(AccountName player)
    {
        if ((AccountName?)player == null) return;

        if (_attendances.Any(x => x.AccountId == player.AccountId))
        {
            await DialogService.ShowMessageBox("Add Player", "This player is already added to the attendance list.");
            await _addPlayerComponent!.Clear();
            return;
        }

        var item = new Attendance
        {
            Attended = true,
            Moonstone = 0,
            Name = player.Name ?? "No Name Set",
            AccountId = player.AccountId,
            Changed = false
        };
        _attendances.Add(item);

        await LandingService.Admin.SetEventAttendance(Event.EventId, item.AccountId, item.Attended, item.Moonstone, Array.Empty<string>());

        await _addPlayerComponent!.Clear();
        StateHasChanged();
    }

    private void AttendanceUpdated(Attendance obj)
    {
        obj.Changed = true;
        _saveAllNeeded = true;
    }

    private async Task ShowLetter(Attendance attendance)
    {
        if (attendance.Letter == null)
            return;

        var template =
            LetterTemplate
            ?? await LandingService.Admin.GetLetterTemplate(attendance.Letter.TemplateId);

        var options = new DialogOptions()
        {
            CloseOnEscapeKey = true, CloseButton = true, Position = DialogPosition.TopCenter
        };
        var parameters = new DialogParameters()
        {
            { nameof(LetterDialog.Template), template },
            { nameof(LetterDialog.Letter), attendance.Letter },
            { nameof(LetterDialog.Event), Event },
            { nameof(LetterDialog.ReadOnly), true },
            { nameof(LetterDialog.Admin), true }
        };
        await DialogService.ShowAsync<LetterDialog>(attendance.Name, parameters, options);
    }

}