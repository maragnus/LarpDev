@page "/admin/events/{EventId}"
@inherits LarpPage
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@implements IDisposable

@inject LandingService LandingService
@inject IJSRuntime Js

<PageHeader Container>Edit Event</PageHeader>

<NavigationLock ConfirmExternalNavigation="_hasEventChanges || _hasAttendanceChanges" OnBeforeInternalNavigation="BeforeNavigation"/>

<AdminLayout Loading="IsLoading" Saving="IsSaving" Title="Edit Event">
    <LoadingSkeleton>
        <MudStack Spacing="4">
            <MudSkeleton Width="50%" Height="42px"/>
            <MudPaper Elevation="2" Class="pa-4">
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudSkeleton Width="100%" Height="42px"/>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSkeleton Width="100%" Height="42px"/>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSkeleton Width="100%" Height="42px"/>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSkeleton Width="100%" Height="42px"/>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSkeleton Width="100%" Height="42px"/>
                    </MudItem>
                    <MudItem xs="6" md="4">
                        <MudSkeleton Width="100%" Height="42px"/>
                    </MudItem>
                    <MudItem xs="12" md="12" lg="6">
                        <MudSkeleton Width="100%" Height="128px"/>
                    </MudItem>
                    <MudItem xs="12" md="12" lg="6">
                        <MudSkeleton Width="100%" Height="128px"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSkeleton Width="100%" Height="42px"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSkeleton Width="100%" Height="42px"/>
                    </MudItem>
                    <MudItem xs="6" md="4">
                        <MudStack Row Spacing="4">
                            <MudSkeleton Width="65%" Height="42px"/>
                            <MudSkeleton Width="25%" Height="42px"/>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="6" md="4">
                        <MudStack Row Spacing="4">
                            <MudSkeleton Width="65%" Height="42px"/>
                            <MudSkeleton Width="25%" Height="42px"/>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="6" md="4">
                        <MudStack Row Spacing="4">
                            <MudSkeleton Width="65%" Height="42px"/>
                            <MudSkeleton Width="25%" Height="42px"/>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudSkeleton Width="50%" Height="42px"/>
            <MudContainer MaxWidth="MaxWidth.Medium" Style="margin: 0; padding: 0">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px"/>
            </MudContainer>
        </MudStack>
    </LoadingSkeleton>
    <ChildContent>
        <MudStack Spacing="4">
            <MudButtonGroup OverrideStyles="false">
                <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="Save" Disabled="!_hasEventChanges && !_hasAttendanceChanges">Save</MudButton>
                <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="Delete">Delete</MudButton>
                <MudButton Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download" OnClick="DownloadLetters">Download</MudButton>
                <MudButton Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Print" OnClick="Preregistration">Preregistration</MudButton>
            </MudButtonGroup>
            <MudPaper Elevation="2" Class="pa-4">

                <EditForm T="EventModel" EditContext="_editContext">
                    <MudGrid>
                        <MudItem xs="12" md="4">
                            <MudTextField T="string?" Label="Title" @bind-Value="@_model.Title" For="() => _model.Title" Required Variant="Variant.Outlined"/>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudTextField T="string?" Label="Location" @bind-Value="@_model.Location" For="() => _model.Location" Required Variant="Variant.Outlined"/>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSelect T="string?" Label="Game" @bind-Value="@_model.GameId" For="() => _model.GameId" Variant="Variant.Outlined">
                                @foreach (var game in _games.Values)
                                {
                                    <MudSelectItem T="string?" Value="@game.Id">@game.Title</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSelectExtended T="string?" Label="Event Type" @bind-Value="@_model.EventType" For="() => _model.EventType" Required ItemCollection="_eventTypes" Variant="Variant.Outlined"/>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudDatePicker T="DateTime" Label="When" @bind-Date="@_model.Date" For="() => _model.Date" Required Variant="Variant.Outlined"/>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            <MudSelect T="bool" Label="Visible" @bind-Value="@_model.Hidden" For="() => _model.Hidden" Variant="Variant.Outlined">
                                <MudSelectItem T="bool" Value="@true">Hidden</MudSelectItem>
                                <MudSelectItem T="bool" Value="@false">Visible</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="12" lg="6">
                            <MudTextField T="string?" Label="Preregistration Notes" Lines="3" @bind-Value="@_model.PreregistrationNotes" For="() => _model.PreregistrationNotes" Variant="Variant.Outlined"/>
                        </MudItem>
                        <MudItem xs="12" md="12" lg="6">
                            <MudTextField T="string?" Label="Administrative Notes" Lines="3" @bind-Value="@_model.AdminNotes" For="() => _model.AdminNotes" Variant="Variant.Outlined"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="int" Label="First Chronicle Cost" @bind-Value="@_model.EventCost" For="() => _model.EventCost" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="int" Label="Additional Chronicle Cost" @bind-Value="@_model.ChronicleCost" For="() => _model.ChronicleCost" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"/>
                        </MudItem>

                        <MudItem xs="6" md="4">
                            <MudStack Row Spacing="4">
                                <MudSelect T="string" Label="Pre-Event Letter" @bind-Value="@_model.PreEventLetter" For="() => _model.PreEventLetter" Variant="Variant.Outlined" Clearable>
                                    @foreach (var item in _letterTemplates)
                                    {
                                        <MudSelectItem T="string" Value="@item.Key">@item.Value.Title</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Start">
                                    <MudText Typo="Typo.caption">Open</MudText>
                                    <MudSwitch Color="Color.Success" UnCheckedColor="Color.Secondary" @bind-Checked="@_model.PreEventLetterOpen" For="() => _model.PreEventLetterOpen"/>
                                </MudStack>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            <MudStack Row Spacing="4">
                                <MudSelect T="string" Label="Post-Event Letter" @bind-Value="@_model.PostEventLetter" For="() => _model.PostEventLetter" Variant="Variant.Outlined" Clearable>
                                    @foreach (var item in _letterTemplates)
                                    {
                                        <MudSelectItem T="string" Value="@item.Key">@item.Value.Title</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Start">
                                    <MudText Typo="Typo.caption">Open</MudText>
                                    <MudSwitch Color="Color.Success" UnCheckedColor="Color.Secondary" @bind-Checked="@_model.PostEventLetterOpen" For="() => _model.PostEventLetterOpen"/>
                                </MudStack>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            <MudStack Row Spacing="4">
                                <MudSelect T="string" Label="Between-Event Letter" @bind-Value="@_model.BetweenEventLetter" For="() => _model.BetweenEventLetter" Variant="Variant.Outlined" Clearable>
                                    @foreach (var item in _letterTemplates)
                                    {
                                        <MudSelectItem T="string" Value="@item.Key">@item.Value.Title</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Start">
                                    <MudText Typo="Typo.caption">Open</MudText>
                                    <MudSwitch Color="Color.Success" UnCheckedColor="Color.Secondary" @bind-Checked="@_model.BetweenEventLetterOpen" For="() => _model.BetweenEventLetterOpen"/>
                                </MudStack>
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudPaper>

            <MudText Typo="Typo.h6">Components</MudText>
            <MudContainer MaxWidth="MaxWidth.Medium" Style="margin: 0; padding: 0">
                <MudDataGrid T="EventComponent" Items="_components" EditMode="DataGridEditMode.Cell" ReadOnly="false" Dense CommittedItemChanges="ComponentChanged">
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="Preregistration ID" IsEditable/>
                        <PropertyColumn Property="x => x.Name" Title="Component Name" IsEditable/>
                        <PropertyColumn Property="x => x.When" Title="When" Format="dddd, MMM d, yyyy" IsEditable>
                            <EditTemplate>
                                <MudDatePicker T="DateTime" Required Date="@context.Item.When" DateChanged="date => { context.Item.When = date ?? DateTime.Today; _hasEventChanges = true; }" Variant="Variant.Outlined"/>
                            </EditTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.IsFree" Title="Free" IsEditable>
                            <EditTemplate>
                                <MudSwitch T="bool" Required Color="Color.Success" UnCheckedColor="Color.Warning" Checked="@context.Item.IsFree" CheckedChanged="value => {context.Item.IsFree = value; _hasEventChanges = true; }"/>
                            </EditTemplate>
                        </PropertyColumn>
                        <TemplateColumn T="EventComponent" IsEditable="false">
                            <CellTemplate>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveComponent(context.Item)"/>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudContainer>
            <div>
                <MudButtonGroup OverrideStyles="false">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponent">Add Component</MudButton>
                    <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponentF123">Add F123</MudButton>
                    <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddComponent1">Add Halves</MudButton>
                </MudButtonGroup>
            </div>

            <MudText Typo="Typo.h6">Attendance</MudText>
            <EventAttendanceComponent @ref="_attendanceComponent" EventsAndLetters="_result" @bind-HasChanges="_hasAttendanceChanges"/>
        </MudStack>
    </ChildContent>
</AdminLayout>

@code {

    [Parameter]
    public string EventId { get; set; } = default!;

    private readonly EventModel _model = new();
    private EditContext _editContext = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _editContext = new EditContext(_model);
        _editContext.OnFieldChanged += FieldChanged;
    }

    public void Dispose() =>
        _editContext.OnFieldChanged -= FieldChanged;

    public class EventModel
    {
        [Required]
        public string? Title { get; set; }

        [Required]
        public string? Location { get; set; }

        [Required]
        public string? EventType { get; set; }

        [Required]
        public DateTime? Date { get; set; }

        [Required]
        public string? GameId { get; set; }

        public bool Hidden { get; set; }

        public string? PreregistrationNotes { get; set; }
        public string? AdminNotes { get; set; }

        public int EventCost { get; set; }
        public int ChronicleCost { get; set; }

        public string? PreEventLetter { get; set; }
        public string? PostEventLetter { get; set; }
        public string? BetweenEventLetter { get; set; }

        public bool PreEventLetterOpen { get; set; }
        public bool PostEventLetterOpen { get; set; }
        public bool BetweenEventLetterOpen { get; set; }

        public void LoadFrom(Event e)
        {
            Title = e.Title;
            Location = e.Location;
            EventType = e.EventType;
            GameId = e.GameId;
            Date = e.Date.ToDateTime(TimeOnly.MinValue);
            Hidden = e.IsHidden;
            PreregistrationNotes = e.PreregistrationNotes;
            AdminNotes = e.AdminNotes;
            EventCost = e.EventCost;
            ChronicleCost = e.ChronicleCost;
            var preEvent = e.LetterTemplates.FirstOrDefault(letter => letter.Name == LetterNames.PreEvent);
            PreEventLetter = preEvent?.LetterTemplateId;
            PreEventLetterOpen = preEvent?.IsOpen ?? false;
            var postEvent = e.LetterTemplates.FirstOrDefault(letter => letter.Name == LetterNames.PostEvent);
            PostEventLetter = postEvent?.LetterTemplateId;
            PostEventLetterOpen = postEvent?.IsOpen ?? false;
            var betweenEvent = e.LetterTemplates.FirstOrDefault(letter => letter.Name == LetterNames.BetweenEvent);
            BetweenEventLetter = betweenEvent?.LetterTemplateId;
            BetweenEventLetterOpen = betweenEvent?.IsOpen ?? false;

            Console.WriteLine(JsonSerializer.Serialize(e));
            Console.WriteLine(JsonSerializer.Serialize(this));
        }

        public Event Save()
        {
            var e = new Event()
            {
                Title = Title,
                Location = Location,
                EventType = EventType,
                GameId = GameId!,
                Date = DateOnly.FromDateTime(Date ?? DateTime.Today),
                IsHidden = Hidden,
                PreregistrationNotes = PreregistrationNotes,
                AdminNotes = AdminNotes,
                EventCost = EventCost,
                ChronicleCost = ChronicleCost
            };

            var letters = e.LetterTemplates.ToList();
            SaveLetter(letters, LetterNames.PreEvent, PreEventLetter, PreEventLetterOpen);
            SaveLetter(letters, LetterNames.PostEvent, PostEventLetter, PostEventLetterOpen);
            SaveLetter(letters, LetterNames.BetweenEvent, BetweenEventLetter, BetweenEventLetterOpen);
            e.LetterTemplates = letters.ToArray();

            return e;
        }

        private static void SaveLetter(List<EventLetter> letters, string letterName, string? templateId, bool isOpen)
        {
            if (string.IsNullOrEmpty(templateId))
            {
                letters.RemoveAll(letter => letter.Name == letterName);
                return;
            }

            var letter = letters.FirstOrDefault(letter => letter.Name == letterName);
            if (letter == null)
                letters.Add(letter = new EventLetter { Name = letterName });
            letter.LetterTemplateId = templateId;
            letter.IsOpen = isOpen;
        }
    }

    private class EventComponent
    {
        public string Id { get; set; } = default!;
        public string Name { get; set; } = default!;
        public DateTime When { get; set; }
        public bool IsFree { get; set; }

        public Larp.Data.EventComponent ToComponent() => new()
        {
            ComponentId = Id,
            Date = DateOnly.FromDateTime(When),
            Name = Name,
            Free = IsFree
        };
    }

    private List<EventComponent> _components = new();
    private readonly string[] _eventTypes = { "Game", "Workday", "Subscription", "Contest", "Other" };
    private Dictionary<string, LetterTemplate> _letterTemplates = default!;
    private EventsAndLetters _result = default!;
    private EventAttendanceComponent? _attendanceComponent;
    private bool _hasAttendanceChanges;
    private bool _hasEventChanges;
    private IReadOnlyDictionary<string, Game> _games = default!;

    protected override async Task OnSafeParametersSetAsync()
    {
        _games = LandingService.Games;

        _result = await LandingService.Admin.GetEventLetters(EventId);
        var @event = _result.Events.Values.First();
        _components = @event.Components
            .Select(x => new EventComponent
            {
                Id = x.ComponentId,
                Name = x.Name ?? "No Name",
                When = x.Date.ToDateTime(TimeOnly.MinValue),
                IsFree = x.Free
            })
            .ToList();

        _model.LoadFrom(@event);
        _editContext.MarkAsUnmodified();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e) =>
        _hasEventChanges = true;

    protected override async Task OnSafeInitializedAsync()
    {
        _letterTemplates = (await LandingService.Admin.GetLetterTemplateNames())
            .ToDictionary(x => x.LetterTemplateId);
    }

    private async Task BeforeNavigation(LocationChangingContext arg)
    {
        if (!_hasAttendanceChanges && !_editContext.IsModified()) return;

        var response = await DialogService.ShowMessageBox("Unsaved Changes", "You have unsaved changes. Are you sure you want to leave without saving?", "Yes, Save", "No, Discard Changes", "Cancel, Continue Working");
        switch (response)
        {
            case null:
                arg.PreventNavigation();
                break;
            case true:
                await Save();
                break;
            case false:
                break;
        }
    }

    private async Task Save()
    {
        await SavingActionAsync(async () =>
        {
            var e = _model.Save();
            e.Components = _components
                .Select(x => x.ToComponent())
                .ToArray();
            await LandingService.Admin.SaveEvent(EventId, e);
            _editContext.MarkAsUnmodified();
            _hasEventChanges = false;
            StateHasChanged();
            await _attendanceComponent.Save();
        });
    }

    private async Task Delete()
    {
        var result = await DialogService.ShowMessageBox("Delete event", "Are you sure you want to delete this event?", "Yes, Delete It", "No, Keep It");
        if (result == true)
        {
            await SafeActionAsync(async () =>
            {
                await LandingService.Admin.DeleteEvent(EventId);
                NavigationManager.NavigateTo("/admin/events");
            });
        }
    }

    private async Task DownloadLetters()
    {
        await SafeActionAsync(async () =>
        {
            var file = await LandingService.Admin.ExportLetters(EventId);
            var fileStream = file.CreateReadStream();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await Js.InvokeVoidAsync("downloadFileFromStream", $"larp-landing-export-{DateTime.Now:yyyy-MM-dd}.xlsx", streamRef);
        });
    }

    private void AddComponent()
    {
        var date = _model.Date ?? DateTime.Today;
        _components.Add(new EventComponent() { Id = "C", Name = "New Component", When = date });
        _hasEventChanges = true;
    }

    private void AddComponentF123()
    {
        var date = _model.Date ?? DateTime.Today;
        _components.Add(new EventComponent() { Id = "F", Name = "Friday", When = date, IsFree = true });
        _components.Add(new EventComponent() { Id = "1", Name = "Chronicle 1", When = date.AddDays(1) });
        _components.Add(new EventComponent() { Id = "2", Name = "Chronicle 2", When = date.AddDays(1) });
        _components.Add(new EventComponent() { Id = "3", Name = "Chronicle 3", When = date.AddDays(2) });
        _hasEventChanges = true;
    }

    private void AddComponent1()
    {
        var date = _model.Date ?? DateTime.Today;
        _components.Add(new EventComponent() { Id = "1", Name = "First Half", When = date });
        _components.Add(new EventComponent() { Id = "2", Name = "Second Half", When = date });
        _hasEventChanges = true;
    }

    private void RemoveComponent(EventComponent contextItem)
    {
        _components.Remove(contextItem);
        _hasEventChanges = true;
    }

    private void Preregistration() =>
        NavigationManager.NavigateTo($"/admin/events/{EventId}/preregistration");

    private void ComponentChanged(EventComponent arg) =>
        _hasEventChanges = true;

}