@inherits LarpPage

@inject IJSRuntime Js
@inject LandingService LandingService

<MudStack Row AlignItems="AlignItems.Center">
    <MudSelectExtended
        T="AccountName" ItemCollection="_accountNames" Clearable @ref="_addPlayerComponent"
        ValueChanged="AddAccountChanged" Disabled="_isSaving"
        Placeholder="Add Attendee" Variant="Variant.Outlined" ToStringFunc="@(accountName => accountName.Name ?? "No Name Set")"
        SearchBox="true" SearchBoxAutoFocus SearchFunc="SearchFunc">
        <ItemTemplate>
            <MudStack Spacing="0">
                <MudText Typo="Typo.body1">@context.Value.Name</MudText>
                <MudText Typo="Typo.body2">@string.Join(", ", context.Value.Emails.Select(x => x.Email))</MudText>
            </MudStack>
        </ItemTemplate>
    </MudSelectExtended>
</MudStack>

<MudDataGrid T="Attendance" Items="_attendances" ReadOnly="false" Hover EditMode="DataGridEditMode.Cell" Bordered Dense CommittedItemChanges="AttendanceChanged" Loading="_isSaving">
    <Columns>
        <PropertyColumn Property="x => x.Name" IsEditable="false"/>
        <PropertyColumn Property="x => x.Attended" IsEditable="true">
            <EditTemplate>
                <MudSwitch Checked="@context.Item.Attended" Color="Color.Success" UnCheckedColor="Color.Error" CheckedChanged="async (bool value) => { context.Item.Attended = value; context.Item.Changed = true; await UpdateSaveAllNeeded(); }"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Moonstone1" IsEditable="true">
            <EditTemplate>
                <MudNumericField T="int?" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="!context.Item.Attended"
                                 Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.FilterVintage"
                                 Value="context.Item.Moonstone1"
                                 ValueChanged="async value => { context.Item.Moonstone1 = value; context.Item.Changed = true; await UpdateSaveAllNeeded(); }"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Moonstone2" IsEditable="true">
            <EditTemplate>
                <MudNumericField T="int?" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="!context.Item.Attended"
                                 Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.FilterVintage"
                                 Value="context.Item.Moonstone2"
                                 ValueChanged="async value => { context.Item.Moonstone2 = value; context.Item.Changed = true; await UpdateSaveAllNeeded(); }"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Paid" IsEditable="true">
            <EditTemplate>
                <MudTextField T="decimal?" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="!context.Item.Attended"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                              Value="context.Item.Paid" Format="0.00"
                              ValueChanged="async value => { context.Item.Paid = value; context.Item.Changed = true; await UpdateSaveAllNeeded(); }"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Expected" IsEditable="true">
            <EditTemplate>
                <MudTextField T="decimal?" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="!context.Item.Attended"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                              Value="context.Item.Expected" Format="0.00"
                              ValueChanged="async value => { context.Item.Expected = value; context.Item.Changed = true; await UpdateSaveAllNeeded();}"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.PreEvent" IsEditable="false" SortBy="@(attendance => attendance.PreEvent?.State)">
            <CellTemplate>
                @DisplayLetter(context.Item.PreEvent)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.PostEvent" IsEditable="false" SortBy="@(attendance => attendance.PostEvent?.State)">
            <CellTemplate>
                @DisplayLetter(context.Item.PostEvent)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.BetweenEvent" IsEditable="false" SortBy="@(attendance => attendance.BetweenEvent?.State)">
            <CellTemplate>
                @DisplayLetter(context.Item.BetweenEvent)
            </CellTemplate>
        </PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end" Sortable="false" IsEditable="false" StickyRight>
            <CellTemplate>
                <MudIconButton Size="Size.Medium" Color="Color.Primary" Icon="@Icons.Material.Filled.Save" Disabled="@(!context.Item.Changed)" OnClick="async () => await SaveAttendance(context.Item)"/>
                <MudTooltip Text="Open this player in a new window">
                    <MudIconButton Size="Size.Medium" Color="Color.Primary" Icon="@Icons.Material.Filled.OpenInNew" OnClick="async () => await OpenAccount(context.Item)"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {

    [Parameter]
    public EventsAndLetters EventsAndLetters { get; set; } = default!;

    [Parameter]
    public bool HasChanges { get; set; }

    [Parameter]
    public EventCallback<bool> HasChangesChanged { get; set; }

    RenderFragment? DisplayLetter(Letter? letter)
    {
        if (letter == null)
            return null;

        var style = LetterTooltip[letter.State];
        var icon = LetterIcon[letter.Name];
        var showBadge = letter.State is LetterState.Submitted;
        return
            @<MudTooltip Text="@style.Tooltip">
                <MudBadge Visible="@showBadge" Color="Color.Error" Icon="@Icons.Material.Filled.Warning" Bordered Overlap Origin="Origin.CenterRight" Elevation="1">
                    <MudButton Size="Size.Medium" IconColor="style.Color" StartIcon="@icon" OnClick="async () => await ShowLetter(letter)">
                        @letter.State
                    </MudButton>
                </MudBadge>
            </MudTooltip>;
    }

    private class Attendance
    {
        public string AccountId { get; set; } = default!;
        public string Name { get; set; } = default!;
        public bool Attended { get; set; }
        public int? Moonstone1 { get; set; }
        public int? Moonstone2 { get; set; }
        public decimal? Paid { get; set; }
        public decimal? Expected { get; set; }
        public string[] CharacterIds { get; set; } = Array.Empty<string>();
        public bool Changed { get; set; }
        public Letter? PreEvent { get; set; }
        public Letter? PostEvent { get; set; }
        public Letter? BetweenEvent { get; set; }
    }

    static readonly Dictionary<LetterState, (string Tooltip, Color Color)> LetterTooltip = new()
    {
        { LetterState.NotStarted, ("Not started", Color.Warning) },
        { LetterState.Draft, ("Draft", Color.Warning) },
        { LetterState.Submitted, ("Submitted", Color.Success) },
        { LetterState.Approved, ("Approved", Color.Success) },
    };

    static readonly Dictionary<string, string> LetterIcon = new()
    {
        { LetterNames.PreEvent, Icons.Material.Filled.Rsvp },
        { LetterNames.PostEvent, Icons.Material.Filled.Email },
        { LetterNames.BetweenEvent, Icons.Material.Filled.MenuBook },
    };

    private List<EventComponent> _components = new();
    private readonly List<Attendance> _attendances = new();
    private MudSelectExtended<AccountName>? _addPlayerComponent;
    private bool _isSaving = true;
    private AccountName[] _accountNames = Array.Empty<AccountName>();
    private Event _event = default!;
    private string? _lastEventId;
    private Dictionary<string, LetterTemplate> _templates = default!;

    protected override async Task OnSafeParametersSetAsync()
    {
        _event = EventsAndLetters.Events.Values.First();
        if (_lastEventId == _event.EventId) return;
        _lastEventId = _event.EventId;

        var names = EventsAndLetters.Accounts;
        _accountNames = names.Values.ToArray();
        _templates = EventsAndLetters.LetterTemplates;

        var letterLookup = EventsAndLetters.Letters.Values
            .GroupBy(x => x.AccountId)
            .ToDictionary(x => x.Key, x => x.ToArray());
        var attendances = await LandingService.Admin.GetEventAttendances(_event.EventId);
        _attendances.AddRange(attendances.Select(attendance =>
        {
            var letters = letterLookup.Remove(attendance.AccountId, out var letterArray) ? letterArray : Array.Empty<Letter>();
            return new Attendance()
            {
                AccountId = attendance.AccountId,
                Name = names.GetValueOrDefault(attendance.AccountId)?.Name ?? "No Name Set",
                Attended = true,
                Moonstone1 = attendance.MwFifth?.Moonstone ?? 0,
                Moonstone2 = attendance.MwFifth?.PostMoonstone ?? 0,
                Paid = attendance.ProvidedPayment,
                Expected = attendance.ExpectedPayment,
                CharacterIds = attendance.MwFifth?.CharacterIds ?? Array.Empty<string>(),
                PreEvent = letters.FirstOrDefault(x => x.Name == LetterNames.PreEvent),
                PostEvent = letters.FirstOrDefault(x => x.Name == LetterNames.PostEvent),
                BetweenEvent = letters.FirstOrDefault(x => x.Name == LetterNames.BetweenEvent),
            };
        }));
        _attendances.AddRange(letterLookup.Select(letter =>
        {
            var letters = letter.Value;
            return new Attendance()
            {
                AccountId = letter.Key,
                Name = names.GetValueOrDefault(letter.Key)?.Name ?? "No Name Set",
                Attended = false,
                PreEvent = letters.FirstOrDefault(x => x.Name == LetterNames.PreEvent),
                PostEvent = letters.FirstOrDefault(x => x.Name == LetterNames.PostEvent),
                BetweenEvent = letters.FirstOrDefault(x => x.Name == LetterNames.BetweenEvent),
            };
        }));

        _isSaving = false;
    }

    private bool SearchFunc(AccountName accountName, string query) =>
        accountName.Name?.Contains(query, StringComparison.InvariantCultureIgnoreCase) == true
        || accountName.Emails.Any(email => email.Email.Contains(query, StringComparison.InvariantCultureIgnoreCase));

    private async Task SaveAttendance(Attendance item)
    {
        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.SetEventAttendance(
                _event.EventId, item.AccountId, item.Attended,
                item.Moonstone1, item.Moonstone2, item.Paid, item.Expected,
                Array.Empty<string>());
            item.Changed = false;
        });
        await UpdateSaveAllNeeded();
    }

    public async Task Save()
    {
        _isSaving = true;
        StateHasChanged();
        await SafeActionAsync(async () =>
        {
            await Parallel.ForEachAsync(
                _attendances.Where(x => x.Changed),
                new ParallelOptions { MaxDegreeOfParallelism = 4 },
                async (attendance, _) => { await SaveAttendance(attendance); });
        });
        _isSaving = false;
        await UpdateSaveAllNeeded();
    }

    private async Task UpdateSaveAllNeeded()
    {
        var hasChanges = _attendances.Any(x => x.Changed);
        if (HasChanges != hasChanges)
        {
            HasChanges = hasChanges;
            await HasChangesChanged.InvokeAsync(hasChanges);
            StateHasChanged();
        }
    }

    private async Task OpenAccount(Attendance item)
    {
        await Js.InvokeVoidAsync("open", CancellationToken.None, $"/admin/accounts/{item.AccountId}");
    }

    private async Task AddAccountChanged(AccountName player)
    {
        if ((AccountName?)player == null) return;

        if (_attendances.Any(x => x.AccountId == player.AccountId))
        {
            await DialogService.ShowMessageBox("Add Player", "This player is already added to the attendance list.");
            await _addPlayerComponent!.Clear();
            return;
        }

        await SafeActionAsync(async () =>
        {
            var item = new Attendance
            {
                Attended = true,
                Moonstone1 = 0,
                Moonstone2 = 0,
                Name = player.Name ?? "No Name Set",
                AccountId = player.AccountId,
                Paid = null,
                Expected = null,
                Changed = false
            };

            await LandingService.Admin.SetEventAttendance(_event.EventId, item.AccountId, item.Attended, item.Moonstone1, item.Moonstone2, item.Paid, item.Expected, Array.Empty<string>());

            _attendances.Add(item);

            await _addPlayerComponent!.Clear();
            StateHasChanged();
        });
    }

    private async Task AttendanceChanged(Attendance obj)
    {
        obj.Changed = true;
        if (!HasChanges)
        {
            HasChanges = true;
            await HasChangesChanged.InvokeAsync(HasChanges);
            StateHasChanged();
        }
    }

    private async Task ShowLetter(Letter? letter)
    {
        if (letter == null)
            return;

        var options = new DialogOptions()
        {
            CloseOnEscapeKey = true, CloseButton = true, Position = DialogPosition.TopCenter
        };
        var parameters = new DialogParameters()
        {
            { nameof(LetterDialog.Template), _templates[letter.TemplateId] },
            { nameof(LetterDialog.Letter), letter },
            { nameof(LetterDialog.Event), _event },
            { nameof(LetterDialog.ReadOnly), true },
            { nameof(LetterDialog.Admin), true }
        };
        await DialogService.ShowAsync<LetterDialog>(EventsAndLetters.Accounts[letter.AccountId].Name, parameters, options);
    }

    private object? SortLetter<T>(T item)
    {
        if (item is Letter letter)
            return letter.State;
        return null;
    }

}