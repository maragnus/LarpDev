@page "/admin/letters/{LetterId}"
@inject LandingService LandingService
@using Larp.Landing.Client.Pages.EventsSection
@inherits LarpPage

<PageHeader Container>Event Letter</PageHeader>

@if (IsLoading)
{
    <MudOverlay Absolute DarkBackground Visible="IsLoading">
        <MudProgressCircular Indeterminate/>
    </MudOverlay>
    return;
}

<MudContainer MaxWidth="MaxWidth.Small" Class="relative">
    <MudOverlay Absolute DarkBackground Visible="_isSaving">
        <MudProgressCircular Indeterminate/>
    </MudOverlay>

    <div class="my-4">
        <MudButtonGroup OverrideStyles="false">
            <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="Save">Save &amp; Continue Editing</MudButton>
            <MudButton Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.VerifiedUser" OnClick="Submit">Submit</MudButton>
        </MudButtonGroup>
    </div>

    <EventLetterComponent
        Letter="_letter"
        Template="_template"
        Event="_event"
        AccountNames="_accountNames"
        ReadOnly="false"
        Admin="true"/>

    <div class="my-4">
        <MudButtonGroup OverrideStyles="false">
            <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="Save">Save &amp; Continue Editing</MudButton>
            <MudButton Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.VerifiedUser" OnClick="Submit">Submit</MudButton>
        </MudButtonGroup>
    </div>
</MudContainer>

@code {

    [Parameter]
    public string LetterId { get; set; } = default!;

    bool _isSaving = true;
    Letter _letter = default!;
    LetterTemplate _template = default!;
    Event _event = default!;
    private IDictionary<string, AccountName> _accountNames = default!;

    protected override async Task OnSafeParametersSetAsync()
    {
        var letter = await LandingService.Admin.GetLetter(LetterId);
        _letter = letter.Letters.Values.First();
        _template = letter.LetterTemplates.Values.First();
        _event = letter.Events.Values.First();
        _accountNames = letter.Accounts;
        _isSaving = false;
    }

    private async Task Save()
    {
        _isSaving = true;
        await SafeActionAsync(async () => { await LandingService.Admin.SaveLetter(_letter.LetterId, _letter); });
        _isSaving = false;
    }

    private async Task Submit()
    {
        var result = await DialogService.ShowMessageBox("Submit Letter", "Are you sure you want to submit this letter?", "Yes, I'm Done", "No, Keep Editing");
        if (result != true)
        {
            await Save();
            return;
        }

        _isSaving = true;
        await SafeActionAsync(async () =>
        {
            _letter.State = LetterState.Submitted;
            await LandingService.Admin.SaveLetter(_letter.LetterId, _letter);
            await OnParametersSetAsync();
        });
        _isSaving = false;
    }

}