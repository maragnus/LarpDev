@page "/admin/events"
@inherits LarpPage

@inject LandingService LandingService

<AdminLayout Title="Events Manager">
    @foreach (var (game, events) in _events)
    {
        <MudStack Row Class="pb-4">
            <MudText Typo="Typo.h6" Class="flex-grow-1">@game</MudText>
            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" OnClick="() => AddEvent()">Add Event</MudButton>
        </MudStack>
        <MudDataGrid T="EventInfo" Items="events" Dense Filterable Groupable Hover Loading="IsLoading" RowClick="RowClick" RowsPerPage="50">
            <PagerContent>
                <MudDataGridPager T="EventInfo"/>
            </PagerContent>
            <ChildRowContent>
                <MudDataGrid T="ComponentInfo" Items="context.Item.Components" Dense SortMode="SortMode.None">
                    <Columns>
                        <PropertyColumn Property="x => x.When" Title="Date" Format="dddd, MMM d, yyyy"/>
                        <PropertyColumn Property="x => x.Title" Title="Title"/>
                    </Columns>
                </MudDataGrid>
            </ChildRowContent>
            <Columns>
                <HierarchyColumn T="EventInfo" ButtonDisabledFunc="@(x => x.Components.Length == 0)"/>
                <PropertyColumn Property="x => x.When" Title="Date" Format="dddd, MMM d, yyyy"/>
                <PropertyColumn Property="x => x.Title" Title="Title"/>
                <PropertyColumn Property="x => x.LettersApproved" Title="Letters Approved"/>
                <PropertyColumn Property="x => x.LettersSubmitted" Title="Letters Submitted"/>
                <TemplateColumn T="EventInfo">
                    <CellTemplate>
                        @foreach (var letter in context.Item.Event.LetterTemplates)
                        {
                            <MudIcon Size="Size.Small" Color="@(letter.IsOpen ? Color.Primary : Color.Dark)" Icon="@LetterIcon.GetValueOrDefault(letter.Name)"/>
                        }
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
</AdminLayout>

@code {
    private (string, EventInfo[])[] _events = Array.Empty<(string, EventInfo[])>();

    static readonly Dictionary<string, string> LetterIcon = new()
    {
        { "PreEvent", Icons.Material.Filled.Rsvp },
        { "PostEvent", Icons.Material.Filled.Email },
    };

    [UsedImplicitly(ImplicitUseTargetFlags.Members)]
    record ComponentInfo(string Title, DateOnly When);

    [UsedImplicitly(ImplicitUseTargetFlags.Members)]
    record EventInfo(Event Event, string Game, string Id, string Title, string Location, DateOnly When,
        ComponentInfo[] Components, int LettersApproved, int LettersSubmitted)
    {
        public EventInfo(string game, Event e, LetterState[] letters) : this(
            e, game, e.EventId, e.Title ?? "Untitled", e.Location ?? "", e.Date,
            e.Components
                .Select(c =>
                    new ComponentInfo(c.Name ?? "Untitled", c.Date))
                .ToArray(),
            letters.Count(x => x == LetterState.Approved),
            letters.Count(x => x == LetterState.Submitted))
        {
        }
    }

    protected override async Task OnSafeInitializedAsync()
    {
        var games = LandingService.Games
            .ToDictionary(x => x.Value.Id, x => x.Value.Title);

        string GameName(string gameId) =>
            games.TryGetValue(gameId, out var game) ? game ?? "" : "";

        _events = (await LandingService.Admin.GetEvents())
            .Select(x => new EventInfo(
                GameName(x.Event.GameId),
                x.Event,
                x.Letters.Select(y => y.State).ToArray()))
            .GroupBy(x => x.Game)
            .Select(x => (x.Key, x.ToArray()))
            .ToArray();
    }

    private void RowClick(DataGridRowClickEventArgs<EventInfo> row)
    {
        NavigationManager.NavigateTo($"/admin/events/{row.Item.Id}");
    }

    private async Task AddEvent()
    {
        await SafeActionAsync(async () =>
        {
            var @event = await LandingService.Admin.DraftEvent();
            NavigationManager.NavigateTo($"/admin/events/{@event.EventId}");
        });
    }

}