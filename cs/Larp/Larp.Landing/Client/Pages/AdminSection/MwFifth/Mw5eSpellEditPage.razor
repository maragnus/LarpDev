@page "/admin/mw5e/spells"
@inherits LarpPage
@inject LandingService LandingService

<AdminLayout Title="Mystwood 5e Spells">
    <MudOverlay Visible="_isSaving" Absolute DarkBackground>
        <MudText Typo="Typo.h5">Saving...</MudText>
        <MudProgressCircular Indeterminate/>
    </MudOverlay>
    <MudStack Spacing="4">
        <MudButtonGroup OverrideStyles="false" Class="my-4">
            <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="Save" Color="Color.Success" Variant="Variant.Filled">Save</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="Add" Color="Color.Primary" Variant="Variant.Filled">Add Occupation</MudButton>
        </MudButtonGroup>
        <MudDrawerContainer>
            <MudDrawer>
                <MudListExtended T="Spell" ItemCollection="_spells" @bind-SelectedValue="@_spell" ToStringFunc="ToStringFunc" SearchBox SearchBoxClearable SearchBoxAutoFocus SearchFunc="SearchFunc" Clickable/>
            </MudDrawer>
            <MudPaper Class="pa-4">
                @if (_spell != null)
                {
                    <Mw5eSpellEditor Spell="_spell" Categories="_categories"/>
                }
            </MudPaper>
        </MudDrawerContainer>
    </MudStack>
</AdminLayout>

@code {
    private bool _isSaving;
    private readonly List<Spell> _spells = new();
    private Spell? _spell;
    private string[] _categories = Array.Empty<string>();

    protected override async Task OnSafeInitializedAsync()
    {
        var gameState = await LandingService.MwFifth.GetGameState("");
        _spells.AddRange(gameState.Spells);
        _categories = gameState.Spells.SelectMany(x => x.Categories).Distinct().Order().ToArray();
    }

    private async Task Save()
    {
        _isSaving = true;
        await SafeActionAsync(async () => { await LandingService.Admin.SaveSpells(_spells.ToArray()); });
        _isSaving = false;
    }

    private void Add()
    {
        _spells.Add(new Spell()
        {
            Name = "New Spell",
            Type = SpellType.Voice
        });
    }

    private bool SearchFunc(Spell spell, string query) =>
        spell.Name.Contains(query, StringComparison.InvariantCultureIgnoreCase);

    private string ToStringFunc(Spell spell) => $"{spell.Name} ({spell.Type})";
}