@page "/admin/mw5e/occupations"
@using System.Text.Json
@inherits LarpPage
@inject LandingService LandingService

<AdminLayout Title="Mystwood 5e Occupations">
    <MudOverlay Visible="_isSaving" Absolute DarkBackground>
        <MudText Typo="Typo.h5">Saving...</MudText>
        <MudProgressCircular Indeterminate/>
    </MudOverlay>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4" lg="3" Style="height: 75vh; overflow: hidden auto">
            <MudListExtended T="Occupation" ItemCollection="_occupations" @bind-SelectedValue="@_occupation" ToStringFunc="ToStringFunc" SearchBox SearchBoxClearable SearchBoxAutoFocus SearchFunc="SearchFunc" Clickable/>
        </MudItem>
        <MudItem xs="12" sm="6" md="8" lg="9">
            <MudButtonGroup OverrideStyles="false" Class="mb-4">
                <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="Save" Color="Color.Success" Variant="Variant.Filled">Save</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="Add" Color="Color.Primary" Variant="Variant.Filled">Add Occupation</MudButton>
            </MudButtonGroup>

            <MudPaper Class="pa-4">
                @if (_occupation != null)
                {
                    <Mw5eOccupationEditor Occupation="_occupation" Skills="_skills" HomeChapters="_chapters"/>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    
</AdminLayout>


@code {
    private readonly List<Occupation> _occupations = new();
    private Occupation? _occupation;
    private string[] _chapters = Array.Empty<string>();
    private SkillDefinition[] _skills = Array.Empty<SkillDefinition>();
    private bool _isSaving;

    protected override async Task OnSafeInitializedAsync()
    {
        var gameState = await LandingService.MwFifth.GetGameState("");
        _occupations.AddRange(gameState.Occupations);
        _chapters = gameState.HomeChapters.Select(x => x.Name).ToArray();
        _skills = gameState.Skills;
        Console.WriteLine(JsonSerializer.Serialize(gameState));
    }

    private async Task Save()
    {
        _isSaving = true;
        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.SaveOccupations(_occupations.ToArray());
        });
        _isSaving = false;
    }

    private void Add()
    {
        _occupations.Add(_occupation = new Occupation()
        {
            Name = "New Occupation",
            Type = OccupationType.Basic
        });
    }
    
    private bool SearchFunc(Occupation occupation, string query) =>
        occupation.Name.Contains(query, StringComparison.InvariantCultureIgnoreCase);

    private string ToStringFunc(Occupation occupation) => $"{occupation.Name} ({occupation.Type}) {string.Join(", ", occupation.Chapters ?? Array.Empty<string>())}".TrimEnd();
}