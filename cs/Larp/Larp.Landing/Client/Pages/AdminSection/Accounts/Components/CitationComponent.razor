<MudCard>
    @if (!_editing)
    {
        <MudCardContent>
            <MudStack Spacing="4">
                <MudStack Row Justify="Justify.FlexStart">
                    <MudTooltip Text="@Citation.Type">@GetIcon(Size.Medium)</MudTooltip>
                    @if (!string.IsNullOrEmpty(Citation.Title))
                    {
                        <MudText Typo="Typo.subtitle1" Style="font-weight: bold">@Citation.Title</MudText>
                    }
                </MudStack>
                <MudText Typo="Typo.body1">@Citation.Description</MudText>
                <MudText Typo="Typo.body2">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Person" Style="font-size: inherit"/> @(AuthorAccountName ?? "No Name") &#8212;
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.CalendarToday" Style="font-size: inherit"/> Created on @Citation.CreatedOn.ToString("MMM d, yyyy") &#8212;
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Edit" Style="font-size: inherit"/> Last Updated on @Citation.ModifiedOn.ToString("MMM d, yyyy")
                    @if (Citation.ResolvedOn.HasValue)
                    {
                        <span>&#8212; <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Edit"/> Resolved on @Citation.ResolvedOn.Value.ToString("MMM d, yyyy")</span>
                    }
                </MudText>
            </MudStack>
        </MudCardContent>
        <MudCardActions Class="no-print">
            @if (!ReadOnly)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Success" OnClick="Edit">Edit</MudButton>
            }
            @if (Citation.State == CitationState.Open)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Reply" Color="Color.Info" OnClick="Reply">Reply</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Done" Color="Color.Warning" OnClick="Resolve">Resolve</MudButton>
            }
            else if (Citation.State == CitationState.Resolved)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Undo" Color="Color.Warning" OnClick="Reopen">Reopen</MudButton>
            }
        </MudCardActions>
    }
    else
    {
        <MudCardContent Class="no-print">
            <MudGrid>
                <MudItem sm="12">
                    <MudStack Row>
                        <MudTooltip Text="@Citation.Type">@GetIcon(Size.Large)</MudTooltip>
                        <MudTextField @bind-Value="Citation.Title" Label="Title" Variant="Variant.Outlined" AutoFocus/>
                    </MudStack>
                </MudItem>
                <MudItem sm="12">
                    <MudField Label="Citation Type" Variant="Variant.Outlined">
                        <MudChipSet T="string" SelectedValues="_selected" SelectedValuesChanged="Callback" Mandatory Filter>
                            <MudChip Size="Size.Medium" SelectedColor="Color.Primary" Value="@("Concern")" Icon="">Concern</MudChip>
                            <MudChip Size="Size.Medium" SelectedColor="Color.Primary" Value="@("Praise")">Praise</MudChip>
                            <MudChip Size="Size.Medium" SelectedColor="Color.Primary" Value="@("Discussion")">Discussion</MudChip>
                        </MudChipSet>
                    </MudField>
                </MudItem>
                <MudItem sm="12">
                    <MudTextField @bind-Value="Citation.Description" Label="Description" Lines="6" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem sm="12">
                    <MudText Typo="Typo.body2">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Person" Style="font-size: inherit"/> @(AuthorAccountName ?? "No Name") &#8212;
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.CalendarToday" Style="font-size: inherit"/> Created on @Citation.CreatedOn.ToString("MMM d, yyyy") &#8212;
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.TwoTone.Edit" Style="font-size: inherit"/> Last Updated on @Citation.ModifiedOn.ToString("MMM d, yyyy")
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions Class="no-print">
            @if (Citation.State == CitationState.Draft)
            {
                <MudButtonGroup OverrideStyles="false">
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" OnClick="Save">Save New Citation</MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
                </MudButtonGroup>
            }
            else
            {
                <MudButtonGroup OverrideStyles="false">
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" OnClick="Save">Save Changes</MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Done" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
                </MudButtonGroup>
            }
        </MudCardActions>
    }
</MudCard>

@code {
        const string DefaultCitationType = "Discussion";

    [Parameter]
    public string? AccountName { get; set; }

    [Parameter]
    public string? AuthorAccountName { get; set; }

    [Parameter]
    public Citation Citation { get; set; } = default!;

    [Parameter]
    public EventCallback<string> Action { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private RenderFragment GetIcon(Size size) => Citation.Type switch {
        "Concern" => @<MudIcon Icon="@Icons.Material.TwoTone.Warning" Color="Color.Warning" Size="@size"/>,
        "Praise" => @<MudIcon Icon="@Icons.Material.TwoTone.ThumbUp" Color="Color.Success" Size="@size"/>,
        "Discussion" => @<MudIcon Icon="@Icons.Material.TwoTone.ChatBubble" Color="Color.Info" Size="@size"/>,
        _ => @<MudIcon Icon="@Icons.Material.TwoTone.StickyNote2" Color="Color.Info" Size="@size"/>,
        };

    protected override void OnParametersSet()
    {
        _editing = Citation.State == CitationState.Draft;
        _selected = new List<object> { Citation.Type ?? DefaultCitationType };
        Citation.Type ??= DefaultCitationType;
        base.OnParametersSet();
    }

    private ICollection<object> _selected = new List<object>();
    private bool _editing;
    private Citation? _oldCitation;

    private void Callback(ICollection<object> obj)
    {
        _selected.Clear();
        Citation.Type = obj.FirstOrDefault() as string ?? DefaultCitationType;
        _selected.Add(Citation.Type);
    }

    private void Edit()
    {
        _oldCitation = new Citation()
        {
            Title = Citation.Title,
            Description = Citation.Description,
            Type = Citation.Type,
            ModifiedOn = Citation.ModifiedOn
        };
        Citation.ModifiedOn = DateTime.Today;
        _editing = !ReadOnly;
    }

    private async Task Cancel()
    {
        if (Citation.State == CitationState.Draft)
        {
            await Action.InvokeAsync("Cancel");
            _editing = false;
            return;
        }

        Citation.Title = _oldCitation!.Title;
        Citation.Description = _oldCitation.Description;
        Citation.Type = _oldCitation.Type;
        Citation.ModifiedOn = _oldCitation.ModifiedOn;
        _editing = false;
    }

    private async Task Save()
    {
        _editing = false;
        await Action.InvokeAsync("Save");
        StateHasChanged();
    }

    private async Task Resolve() => await Action.InvokeAsync("Resolve");
    private async Task Reopen() => await Action.InvokeAsync("Reopen");
    private async Task Reply() => await Action.InvokeAsync("Reply");

}