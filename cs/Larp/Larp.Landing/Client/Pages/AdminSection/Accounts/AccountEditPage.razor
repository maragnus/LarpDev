@page "/admin/accounts/{AccountId}"
@using Larp.Landing.Client.Pages.AdminSection.Accounts.Components
@inherits LarpPage

@inject LandingService LandingService

<PageHeader Container>Account Manager</PageHeader>

@if (_account == null)
{
    <AdminLayout Title="Manage Account" Loading/>
    return;
}

<AdminLayout Title="@_title" Loading="IsLoading">
    <MudStack Spacing="4">

        <MudStack Row>
            <MudTooltip Text="Merge this account (emails, characters, attendance, etc) into another account and delete this account">
                <MudButton Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Merge" OnClick="Merge">Merge</MudButton>
            </MudTooltip>
            <MudTooltip Text="Attach files and images to this account">
                <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Attachment" OnClick="Attachments">Attachments</MudButton>
            </MudTooltip>
            @if (LandingService.IsInRole(AccountRole.CitationAccess))
            {
                <MudTooltip Text="View discussions, complaints, and complements">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.EditNote" OnClick="Citations">Citations</MudButton>
                </MudTooltip>
            }
            @if (_account.State == AccountState.Active)
            {
                <MudTooltip Text="Disinvitation blocks the character from signing in and notifies them when they attempt to log in that they can no longer access the site">
                    <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Block" OnClick="Uninvite">Disinvitation</MudButton>
                </MudTooltip>
                <MudTooltip Text="Archiving this account will disconnect any emails and they will no longer be able to sign in">
                    <MudButton Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Archive" OnClick="Archive">Archive</MudButton>
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="This will restore an account to Active status, be sure to add their email address if necessary">
                    <MudButton Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.RestoreFromTrash" OnClick="Restore">Restore</MudButton>
                </MudTooltip>
            }
        </MudStack>

        <ProfileEditor Account="_account" RefreshFunc="RefreshAccount"/>
        <NotesEditor Account="_account" RefreshFunc="RefreshAccount"/>
        @if (LandingService.IsInRole(AccountRole.CitationAccess))
        {
            <CitationList AccountId="@AccountId"/>
        }
        <EmailEditor Account="_account" RefreshFunc="RefreshAccount"/>
        <RoleEditor Account="_account" RefreshFunc="RefreshAccount"/>
        <CharacterList AccountId="@AccountId"/>
        <AttendanceList AccountId="@AccountId"/>
    </MudStack>
</AdminLayout>

@code {

    [Parameter]
    public string AccountId { get; set; } = default!;

    private Account? _account;
    private string? _title;

    private async Task RefreshAccount()
    {
        _account = await LandingService.Admin.GetAccount(AccountId);
        StateHasChanged();
    }

    protected override async Task OnSafeParametersSetAsync()
    {
        _account = await LandingService.Admin.GetAccount(AccountId);
        _title = "Manage " + (_account.Name ?? " Account");
        IsLoading = false; // Lie a little so the attachments can pop up later
    }

    private async Task Merge()
    {
        var dialog = await DialogService.ShowAsync<SelectAccountDialog>("Merge Accounts", new DialogParameters { { nameof(SelectAccountDialog.ContentText), "Select the account that this account will be merged into. The account you select will be absorb this account." } });
        var result = await dialog.Result;
        if (result.Canceled) return;

        var newAccountId = (string)result.Data;
        if (newAccountId == AccountId) return;
        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.MergeAccounts(AccountId, newAccountId);
            NavigationManager.NavigateTo($"/admin/accounts/{newAccountId}");
        });
    }

    private void Attachments()
    {
        NavigationManager.NavigateTo($"/admin/accounts/{AccountId}/attachments");
    }

    private async Task Uninvite()
    {
        var dialog = await DialogService.ShowMessageBox("Disinvite Account", "Are you sure you want to disinvite this account?", "Yes, disinvite", "No, don't change anything");
        if (dialog != true) return;

        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.UninviteAccount(AccountId);
            await OnParametersSetAsync();
        });
    }

    private async Task Archive()
    {
        var dialog = await DialogService.ShowMessageBox("Archive Account", "Are you sure you want to archive this account? This will disconnect any emails from this account. You should merge instead, if possible.", "Yes, archive", "No, don't change anything");
        if (dialog != true) return;

        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.ArchiveAccount(AccountId);
            await OnParametersSetAsync();
        });
    }

    private async Task Restore()
    {
        var dialog = await DialogService.ShowMessageBox("Restore Account", "Are you sure you want to restore this account to active status? Be sure to add an email address if necessary.", "Yes, restore", "No, don't change anything");
        if (dialog != true) return;

        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.RestoreAccount(AccountId);
            await OnParametersSetAsync();
        });
    }

    private void Citations()
    {
        NavigationManager.NavigateTo($"/admin/accounts/{AccountId}/citations");
    }

}