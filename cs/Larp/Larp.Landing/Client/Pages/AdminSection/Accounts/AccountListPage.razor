@page "/admin/accounts"
@inherits LarpPage
@inject LandingService LandingService
@inject IJSRuntime Js

<PageHeader Container>Account Manager</PageHeader>

<AdminLayout Title="Manage Accounts" Loading="IsLoading">
    <MudButtonGroup OverrideStyles="false">
        <MudButton Class="mt-4" Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SupervisedUserCircle" OnClick="AddAdmin">Add Admin Account</MudButton>
        <MudButton Class="mt-4" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AccountCircle" OnClick="AddAccount">Add Player Account</MudButton>
    </MudButtonGroup>

    <div class="pa-2 mb-4">
        <EditForm Model="_search" OnSubmit="Search">
            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Start">
                <MudTextField T="string?" OnlyValidateIfDirty Clearable Variant="Variant.Filled" Placeholder="Search" Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Outlined.Search" For="() => _search.Query" @bind-Value="_search.Query" OnAdornmentClick="Search"/>
            </MudStack>
        </EditForm>
    </div>

    <MudDataGrid T="Account" Items="_accounts" Dense Hover Class="d-flex flex-column mud-height-full pa-1">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <TemplateColumn T="Account">
                <CellTemplate>
                    @if (context.Item.Emails.Any(x => x is { IsVerified: true, IsPreferred: true }))
                    {
                        <MudTooltip Text="User has verified their email">
                            <MudIcon Icon="@Icons.Material.Filled.VerifiedUser" Color="Color.Primary"/>
                        </MudTooltip>
                    }
                    @if (context.Item.Roles.Contains(AccountRole.AdminAccess))
                    {
                        <MudTooltip Text="User has administrator access">
                            <MudIcon Icon="@Icons.Material.Filled.ShieldMoon" Color="Color.Primary"/>
                        </MudTooltip>
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.PreferredEmail" Title="Email"/>
            <PropertyColumn Property="x => x.Phone" Title="Phone" Hidden/>
            <PropertyColumn Property="x => x.Location" Title="Location" Hidden/>
            <PropertyColumn Property="x => x.Age" Title="Age"/>
            <PropertyColumn Property="x => x.MwFifthMoonstone" Title="MS Total"/>
            <PropertyColumn Property="x => x.MwFifthUsedMoonstone" Title="MS Spent"/>
            <PropertyColumn Property="x => x.AttendanceCount" Title="Attendances"/>
            <PropertyColumn Property="x => x.AttachmentCount" Title="Attachments"/>
            <PropertyColumn Property="x => x.CharacterCount" Title="Characters"/>
            <PropertyColumn Property="x => x.CitationCount" Title="Citations" Hidden="!HasCitationAccess"/>
            <TemplateColumn T="Account" Sortable="false" StickyRight>
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.OpenInBrowser" Color="Color.Primary" OnClick="@(() => Open(context.Item))"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Primary" OnClick="@(async () => await OpenInNew(context.Item))"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Attachment" Color="Color.Primary" OnClick="@(async () => await OpenAttachments(context.Item))"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.EditNote" Color="Color.Primary" OnClick="@(async () => await OpenCitations(context.Item))"/>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudButtonGroup OverrideStyles="false">
        <MudButton Class="mt-4" Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SupervisedUserCircle" OnClick="AddAdmin">Add Admin Account</MudButton>
        <MudButton Class="mt-4" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AccountCircle" OnClick="AddAccount">Add Player Account</MudButton>
    </MudButtonGroup>
</AdminLayout>

@code {
    private Account[] _allAccounts = Array.Empty<Account>();
    private Account[] _accounts = Array.Empty<Account>();

    public bool HasCitationAccess => !LandingService.IsInRole(AccountRole.CitationAccess);

    protected override async Task OnSafeInitializedAsync()
    {
        _allAccounts = await LandingService.Admin.GetAccounts(AccountState.Active);
        _accounts = _allAccounts;
    }

    private static bool SearchFunc(Account account, string query) =>
        (account.Name?.Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false)
        || (account.Location?.Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false)
        || (account.Phone?.Contains(query) ?? false)
        || account.Emails.Any(x => x.Email.Contains(query, StringComparison.InvariantCultureIgnoreCase));

    private readonly SearchModel _search = new();

    class SearchModel
    {
        public string? Query { get; set; }
    }

    private void Search()
    {
        var query = _search.Query;
        if (string.IsNullOrWhiteSpace(query))
            _accounts = _allAccounts;
        else
            _accounts = _allAccounts.Where(x => SearchFunc(x, query)).ToArray();
        StateHasChanged();
    }

    private async Task AddAdmin()
    {
        var dialog = await DialogService.ShowAsync<AddAdminDialog>("Add Administrator");
        var result = await dialog.Result;
        var stringResult = (StringResult)result.Data;
        if (stringResult.IsSuccess)
            NavigationManager.NavigateTo($"/admin/accounts/{stringResult.Value}");
        else
            await DialogService.ShowMessageBox("Adding Administrator", stringResult.ErrorMessage);
    }

    private async Task AddAccount()
    {
        var dialog = await DialogService.ShowAsync<AddAccountDialog>("Add Account");
        var result = await dialog.Result;
        var stringResult = (StringResult)result.Data;
        if (stringResult.IsSuccess)
            await OnSafeInitializedAsync();
        else
            await DialogService.ShowMessageBox("Adding Account", stringResult.ErrorMessage);
    }

    private void Open(Account account)
    {
        NavigationManager.NavigateTo("/admin/accounts/" + account.AccountId);
    }

    private async Task OpenInNew(Account account)
    {
        await Js.InvokeVoidAsync("open", CancellationToken.None, $"/admin/accounts/{account.AccountId}");
    }

    private async Task OpenAttachments(Account account)
    {
        await Js.InvokeVoidAsync("open", CancellationToken.None, $"/admin/accounts/{account.AccountId}/attachments");
    }

    private async Task OpenCitations(Account account)
    {
        await Js.InvokeVoidAsync("open", CancellationToken.None, $"/admin/accounts/{account.AccountId}/citations");
    }

}