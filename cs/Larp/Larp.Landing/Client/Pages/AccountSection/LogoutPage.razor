@page "/logout"
@inject LandingService LandingService
@inject NavigationManager NavigationManager
@inject IDialogService Dialog

<PageHeader>Logout</PageHeader>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Style="margin-top: 2em; padding: 2em">
        @if (_loadingState == LoadingState.Loading)
        {
            <MudText Typo="Typo.body1">Logging out...</MudText>
            <MudProgressLinear Indeterminate></MudProgressLinear>
        }
        else
        {
            <MudAlert Severity="Severity.Error">Logout failed, please try again.</MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private LoadingState _loadingState = LoadingState.Loading;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loadingState = LoadingState.Loaded;
            await LandingService.Logout(false);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _loadingState = LoadingState.Failed;

            var parameters = new DialogParameters { { "ContentText", ex.Message } };
            var response = await Dialog.ShowAsync<LogoutFailedDialog>("Unable to contact the server to perform a log out. Would you like to abandon this session?", parameters);
            var result = await response.Result;
            if (result.Data as bool? == true)
            {
                await LandingService.Logout(true);
                NavigationManager.NavigateTo("/");
            }
        }
    }

}