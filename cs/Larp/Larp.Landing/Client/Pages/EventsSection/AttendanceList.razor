@page "/events/attendance"
@inject LandingService LandingService
@using Larp.Common
@inherits LarpPage

<PageHeader Container>Event Attendance</PageHeader>

<MudContainer MaxWidth="MaxWidth.Large" Class="relative">
    <MudOverlay Absolute DarkBackground Visible="IsLoading">
        <MudProgressCircular Indeterminate/>
    </MudOverlay>
    <MudStack Spacing="4" Class="mt-4">
        <MudText Typo="Typo.h6">Mystwood 5e Moonstone</MudText>

        <MudStack Row AlignItems="AlignItems.Start" Justify="Justify.Center">
            <MudTooltip Text="The total amount of moonstone you have earned">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                    <MudAvatar Color="Color.Primary">@_totalMoonstone</MudAvatar>
                    <MudText Align="Align.Center" Typo="Typo.caption">Total<br/>Moonstone</MudText>
                </MudStack>
            </MudTooltip>
            <MudTooltip Text="The amount of moonstone you have allocated to characters">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                    <MudAvatar Color="Color.Secondary">@_usedMoonstone</MudAvatar>
                    <MudText Align="Align.Center" Typo="Typo.caption">Spent<br/>Moonstone</MudText>
                </MudStack>
            </MudTooltip>
            <MudTooltip Text="The amount of moonstone you have available to spend">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                    <MudAvatar Color="Color.Tertiary">@_availableMoonstone</MudAvatar>
                    <MudText Align="Align.Center" Typo="Typo.caption">Unspent<br/>Moonstone</MudText>
                </MudStack>
            </MudTooltip>
        </MudStack>


        <MudText Typo="Typo.h6">Event Attendance</MudText>
        <MudDataGrid T="AttendanceInfo" Items="_events" Hover Filterable="true" Loading="IsLoading" Groupable Dense>
            <Columns>
                @* <PropertyColumn Property="x => x.Game" Title="Game" Grouping="true"/> *@
                <TemplateColumn T="AttendanceInfo" Groupable="false" Sortable="false" Filterable="false">
                    <CellTemplate>
                        <MudIcon Icon="@context.Item.Icon" Color="Color.Primary" Size="Size.Small"/>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.When" Title="Date" Format="ddd, MMM d, yyyy" Groupable="false"/>
                <PropertyColumn Property="x => x.EventTitle" Title="Title" Groupable="false"/>
                <PropertyColumn Property="x => x.EventType" Title="Type"/>
                <PropertyColumn Property="x => x.MwFifthMoonstone" Title="Moonstone" Groupable="false"/>
                <PropertyColumn Property="x => x.Cost" Title="Cost" Groupable="false"/>
                <PropertyColumn Property="x => x.Paid" Title="Paid" Groupable="false"/>
                <TemplateColumn T="AttendanceInfo" Sortable="false" Filterable="false" Groupable="false">
                    <CellTemplate>
                        @foreach (var letter in context.Item.Letters)
                        {
                            var style = LetterTooltip[letter.State];
                            var icon = LetterIcon[letter.Name];
                            <MudTooltip Text="@style.Tooltip">
                                <MudIconButton Disabled="letter.State == LetterState.Locked" Size="Size.Small" Icon="@icon" Color="@style.Color" OnClick="() => OpenLetter(context.Item.EventId, letter.Name)"/>
                            </MudTooltip>
                        }
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudAlert Severity="Severity.Info">Is there an event missing? Please make sure you've completed your Post Event Letter (PEL) from the events page. If you still need help, please contact <a href="mailto:mystwood@mystwood.org?subject=Missing+event+attendance" target="_blank">Mystwood</a>.</MudAlert>
    </MudStack>
</MudContainer>

@code {
    private AttendanceInfo[] _events = Array.Empty<AttendanceInfo>();
    private int _totalMoonstone;
    private int _usedMoonstone;
    private int _availableMoonstone;

    static readonly Dictionary<LetterState, (string Tooltip, Color Color)> LetterTooltip = new()
    {
        { LetterState.NotStarted, ("You have not started the letter for this event", Color.Warning) },
        { LetterState.Draft, ("You have not submitted this letter yet", Color.Warning) },
        { LetterState.Submitted, ("Your event letter has been submitted and is waiting for approval", Color.Tertiary) },
        { LetterState.Approved, ("Your event letter has been approved", Color.Success) },
        { LetterState.Locked, ("Letter is currently closed", Color.Success) },
    };

    static readonly Dictionary<string, string> LetterIcon = new()
    {
        { LetterNames.PreEvent, Icons.Material.Filled.Rsvp },
        { LetterNames.PostEvent, Icons.Material.Filled.Email },
        { LetterNames.BetweenEvent, Icons.Material.Filled.MenuBook },
    };

    [UsedImplicitly(ImplicitUseTargetFlags.WithMembers)]
    private class AttendanceInfo
    {
        public IEnumerable<string> MwFifthCharacters { get; init; } = Array.Empty<string>();

        public string MwFifthMoonstone { get; init; } = default!;

        public DateOnly When { get; init; }

        public string EventId { get; init; } = default!;

        public string EventType { get; init; } = default!;

        public string EventTitle { get; init; } = default!;

        public string GameName { get; init; } = default!;

        public string Icon { get; init; } = default!;

        public decimal? Cost { get; init; }

        public decimal? Paid { get; init; }

        public Letter[] Letters { get; init; } = default!;
    }

    protected override async Task OnSafeInitializedAsync()
    {
        if (!LandingService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var account = LandingService.Account!;
        _totalMoonstone = account.MwFifthMoonstone ?? 0;
        _usedMoonstone = account.MwFifthUsedMoonstone ?? 0;
        _availableMoonstone = _totalMoonstone - _usedMoonstone;

        var games = LandingService.Games
            .ToDictionary(x => x.Value.Id, x => x.Value.Title ?? x.Value.Name);

        var characters = await LandingService.Service.GetCharacterNames();

        var attendances = await LandingService.Service.GetAttendance();

        static IEnumerable<Letter> GetLetters(Event @event, params Letter?[] letters)
        {
            foreach (var name in @event.LetterTemplates)
            {
                yield return letters.FirstOrDefault(x => x != null && x.EventId == @event.EventId && x.Name == name.Name)
                             ?? new Letter() { Name = name.Name, State = name.IsOpen ? LetterState.NotStarted : LetterState.Locked };
            }
        }

        _events = attendances.Events
            .Select(item =>
            {
                return new AttendanceInfo
                {
                    Icon = GetIcon(item.Event.EventType, item.Event.Title),
                    GameName = games.TryGetValue(item.Event.GameId, out var gameName) ? gameName : "No Game",
                    EventTitle = item.Event.Title ?? "No Title",
                    EventType = item.Event.EventType ?? "No Type",
                    When = item.Event.Date,
                    MwFifthMoonstone = (
                        (item.Attendance.MwFifth?.Moonstone ?? 0)
                        + (item.Attendance.MwFifth?.PostMoonstone ?? 0)).ToString(),
                    MwFifthCharacters = characters.TryFromKeys(item.Attendance.MwFifth?.CharacterIds),
                    Letters = GetLetters(item.Event, item.PreEvent, item.PostEvent, item.BetweenEvent).ToArray(),
                    EventId = item.Event.EventId,
                    Cost = item.Attendance.ExpectedPayment,
                    Paid = item.Attendance.ProvidedPayment
                };

                string GetIcon(string? type, string? title)
                {
                    if (type == null || title == null) return Icons.Material.Filled.Event;
                    if (type.Contains("Subscription", StringComparison.InvariantCultureIgnoreCase))
                        return Icons.Material.Filled.AttachMoney;
                    if (title.Contains("Patreon", StringComparison.InvariantCultureIgnoreCase))
                        return Icons.Material.Filled.AttachMoney;
                    if (title.Contains("Trivia", StringComparison.InvariantCultureIgnoreCase))
                        return Icons.Material.Filled.Celebration;
                    if (type.Contains("Game", StringComparison.InvariantCultureIgnoreCase))
                        return Icons.Material.Filled.SportsHandball;
                    if (type.Contains("Workday", StringComparison.InvariantCultureIgnoreCase))
                        return Icons.Material.Filled.Handyman;
                    if (type.Contains("Contest", StringComparison.InvariantCultureIgnoreCase))
                        return Icons.Material.Filled.Celebration;
                    if (type.Contains("Other", StringComparison.InvariantCultureIgnoreCase))
                        return Icons.Material.Filled.Celebration;
                    return Icons.Material.Filled.AddBox;
                }
            })
            .ToArray();
    }

    private void OpenLetter(string eventId, string letterName)
    {
        NavigationManager.NavigateTo($"/events/{eventId}/letter/{letterName}");
    }

}