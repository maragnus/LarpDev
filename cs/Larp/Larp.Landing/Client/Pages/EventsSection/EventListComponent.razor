@inject LandingService LandingService
@inherits LarpPage

<MudOverlay Absolute DarkBackground Visible="IsLoading">
    <MudProgressCircular Indeterminate/>
</MudOverlay>

<MudDataGrid T="EventInfo" Items="_events" Filterable Groupable Hover Loading="IsLoading" GroupExpanded="true" Dense>
    <Columns>
        <HierarchyColumn T="EventInfo" IconSize="Size.Small" ButtonDisabledFunc="@(x => x.Components.Length == 0)"/>
        <TemplateColumn Groupable="false" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudIcon Icon="@context.Item.Icon" Color="Color.Primary" Size="Size.Small"/>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Game" Title="Game" Hidden="true"/>
        <PropertyColumn Property="x => x.When" Title="Date" Format="ddd, MMM d, yyyy" Groupable="false"/>
        <PropertyColumn Property="x => x.Title" Title="Title" Groupable="false"/>
        <PropertyColumn Property="x => x.Location" Title="Location" Hidden/>
        <TemplateColumn T="EventInfo" Title="Event Letters" Groupable="false" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row Spacing="4">
                    @foreach (var letter in context.Item.Letters)
                    {
                        var style = LetterTooltip[letter.State];
                        var icon = LetterIcon[letter.Name];
                        <MudTooltip Text="@style.Tooltip">
                            <MudIconButton Disabled="letter.State == LetterState.Locked" Size="Size.Large" Variant="Variant.Filled" Icon="@icon" Color="@style.Color" OnClick="() => ViewLetter(context.Item.Id, letter.Name)"/>
                        </MudTooltip>
                    }
                    @if (LandingService.IsInRole(AccountRole.AdminAccess))
                    {
                        <MudIconButton Href="@($"/admin/events/{context.Item.Id}")" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Color="Color.Default"/>
                    }
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudStack Spacing="4">
            @if (!string.IsNullOrWhiteSpace(context.Item.Location))
            {
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudIcon Color="Color.Primary" Size="Size.Small" Style="font-size: inherit" Icon="@Icons.Material.Filled.LocationOn"/>
                    <MudText>@context.Item.Location</MudText>
                </MudStack>
            }
            <MudChipSet ReadOnly>
                @foreach (var component in context.Item.Components)
                {
                    <MudChip Size="Size.Small">@component.Title (@component.When.ToString("ddd, MMM d"))</MudChip>
                }
            </MudChipSet>
        </MudStack>
    </ChildRowContent>
</MudDataGrid>

@code {

    [Parameter]
    public bool Past { get; set; }

    private EventInfo[] _events = Array.Empty<EventInfo>();

    static readonly Dictionary<LetterState, (string Tooltip, Color Color)> LetterTooltip = new()
    {
        { LetterState.NotStarted, ("You have not started the letter for this event", Color.Warning) },
        { LetterState.Draft, ("You have not submitted this letter yet", Color.Warning) },
        { LetterState.Submitted, ("Your event letter has been submitted and is waiting for approval", Color.Tertiary) },
        { LetterState.Approved, ("Your event letter has been approved", Color.Success) },
        { LetterState.Locked, ("Letter is currently closed", Color.Success) },
    };

    static readonly Dictionary<string, string> LetterIcon = new()
    {
        { LetterNames.PreEvent, Icons.Material.Filled.Rsvp },
        { LetterNames.PostEvent, Icons.Material.Filled.Email },
        { LetterNames.BetweenEvent, Icons.Material.Filled.MenuBook },
    };

    private Dictionary<string, string?> _games = default!;

    record ComponentInfo(string Title, DateOnly When);

    record EventInfo(
        string Id, string Game, string Title, string Location,
        string Icon, DateOnly When, ComponentInfo[] Components, Letter[] Letters)
    {
        public EventInfo(string game, Event e, Letter[] letters)
            : this(e.EventId,
                game,
                e.Title ?? "Untitled",
                e.Location ?? "",
                GetEventIcon(e.EventType, e.Title),
                e.Date,
                e.Components
                    .Select(c =>
                        new ComponentInfo(c.Name ?? "Untitled", c.Date))
                    .ToArray(),
                GetLetters(e, letters).ToArray())
        {
        }

        private static IEnumerable<Letter> GetLetters(Event @event, Letter[] letters)
        {
            foreach (var name in @event.LetterTemplates)
            {
                yield return letters.FirstOrDefault(x => x.EventId == @event.EventId && x.Name == name.Name)
                             ?? new Letter() { Name = name.Name, State = name.IsOpen ? LetterState.NotStarted : LetterState.Locked };
            }
        }
    }

    static string GetEventIcon(string? type, string? title)
    {
        if (type == null || title == null) return Icons.Material.Filled.Event;
        if (type.Contains("Subscription", StringComparison.InvariantCultureIgnoreCase))
            return Icons.Material.Filled.AttachMoney;
        if (title.Contains("Patreon", StringComparison.InvariantCultureIgnoreCase))
            return Icons.Material.Filled.AttachMoney;
        if (title.Contains("Trivia", StringComparison.InvariantCultureIgnoreCase))
            return Icons.Material.Filled.Celebration;
        if (type.Contains("Game", StringComparison.InvariantCultureIgnoreCase))
            return Icons.Material.Filled.SportsHandball;
        if (type.Contains("Workday", StringComparison.InvariantCultureIgnoreCase))
            return Icons.Material.Filled.Handyman;
        if (type.Contains("Contest", StringComparison.InvariantCultureIgnoreCase))
            return Icons.Material.Filled.Celebration;
        if (type.Contains("Other", StringComparison.InvariantCultureIgnoreCase))
            return Icons.Material.Filled.Celebration;
        return Icons.Material.Filled.AddBox;
    }

    protected override async Task OnSafeParametersSetAsync()
    {
        var result = await LandingService.Service
            .GetEvents(Past ? EventList.Past : EventList.Upcoming);

        var events = result.Events.Values.Select(x =>
            new EventInfo(GameName(x.GameId), x, result.Letters.Values.ToArray()));

        _events = Past
            ? events.OrderByDescending(x => x.When).ToArray()
            : events.OrderBy(x => x.When).ToArray();
    }

    protected override void OnInitialized()
    {
        _games = LandingService.Games
            .ToDictionary(x => x.Value.Id, x => x.Value.Title);
    }

    private string GameName(string gameId) =>
        _games.TryGetValue(gameId, out var game) ? game ?? "" : "";

    private void ViewLetter(string eventId, string letterName)
    {
        NavigationManager.NavigateTo($"/events/{eventId}/letter/{letterName}");
    }

}