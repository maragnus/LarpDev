@inject LandingService LandingService
@inherits LarpPage

<MudOverlay Absolute DarkBackground Visible="IsLoading">
    <MudProgressCircular Indeterminate/>
</MudOverlay>

<MudStack Spacing="4">
    @foreach (var ev in _events)
    {
        <EventCard Item="ev">
            <Header>
                @if (LandingService.IsInRole(AccountRole.AdminAccess))
                {
                    <MudIconButton Href="@($"/admin/events/{ev.Event.EventId}")" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Color="Color.Default"/>
                }
            </Header>
        </EventCard>
    }
</MudStack>

@code {

    [Parameter]
    public bool Past { get; set; }

    private EventAttendanceItem[] _events = Array.Empty<EventAttendanceItem>();

    private Dictionary<string, string?> _games = default!;

    record ComponentInfo(string Title, DateOnly When);


    protected override async Task OnSafeParametersSetAsync()
    {
        var result = await LandingService.Service
            .GetEvents(Past ? EventList.Past : EventList.Upcoming);

        _events = Past
            ? result.Events.OrderByDescending(x => x.Event.Date).ToArray()
            : result.Events.OrderBy(x => x.Event.Date).ToArray();
    }

    protected override void OnInitialized()
    {
        _games = LandingService.Games
            .ToDictionary(x => x.Value.Id, x => x.Value.Title);
    }

    private string GameName(string gameId) =>
        _games.TryGetValue(gameId, out var game) ? game ?? "" : "";

    private void ViewLetter(string eventId, string letterName)
    {
        NavigationManager.NavigateTo($"/events/{eventId}/letter/{letterName}");
    }

}