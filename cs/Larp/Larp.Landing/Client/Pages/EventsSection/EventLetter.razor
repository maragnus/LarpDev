@inject LandingService LandingService
@inherits LarpPage

<MudPaper Class="pa-4 mt-4">
    <MudStack Spacing="4">
        <MudStack Row Justify="Justify.SpaceBetween">
            <MudText Typo="Typo.h6">@Template.Title</MudText>
            <MudChip>@(Letter.State.ToString())</MudChip>
        </MudStack>
        <MudText Typo="Typo.body2">@Event.Title on @Event.Date.ToString("dddd, MMMM dd, yyyy")</MudText>
        @if (!string.IsNullOrWhiteSpace(Template.Description))
        {
            <MudText Typo="Typo.body1">@Template.Description</MudText>
        }
    </MudStack>
</MudPaper>

@switch (Letter.State)
{
    case LetterState.Submitted when !Admin:
        <MudAlert Severity="@Severity.Info" Class="@(@"pa-4 mt-4")">
            This letter has been submitted and is waiting for admin approval. You can no longer make changes.
        </MudAlert>
        break;
    case LetterState.Approved when !Admin:
        <MudAlert Severity="@Severity.Info" Class="@(@"pa-4 mt-4")">
            This letter has been approved! You can no longer make changes.
        </MudAlert>
        break;
    case LetterState.NotStarted when Admin:
    case LetterState.Draft when Admin:
        <MudAlert Severity="@Severity.Error" Class="@(@"pa-4 mt-4")">
            This letter is still in <strong>draft</strong> status. The player has not submitted it.
        </MudAlert>
        break;
    case LetterState.Submitted when Admin:
        <MudAlert Severity="@Severity.Warning" Class="@(@"pa-4 mt-4")">
            This letter is in <strong>submitted</strong> status and is waiting for your approval.<br/>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Approval" OnClick="@Approve">Approve</MudButton>
        </MudAlert>
        break;
}

@foreach (var field in Template.Fields)
{
    if (field.Type == LetterFieldType.Removed) continue;
    if (!field.ShowField(Letter.Fields)) continue;
    <MudPaper Class="pa-4 mt-4">
        <MudStack Spacing="0">
            <MudText Typo="@(field.Type == LetterFieldType.Header ? Typo.h6 : Typo.body1)">@field.Title</MudText>
            <MudText Typo="Typo.body2">@field.Description</MudText>

            @switch (field.Type)
            {
                case LetterFieldType.Rating:
                    <MudRating T="int" ReadOnly="ReadOnly" MaxValue="10" SelectedValue="@(GetField<int>(field.Name))" SelectedValueChanged="value => SetInt(field.Name, value)"/>
                    break;
                case LetterFieldType.Text:
                    <MudTextField T="string?" ReadOnly="ReadOnly" Variant="Variant.Outlined" Value="@(GetField<string?>(field.Name))" ValueChanged="value => SetString(field.Name, value)"/>
                    break;
                case LetterFieldType.TextBlock:
                    <MudTextField T="string?" ReadOnly="ReadOnly" Variant="Variant.Outlined" Lines="4" Value="@(GetField<string?>(field.Name))" ValueChanged="value => SetString(field.Name, value)"/>
                    break;
                case LetterFieldType.Selection:
                    <MudSelectExtended T="string?" ReadOnly="ReadOnly" Clearable="@(!ReadOnly)" Variant="Variant.Outlined" ItemCollection="(ICollection<string>)field.Options" Value="@(GetField<string>(field.Name))" ValueChanged="value => SetString(field.Name, value)"/>
                    break;
                case LetterFieldType.MultipleSelection:
                    @if (ReadOnly)
                    {
                        <MudChipSet MultiSelection ReadOnly>
                            @foreach (var value in GetField<string[]>(field.Name) ?? Array.Empty<string>())
                            {
                                <MudChip>@value</MudChip>
                            }
                        </MudChipSet>
                    }
                    else
                    {
                        <MudListExtended Dense T="string" MultiSelection ItemCollection="field.Options" SelectedValues="@(GetField<string[]>(field.Name))" SelectedValuesChanged="value => SetStrings(field.Name, value.ToArray())"/>
                    }
                    break;
                case LetterFieldType.Component:
                    <MudSelectExtended T="string?" ReadOnly="ReadOnly" Clearable="@(!ReadOnly)" Variant="Variant.Outlined" ItemCollection="_components" Value="@(GetField<string>(field.Name))" ValueChanged="value => SetString(field.Name, value)"/>
                    break;
                case LetterFieldType.Components:
                    @if (ReadOnly)
                    {
                        <MudChipSet MultiSelection ReadOnly>
                            @foreach (var value in GetField<string[]>(field.Name) ?? Array.Empty<string>())
                            {
                                <MudChip>@value</MudChip>
                            }
                        </MudChipSet>
                    }
                    else
                    {
                        <MudListExtended Dense T="string" MultiSelection ItemCollection="_components" SelectedValues="@(GetField<string[]>(field.Name))" SelectedValuesChanged="value => SetStrings(field.Name, value.ToArray())"/>
                    }
                    break;
                case LetterFieldType.Character:
                    <MudSelectExtended T="string?" ReadOnly="ReadOnly" Clearable="@(!ReadOnly)" Variant="Variant.Outlined" ItemCollection="_characters" Value="@(GetField<string>(field.Name))" ValueChanged="value => SetString(field.Name, value)"/>
                    break;
                case LetterFieldType.Characters:
                    @if (ReadOnly)
                    {
                        <MudChipSet MultiSelection ReadOnly>
                            @foreach (var value in GetField<string[]>(field.Name) ?? Array.Empty<string>())
                            {
                                <MudChip>@value</MudChip>
                            }
                        </MudChipSet>
                    }
                    else
                    {
                        <MudListExtended Dense T="string" MultiSelection ItemCollection="_characters" SelectedValues="@(GetField<string[]>(field.Name))" SelectedValuesChanged="value => SetStrings(field.Name, value.ToArray())"/>
                    }
                    break;
                case LetterFieldType.YesNo:
                    <MudSwitch T="bool" ReadOnly="ReadOnly" Checked="@(GetField<bool>(field.Name))" CheckedChanged="value => SetBool(field.Name, value)" Color="Color.Success" UnCheckedColor="Color.Error"/>
                    break;
                case LetterFieldType.Removed:
                case LetterFieldType.Header:
                default:
                    break;
            }
        </MudStack>
    </MudPaper>
}

@code {

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public bool Admin { get; set; }

    [Parameter]
    public Event Event { get; set; } = default!;

    [Parameter]
    public Letter Letter { get; set; } = default!;

    [Parameter]
    public LetterTemplate Template { get; set; } = default!;

    private string[] _components = Array.Empty<string>();
    private string[] _characters = Array.Empty<string>();

    record Character(string Id, string Name);

    protected override async Task OnSafeParametersSetAsync()
    {
        var characters = await LandingService.Service.GetCharacterNames();
        _characters = characters.Values.Select(x=>x ?? "No Name Set").ToArray();
    }

    protected override void OnParametersSet()
    {
        _components = Event.Components.Select(x => x.Name ?? x.Date.ToString("dddd, MMMM d")).ToArray();
    }

    private T? GetField<T>(string fieldName)
    {
        try
        {
            if (!Letter.Fields.ContainsKey(fieldName))
                return default;

            if (typeof(T) == typeof(string[]))
            {
                return (T)(object)Letter.Fields[fieldName].Split(',');
            }

            return (T)Convert.ChangeType(Letter.Fields[fieldName], typeof(T));
        }
        catch
        {
            return default;
        }
    }

    private void SetString(string fieldName, string? value)
    {
        if (string.IsNullOrWhiteSpace(value))
            Letter.Fields.Remove(fieldName);
        else
            Letter.Fields[fieldName] = value.Trim();
    }

    private void SetInt(string fieldName, int? value)
    {
        if (!value.HasValue)
            Letter.Fields.Remove(fieldName);
        else
            Letter.Fields[fieldName] = value.Value.ToString();
    }

    private void SetBool(string fieldName, bool? value)
    {
        if (!value.HasValue)
            Letter.Fields.Remove(fieldName);
        else
            Letter.Fields[fieldName] = value.Value.ToString();
    }

    private void SetStrings(string fieldName, string[]? values)
    {
        if (values == null || values.Length == 0)
            Letter.Fields.Remove(fieldName);
        else
            Letter.Fields[fieldName] = string.Join(",", values);
    }

    private async Task Approve()
    {
        await SafeActionAsync(async () =>
        {
            await LandingService.Admin.ApproveLetter(Letter.LetterId);
            Letter.State = LetterState.Approved;
        });
    }

}