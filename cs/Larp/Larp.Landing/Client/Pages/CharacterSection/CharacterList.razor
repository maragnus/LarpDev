@page "/characters/{gameName?}"

@inject LandingService LandingService
@inherits LarpPage

<PageHeader Container>Your Characters</PageHeader>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Elevation="2" Class="mt-4 relative" Style="min-height: 150px">
        <MudOverlay Absolute DarkBackground Visible="IsLoading">
            <MudProgressCircular Indeterminate/>
        </MudOverlay>

        @if (!IsLoading && _characters != null && _games != null)
        {
            <MudList T="string?" Clickable Style="width: 100%; margin: 0" SelectedValueChanged="href => NavigationManager.NavigateTo((string)href)">
                @foreach (var game in _games)
                {
                    var characters = _characters
                        .Where(x => x.GameName == game.Name)
                        .OrderBy(x => x.Name)
                        .ToList();

                    <MudListSubheader>
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <div style="padding-left: 1em">@game.Description</div>
                            @if (characters.Count == 0)
                            {
                                <MudAlert Severity="Severity.Info">You don't currently have any characters</MudAlert>
                            }
                        </MudStack>
                    </MudListSubheader>

                    @foreach (var character in characters)
                    {
                        var uri = "/";
                        var chip = "";
                        var color = Color.Primary;

                        switch (character.State)
                        {
                            case CharacterState.Live:
                                uri = $"/characters/{game.Name}/{character.Id}";
                                chip = "Live in game";
                                color = Color.Success;
                                break;

                            case CharacterState.Draft:
                                uri = $"/characters/{game.Name}/{character.Id}/edit";
                                chip = "Drafting changes";
                                break;

                            case CharacterState.Review:
                                uri = $"/characters/{game.Name}/{character.Id}";
                                chip = "Submitted for review";
                                color = Color.Info;
                                break;

                            case CharacterState.Retired:
                                uri = $"/characters/{game.Name}/{character.Id}";
                                chip = "Retired";
                                color = Color.Error;
                                break;
                        }

                        <MudListItem
                            Icon="@Icons.Material.Filled.Person"
                            AdornmentColor="Color.Primary"
                            Value="@uri">
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <div>
                                    <MudText Typo="Typo.body1">@character.Name</MudText>
                                    <MudText Typo="Typo.body2">@character.Summary</MudText>
                                </div>
                                <MudChip Text="@chip" Color="@color"/>
                            </MudStack>
                        </MudListItem>
                    }
                    <MudListItem
                        Icon="@Icons.Material.Filled.Add"
                        Value="@($"/characters/{game.Name}/new")"
                        Text="@($"Draft a new {game.Title} character")"/>
                    <MudListItem
                        Icon="@Icons.Material.Filled.Help"
                        Value="@($"/characters/{game.Name}/quiz")"
                        Text="@($"Help creating a {game.Title} character")"/>
                }
            </MudList>
        }
    </MudPaper>
</MudContainer>

@code {

    [Parameter]
    public string? GameName { get; set; }

    CharacterSummary[]? _characters;
    Game[]? _games;

    protected override async Task OnSafeInitializedAsync()
    {
        _characters = await LandingService.GetCharacters();
        _games = LandingService.Games.Values.ToArray();

        if (GameName != null)
            _games = _games.Where(x => x.Name == GameName).ToArray();
    }

}