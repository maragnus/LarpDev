@page "/transactions"
@inherits LarpPage
@inject LandingService LandingService

<PageHeader Container>Transactions</PageHeader>

<MudContainer MaxWidth="MaxWidth.Medium" Class="relative pt-4">
    <MudStack Spacing="4">

        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceEvenly" Class="my-4">

            <MudTooltip Text="The amount of USD in your account to cover event admission">
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
                    <MudCard Class="pa-2">
                        <MudText Typo="Typo.h6">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                                <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Style="font-size: inherit"/>
                                @_balance.ToString("0.00")
                            </MudStack>
                        </MudText>
                    </MudCard>
                    <MudText Align="Align.Center" Typo="Typo.caption">Account<br/>Balance</MudText>
                </MudStack>
            </MudTooltip>
            <MudTooltip Text="Deposit money into your account from Square">
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" OnClick="Deposit">Add Funds</MudButton>
            </MudTooltip>
            <MudTooltip Text="Share your account balance with other accounts">
                <MudButton StartIcon="@Icons.Material.Filled.People" Variant="Variant.Filled" Color="Color.Primary">Share</MudButton>
            </MudTooltip>
        </MudStack>
    </MudStack>

    <MudText Typo="Typo.h6" Class="mt-4 mb-4">Transactions</MudText>
    <MudDataGrid T="TransactionInfo" Items="_transactions" Hover Filterable="true" Loading="IsLoading" Groupable Dense>
        <NoRecordsContent>
            <MudAlert Class="mx-4" Severity="Severity.Info" Icon="@Icons.Material.Filled.Info">
                You have no transactions
            </MudAlert>
        </NoRecordsContent>
        <Columns>
            <TemplateColumn T="TransactionInfo" Groupable="false" Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row Spacing="1">
                        <MudIcon Icon="@context.Item.Icon" Color="@context.Item.Color" Size="Size.Small" Style="font-size: inherit"/>
                        <MudText Typo="Typo.body1" Color="@context.Item.Color">@context.Item.Type</MudText>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.When" Title="Date" Format="ddd, MMM d, yyyy" Groupable="false"/>
            <PropertyColumn Property="x => x.Status" Title="Status"/>
            <PropertyColumn Property="x => x.Source" Title="Source"/>
            <PropertyColumn Property="x => x.Amount" Title="Amount" Format="0.00" Groupable="false"/>
            <TemplateColumn T="TransactionInfo" Groupable="false" Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row>
                        @if (!string.IsNullOrEmpty(context.Item.PaymentUrl))
                        {
                            <MudIconButton
                                Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Size="Size.Small"
                                OnClick="() => OpenReceipt(context.Item.PaymentUrl)"/>
                        }
                        <MudIconButton
                            Icon="@Icons.Material.Filled.Receipt" Color="Color.Primary" Size="Size.Small"
                            Disabled="string.IsNullOrEmpty(context.Item.ReceiptUrl)"
                            OnClick="() => OpenReceipt(context.Item.ReceiptUrl)"/>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    <MudAlert Severity="Severity.Info">Is there any incorrect? Please contact <a href="mailto:mystwood@mystwood.org?subject=Question+about+transactions" target="_blank">Mystwood</a>.</MudAlert>
</MudContainer>

@code {
    private decimal _balance;
    private TransactionInfo[] _transactions = Array.Empty<TransactionInfo>();

    public class TransactionInfo
    {
        public string Icon { get; init; } = string.Empty;
        public Color Color { get; init; }
        public string Type { get; init; } = string.Empty;
        public string Source { get; init; } = string.Empty;
        public string Status { get; init; } = string.Empty;
        public DateTime When { get; init; }
        public decimal Amount { get; init; }
        public string? Note { get; init; }
        public string? ReceiptUrl { get; init; }
        public string? PaymentUrl { get; set; }
    }

    protected override async Task OnSafeParametersSetAsync()
    {
        var transactions = await LandingService.GetTransactions();
        _transactions = transactions
            .OrderByDescending(transaction => transaction.TransactionOn)
            .Select(transaction => new TransactionInfo
            {
                Icon = transaction.Type switch {
                    TransactionType.Deposit => Icons.Material.Filled.KeyboardDoubleArrowDown,
                    TransactionType.Withdrawal => Icons.Material.Filled.KeyboardDoubleArrowUp,
                    _ => Icons.Material.Filled.KeyboardDoubleArrowDown
                    },
                Color = transaction.Type switch {
                    TransactionType.Deposit => Color.Primary,
                    TransactionType.Withdrawal => Color.Error,
                    _ => Color.Warning
                    },
                Source = transaction.SourceAccountName
                         ?? transaction.EventTitle
                         ?? transaction.Source
                         ?? "Unknown",
                Status = transaction.Status.ToString(),
                Type = transaction.Type.ToString(),
                When = transaction.TransactionOn.LocalDateTime,
                Amount = transaction.AmountDecimal,
                Note = transaction.Note,
                ReceiptUrl = transaction.ReceiptUrl,
                PaymentUrl = transaction.Status != TransactionStatus.Completed
                    ? transaction.OrderUrl : null
            }).ToArray();

        _balance = _transactions
            .Select(transaction => transaction.Amount)
            .DefaultIfEmpty()
            .Sum();
    }

    private async Task Deposit()
    {
        await DialogService.ShowAsync<DepositDialog>("Deposit Funds", new DialogParameters
        {
            { nameof(DepositDialog.Balance), _balance }
        });
    }

    private void OpenReceipt(string? receiptUrl)
    {
        if (string.IsNullOrEmpty(receiptUrl)) return;
        NavigationManager.NavigateTo(receiptUrl);
    }

}