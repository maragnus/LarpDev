@inject IJSRuntime JsRuntime
@inject LandingService LandingService

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<CascadingValue Value="@_pageInfo">
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(Layout.Layout)"/>
            <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(Layout.Layout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingValue>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = default!;

    [UsedImplicitly] private PageInfo _pageInfo = new()
    {
        HeaderText = @<span>@LandingService.ServiceName</span>
    };

    private async Task UpdateDarkMode()
    {
        var darkMode = LandingService.DarkMode switch
        {
            DarkMode.SystemDefault => _pageInfo.DarkMode = await _mudThemeProvider.GetSystemPreference(),
            DarkMode.Light => false,
            DarkMode.Dark => true,
            _ => false
            };

        if (_pageInfo.DarkMode == darkMode && _isDarkMode == darkMode) return;

        _pageInfo.DarkMode = darkMode;
        _isDarkMode = darkMode;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        LandingService.DarkModeChanged += async (_, _) => await UpdateDarkMode();
        _pageInfo.PageInfoChanged += async (_, _) => { await JsRuntime.InvokeVoidAsync("pageInfoChanged", _pageInfo.Container, _pageInfo.DarkMode); };
    }

    private async Task WatchSystemPreference(bool arg)
    {
        if (LandingService.DarkMode == DarkMode.SystemDefault)
            await UpdateDarkMode();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _mudThemeProvider.WatchSystemPreference(WatchSystemPreference);
            await UpdateDarkMode();
        }
    }

}