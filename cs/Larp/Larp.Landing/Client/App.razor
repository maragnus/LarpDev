@inject LandingService LandingService

@code {
    protected override async Task OnInitializedAsync()
    {
        await LandingService.Refresh();
    }
    public static ThemeValue Light = ThemeFactory.CreateTheme(new ThemeConfig
        {
            Palette = new PaletteConfig
            {
                Type = PaletteType.Light,

                Primary = new PaletteColorConfig
                {
                    Main = "#112d1e"
                },

                Secondary = new PaletteColorConfig
                {
                    Main = PaletteColors.Green.A400.Darken(0.1m)
                },

                Background = new PaletteBackground
                {
                    Default = "#fff",

                    Custom = new Dictionary<string, string>
                {
                    { "level1", "#fff" },

                    { "level2", PaletteColors.Grey.X100 },

                    { "appbar-color", "var(--theme-palette-primary-contrast-text)" },

                    { "appbar-background-color", "var(--theme-palette-primary-main)" },
                },
                }
            }
        });
}

<ThemeProvider Light="@Light">
    <Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(Layout.Layout)"/>
        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(Layout.Layout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
</ThemeProvider>
