/**
 * @fileoverview gRPC-Web generated client stub for larp.services
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.9
// source: larp/services.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as larp_common_pb from '../larp/common_pb';
import * as larp_events_pb from '../larp/events_pb';
import * as larp_services_pb from '../larp/services_pb';


export class LarpUserClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAccount = new grpcWeb.MethodDescriptor(
    '/larp.services.LarpUser/GetAccount',
    grpcWeb.MethodType.UNARY,
    larp_common_pb.Empty,
    larp_services_pb.AccountResponse,
    (request: larp_common_pb.Empty) => {
      return request.serializeBinary();
    },
    larp_services_pb.AccountResponse.deserializeBinary
  );

  getAccount(
    request: larp_common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<larp_services_pb.AccountResponse>;

  getAccount(
    request: larp_common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void): grpcWeb.ClientReadableStream<larp_services_pb.AccountResponse>;

    methodDescriptorUpdateProfile = new grpcWeb.MethodDescriptor(
        '/larp.services.LarpUser/UpdateProfile',
        grpcWeb.MethodType.UNARY,
        larp_services_pb.UpdateProfileRequest,
        larp_services_pb.AccountResponse,
        (request: larp_services_pb.UpdateProfileRequest) => {
            return request.serializeBinary();
        },
        larp_services_pb.AccountResponse.deserializeBinary
    );
    methodDescriptorAddEmail = new grpcWeb.MethodDescriptor(
        '/larp.services.LarpUser/AddEmail',
        grpcWeb.MethodType.UNARY,
        larp_common_pb.StringRequest,
        larp_services_pb.AccountResponse,
        (request: larp_common_pb.StringRequest) => {
            return request.serializeBinary();
        },
        larp_services_pb.AccountResponse.deserializeBinary
  );

  getAccount(
    request: larp_common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/larp.services.LarpUser/GetAccount',
        request,
        metadata || {},
        this.methodDescriptorGetAccount,
          callback);
    }
      return this.client_.unaryCall(
          this.hostname_ +
          '/larp.services.LarpUser/GetAccount',
          request,
          metadata || {},
          this.methodDescriptorGetAccount);
  }

    updateProfile(
        request: larp_services_pb.UpdateProfileRequest,
        metadata: grpcWeb.Metadata | null): Promise<larp_services_pb.AccountResponse>;

    updateProfile(
        request: larp_services_pb.UpdateProfileRequest,
        metadata: grpcWeb.Metadata | null,
        callback: (err: grpcWeb.RpcError,
                   response: larp_services_pb.AccountResponse) => void): grpcWeb.ClientReadableStream<larp_services_pb.AccountResponse>;

    updateProfile(
        request: larp_services_pb.UpdateProfileRequest,
        metadata: grpcWeb.Metadata | null,
        callback?: (err: grpcWeb.RpcError,
                    response: larp_services_pb.AccountResponse) => void) {
        if (callback !== undefined) {
            return this.client_.rpcCall(
                this.hostname_ +
                '/larp.services.LarpUser/UpdateProfile',
                request,
                metadata || {},
                this.methodDescriptorUpdateProfile,
                callback);
        }
        return this.client_.unaryCall(
            this.hostname_ +
            '/larp.services.LarpUser/UpdateProfile',
            request,
            metadata || {},
            this.methodDescriptorUpdateProfile);
    }

  addEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null): Promise<larp_services_pb.AccountResponse>;

  addEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void): grpcWeb.ClientReadableStream<larp_services_pb.AccountResponse>;

  addEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/larp.services.LarpUser/AddEmail',
        request,
        metadata || {},
        this.methodDescriptorAddEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/larp.services.LarpUser/AddEmail',
    request,
    metadata || {},
    this.methodDescriptorAddEmail);
  }

  methodDescriptorRemoveEmail = new grpcWeb.MethodDescriptor(
    '/larp.services.LarpUser/RemoveEmail',
    grpcWeb.MethodType.UNARY,
    larp_common_pb.StringRequest,
    larp_services_pb.AccountResponse,
    (request: larp_common_pb.StringRequest) => {
      return request.serializeBinary();
    },
    larp_services_pb.AccountResponse.deserializeBinary
  );

  removeEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null): Promise<larp_services_pb.AccountResponse>;

  removeEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void): grpcWeb.ClientReadableStream<larp_services_pb.AccountResponse>;

  removeEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/larp.services.LarpUser/RemoveEmail',
        request,
        metadata || {},
        this.methodDescriptorRemoveEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/larp.services.LarpUser/RemoveEmail',
    request,
    metadata || {},
    this.methodDescriptorRemoveEmail);
  }

  methodDescriptorPreferEmail = new grpcWeb.MethodDescriptor(
    '/larp.services.LarpUser/PreferEmail',
    grpcWeb.MethodType.UNARY,
    larp_common_pb.StringRequest,
    larp_services_pb.AccountResponse,
    (request: larp_common_pb.StringRequest) => {
      return request.serializeBinary();
    },
    larp_services_pb.AccountResponse.deserializeBinary
  );

  preferEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null): Promise<larp_services_pb.AccountResponse>;

  preferEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void): grpcWeb.ClientReadableStream<larp_services_pb.AccountResponse>;

  preferEmail(
    request: larp_common_pb.StringRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/larp.services.LarpUser/PreferEmail',
        request,
        metadata || {},
        this.methodDescriptorPreferEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/larp.services.LarpUser/PreferEmail',
    request,
    metadata || {},
    this.methodDescriptorPreferEmail);
  }

  methodDescriptorGetEvents = new grpcWeb.MethodDescriptor(
    '/larp.services.LarpUser/GetEvents',
    grpcWeb.MethodType.UNARY,
    larp_services_pb.EventListRequest,
    larp_services_pb.EventListResponse,
    (request: larp_services_pb.EventListRequest) => {
      return request.serializeBinary();
    },
    larp_services_pb.EventListResponse.deserializeBinary
  );

  getEvents(
    request: larp_services_pb.EventListRequest,
    metadata: grpcWeb.Metadata | null): Promise<larp_services_pb.EventListResponse>;

  getEvents(
    request: larp_services_pb.EventListRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: larp_services_pb.EventListResponse) => void): grpcWeb.ClientReadableStream<larp_services_pb.EventListResponse>;

  getEvents(
    request: larp_services_pb.EventListRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: larp_services_pb.EventListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/larp.services.LarpUser/GetEvents',
        request,
        metadata || {},
        this.methodDescriptorGetEvents,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/larp.services.LarpUser/GetEvents',
    request,
    metadata || {},
    this.methodDescriptorGetEvents);
  }

  methodDescriptorRsvpEvent = new grpcWeb.MethodDescriptor(
    '/larp.services.LarpUser/RsvpEvent',
    grpcWeb.MethodType.UNARY,
    larp_services_pb.EventRsvpRequest,
    larp_events_pb.Event,
    (request: larp_services_pb.EventRsvpRequest) => {
      return request.serializeBinary();
    },
    larp_events_pb.Event.deserializeBinary
  );

  rsvpEvent(
    request: larp_services_pb.EventRsvpRequest,
    metadata: grpcWeb.Metadata | null): Promise<larp_events_pb.Event>;

  rsvpEvent(
    request: larp_services_pb.EventRsvpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: larp_events_pb.Event) => void): grpcWeb.ClientReadableStream<larp_events_pb.Event>;

  rsvpEvent(
    request: larp_services_pb.EventRsvpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: larp_events_pb.Event) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/larp.services.LarpUser/RsvpEvent',
        request,
        metadata || {},
        this.methodDescriptorRsvpEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/larp.services.LarpUser/RsvpEvent',
    request,
    metadata || {},
    this.methodDescriptorRsvpEvent);
  }

}

export class LarpAdminClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSetAccount = new grpcWeb.MethodDescriptor(
    '/larp.services.LarpAdmin/SetAccount',
    grpcWeb.MethodType.UNARY,
    larp_services_pb.AccountRequest,
    larp_services_pb.AccountResponse,
    (request: larp_services_pb.AccountRequest) => {
      return request.serializeBinary();
    },
    larp_services_pb.AccountResponse.deserializeBinary
  );

  setAccount(
    request: larp_services_pb.AccountRequest,
    metadata: grpcWeb.Metadata | null): Promise<larp_services_pb.AccountResponse>;

  setAccount(
    request: larp_services_pb.AccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void): grpcWeb.ClientReadableStream<larp_services_pb.AccountResponse>;

  setAccount(
    request: larp_services_pb.AccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: larp_services_pb.AccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/larp.services.LarpAdmin/SetAccount',
        request,
        metadata || {},
        this.methodDescriptorSetAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/larp.services.LarpAdmin/SetAccount',
    request,
    metadata || {},
    this.methodDescriptorSetAccount);
  }

}

