// source: larp/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var larp_accounts_pb = require('../larp/accounts_pb.js');
goog.object.extend(proto, larp_accounts_pb);
goog.exportSymbol('proto.larp.AccountAttendance', null, global);
goog.exportSymbol('proto.larp.Event', null, global);
goog.exportSymbol('proto.larp.EventRsvp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.larp.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.larp.Event.repeatedFields_, null);
};
goog.inherits(proto.larp.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.larp.Event.displayName = 'proto.larp.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.larp.AccountAttendance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.larp.AccountAttendance.repeatedFields_, null);
};
goog.inherits(proto.larp.AccountAttendance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.larp.AccountAttendance.displayName = 'proto.larp.AccountAttendance';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.larp.Event.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.larp.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.larp.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.larp.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.larp.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    location: jspb.Message.getFieldWithDefault(msg, 4, ""),
    date: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eventType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    rsvp: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    hidden: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    attendeesList: jspb.Message.toObjectList(msg.getAttendeesList(),
    proto.larp.AccountAttendance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.larp.Event}
 */
proto.larp.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.larp.Event;
  return proto.larp.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.larp.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.larp.Event}
 */
proto.larp.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventType(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRsvp(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    case 9:
      var value = new proto.larp.AccountAttendance;
      reader.readMessage(value,proto.larp.AccountAttendance.deserializeBinaryFromReader);
      msg.addAttendees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.larp.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.larp.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.larp.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.larp.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRsvp();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getHidden();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getAttendeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.larp.AccountAttendance.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.larp.Event.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string game_id = 2;
 * @return {string}
 */
proto.larp.Event.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.larp.Event.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string location = 4;
 * @return {string}
 */
proto.larp.Event.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string date = 5;
 * @return {string}
 */
proto.larp.Event.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string event_type = 6;
 * @return {string}
 */
proto.larp.Event.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool rsvp = 7;
 * @return {boolean}
 */
proto.larp.Event.prototype.getRsvp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.setRsvp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool hidden = 8;
 * @return {boolean}
 */
proto.larp.Event.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.setHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated AccountAttendance attendees = 9;
 * @return {!Array<!proto.larp.AccountAttendance>}
 */
proto.larp.Event.prototype.getAttendeesList = function() {
  return /** @type{!Array<!proto.larp.AccountAttendance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.larp.AccountAttendance, 9));
};


/**
 * @param {!Array<!proto.larp.AccountAttendance>} value
 * @return {!proto.larp.Event} returns this
*/
proto.larp.Event.prototype.setAttendeesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.larp.AccountAttendance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.larp.AccountAttendance}
 */
proto.larp.Event.prototype.addAttendees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.larp.AccountAttendance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.larp.Event} returns this
 */
proto.larp.Event.prototype.clearAttendeesList = function() {
  return this.setAttendeesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.larp.AccountAttendance.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.larp.AccountAttendance.prototype.toObject = function(opt_includeInstance) {
  return proto.larp.AccountAttendance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.larp.AccountAttendance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.larp.AccountAttendance.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    moonstone: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rsvp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    charactersList: jspb.Message.toObjectList(msg.getCharactersList(),
    larp_accounts_pb.AccountCharacterSummary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.larp.AccountAttendance}
 */
proto.larp.AccountAttendance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.larp.AccountAttendance;
  return proto.larp.AccountAttendance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.larp.AccountAttendance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.larp.AccountAttendance}
 */
proto.larp.AccountAttendance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMoonstone(value);
      break;
    case 4:
      var value = /** @type {!proto.larp.EventRsvp} */ (reader.readEnum());
      msg.setRsvp(value);
      break;
    case 5:
      var value = new larp_accounts_pb.AccountCharacterSummary;
      reader.readMessage(value,larp_accounts_pb.AccountCharacterSummary.deserializeBinaryFromReader);
      msg.addCharacters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.larp.AccountAttendance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.larp.AccountAttendance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.larp.AccountAttendance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.larp.AccountAttendance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMoonstone();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRsvp();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCharactersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      larp_accounts_pb.AccountCharacterSummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.larp.AccountAttendance.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.AccountAttendance} returns this
 */
proto.larp.AccountAttendance.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.larp.AccountAttendance.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.AccountAttendance} returns this
 */
proto.larp.AccountAttendance.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 moonstone = 3;
 * @return {number}
 */
proto.larp.AccountAttendance.prototype.getMoonstone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.larp.AccountAttendance} returns this
 */
proto.larp.AccountAttendance.prototype.setMoonstone = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional EventRsvp rsvp = 4;
 * @return {!proto.larp.EventRsvp}
 */
proto.larp.AccountAttendance.prototype.getRsvp = function() {
  return /** @type {!proto.larp.EventRsvp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.larp.EventRsvp} value
 * @return {!proto.larp.AccountAttendance} returns this
 */
proto.larp.AccountAttendance.prototype.setRsvp = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated AccountCharacterSummary characters = 5;
 * @return {!Array<!proto.larp.AccountCharacterSummary>}
 */
proto.larp.AccountAttendance.prototype.getCharactersList = function() {
  return /** @type{!Array<!proto.larp.AccountCharacterSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, larp_accounts_pb.AccountCharacterSummary, 5));
};


/**
 * @param {!Array<!proto.larp.AccountCharacterSummary>} value
 * @return {!proto.larp.AccountAttendance} returns this
*/
proto.larp.AccountAttendance.prototype.setCharactersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.larp.AccountCharacterSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.larp.AccountCharacterSummary}
 */
proto.larp.AccountAttendance.prototype.addCharacters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.larp.AccountCharacterSummary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.larp.AccountAttendance} returns this
 */
proto.larp.AccountAttendance.prototype.clearCharactersList = function() {
  return this.setCharactersList([]);
};


/**
 * @enum {number}
 */
proto.larp.EventRsvp = {
  UNANSWERED: 0,
  NO: 1,
  MAYBE: 2,
  YES: 3,
  CONFIRMED: 4,
  APPROVED: 5
};

goog.object.extend(exports, proto.larp);
