// source: larp/mw5e/occupations.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.larp.mw5e.Occupation', null, global);
goog.exportSymbol('proto.larp.mw5e.OccupationType', null, global);
goog.exportSymbol('proto.larp.mw5e.SkillChoice', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.larp.mw5e.SkillChoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.larp.mw5e.SkillChoice.repeatedFields_, null);
};
goog.inherits(proto.larp.mw5e.SkillChoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.larp.mw5e.SkillChoice.displayName = 'proto.larp.mw5e.SkillChoice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.larp.mw5e.Occupation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.larp.mw5e.Occupation.repeatedFields_, null);
};
goog.inherits(proto.larp.mw5e.Occupation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.larp.mw5e.Occupation.displayName = 'proto.larp.mw5e.Occupation';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.larp.mw5e.SkillChoice.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.larp.mw5e.SkillChoice.prototype.toObject = function(opt_includeInstance) {
  return proto.larp.mw5e.SkillChoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.larp.mw5e.SkillChoice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.larp.mw5e.SkillChoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    skillsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.larp.mw5e.SkillChoice}
 */
proto.larp.mw5e.SkillChoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.larp.mw5e.SkillChoice;
  return proto.larp.mw5e.SkillChoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.larp.mw5e.SkillChoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.larp.mw5e.SkillChoice}
 */
proto.larp.mw5e.SkillChoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSkills(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.larp.mw5e.SkillChoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.larp.mw5e.SkillChoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.larp.mw5e.SkillChoice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.larp.mw5e.SkillChoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSkillsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.larp.mw5e.SkillChoice.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.larp.mw5e.SkillChoice} returns this
 */
proto.larp.mw5e.SkillChoice.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string skills = 2;
 * @return {!Array<string>}
 */
proto.larp.mw5e.SkillChoice.prototype.getSkillsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.larp.mw5e.SkillChoice} returns this
 */
proto.larp.mw5e.SkillChoice.prototype.setSkillsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.larp.mw5e.SkillChoice} returns this
 */
proto.larp.mw5e.SkillChoice.prototype.addSkills = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.larp.mw5e.SkillChoice} returns this
 */
proto.larp.mw5e.SkillChoice.prototype.clearSkillsList = function() {
  return this.setSkillsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.larp.mw5e.Occupation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.larp.mw5e.Occupation.prototype.toObject = function(opt_includeInstance) {
  return proto.larp.mw5e.Occupation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.larp.mw5e.Occupation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.larp.mw5e.Occupation.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    specialtiesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    skills: (f = msg.getSkills()) && proto.larp.mw5e.SkillChoice.toObject(includeInstance, f),
    duty: jspb.Message.getFieldWithDefault(msg, 5, ""),
    livery: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.larp.mw5e.Occupation}
 */
proto.larp.mw5e.Occupation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.larp.mw5e.Occupation;
  return proto.larp.mw5e.Occupation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.larp.mw5e.Occupation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.larp.mw5e.Occupation}
 */
proto.larp.mw5e.Occupation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSpecialties(value);
      break;
    case 3:
      var value = /** @type {!proto.larp.mw5e.OccupationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.larp.mw5e.SkillChoice;
      reader.readMessage(value,proto.larp.mw5e.SkillChoice.deserializeBinaryFromReader);
      msg.setSkills(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuty(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLivery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.larp.mw5e.Occupation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.larp.mw5e.Occupation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.larp.mw5e.Occupation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.larp.mw5e.Occupation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpecialtiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSkills();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.larp.mw5e.SkillChoice.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.larp.mw5e.Occupation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string specialties = 2;
 * @return {!Array<string>}
 */
proto.larp.mw5e.Occupation.prototype.getSpecialtiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.setSpecialtiesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.addSpecialties = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.clearSpecialtiesList = function() {
  return this.setSpecialtiesList([]);
};


/**
 * optional OccupationType type = 3;
 * @return {!proto.larp.mw5e.OccupationType}
 */
proto.larp.mw5e.Occupation.prototype.getType = function() {
  return /** @type {!proto.larp.mw5e.OccupationType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.larp.mw5e.OccupationType} value
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SkillChoice skills = 4;
 * @return {?proto.larp.mw5e.SkillChoice}
 */
proto.larp.mw5e.Occupation.prototype.getSkills = function() {
  return /** @type{?proto.larp.mw5e.SkillChoice} */ (
    jspb.Message.getWrapperField(this, proto.larp.mw5e.SkillChoice, 4));
};


/**
 * @param {?proto.larp.mw5e.SkillChoice|undefined} value
 * @return {!proto.larp.mw5e.Occupation} returns this
*/
proto.larp.mw5e.Occupation.prototype.setSkills = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.clearSkills = function() {
  return this.setSkills(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.larp.mw5e.Occupation.prototype.hasSkills = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string duty = 5;
 * @return {string}
 */
proto.larp.mw5e.Occupation.prototype.getDuty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.setDuty = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.clearDuty = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.larp.mw5e.Occupation.prototype.hasDuty = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string livery = 6;
 * @return {string}
 */
proto.larp.mw5e.Occupation.prototype.getLivery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.setLivery = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.larp.mw5e.Occupation} returns this
 */
proto.larp.mw5e.Occupation.prototype.clearLivery = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.larp.mw5e.Occupation.prototype.hasLivery = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.larp.mw5e.OccupationType = {
  OCCUPATION_TYPE_BASIC: 0,
  OCCUPATION_TYPE_YOUTH: 1,
  OCCUPATION_TYPE_ADVANCED: 2,
  OCCUPATION_TYPE_PLOT: 3,
  OCCUPATION_TYPE_ENHANCEMENT: 4
};

goog.object.extend(exports, proto.larp.mw5e);
